version: '3.8'

# =============================================================================
# CONFIGURATION DÉVELOPPEMENT
# Surcharge pour environnement de développement
# =============================================================================

services:
  # =============================================================================
  # WEB - CONFIGURATION DÉVELOPPEMENT
  # =============================================================================
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: development
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
      - DEBUG=*
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      - ./apps/web:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
      - "9229:9229"  # Node.js debugging
    command: ["npm", "run", "dev"]
    develop:
      watch:
        - action: sync
          path: ./apps/web/src
          target: /app/src
        - action: rebuild
          path: package.json

  # =============================================================================
  # DESKTOP - CONFIGURATION DÉVELOPPEMENT
  # =============================================================================
  desktop:
    build:
      context: ./apps/desktop-java
      dockerfile: Dockerfile.dev
    environment:
      - JAVA_OPTS=-Xmx1g -Dspring.profiles.active=dev -Ddebug=true
      - LOG_LEVEL=DEBUG
    volumes:
      - ./apps/desktop-java:/app
      - desktop-dev-cache:/app/.m2
    ports:
      - "8080:8080"
      - "5005:5005"  # Java debugging
    develop:
      watch:
        - action: sync
          path: ./apps/desktop-java/src
          target: /app/src
        - action: rebuild
          path: pom.xml

  # =============================================================================
  # POSTGRESQL - CONFIGURATION DÉVELOPPEMENT
  # =============================================================================
  postgres:
    environment:
      - POSTGRES_DB=ecodeli_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./docker/postgres/init-dev.sql:/docker-entrypoint-initdb.d/01-init-dev.sql:ro
    command: >
      postgres
      -c log_statement=all
      -c log_duration=on
      -c log_min_duration_statement=0
      -c shared_preload_libraries=pg_stat_statements



  # =============================================================================
  # NGINX - CONFIGURATION DÉVELOPPEMENT
  # =============================================================================
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile.dev
    volumes:
      - ./docker/nginx/conf.d/development.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"

  # =============================================================================
  # OUTILS DE DÉVELOPPEMENT
  # =============================================================================
  
  # Adminer pour gestion de base de données
  adminer:
    image: adminer:latest
    container_name: ecodeli-adminer
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - ecodeli-network
    restart: unless-stopped



  # Mailhog pour capture d'emails
  mailhog:
    ports:
      - "1025:1025"
      - "8025:8025"

  # Swagger UI pour documentation API
  swagger-ui:
    image: swaggerapi/swagger-ui:latest
    container_name: ecodeli-swagger
    ports:
      - "8083:8080"
    environment:
      - SWAGGER_JSON=/swagger/openapi.json
    volumes:
      - ./docs/api/openapi.json:/swagger/openapi.json:ro
    networks:
      - ecodeli-network
    restart: unless-stopped

  # =============================================================================
  # HOT RELOAD POUR LE DÉVELOPPEMENT
  # =============================================================================
  
  # Watcher pour l'application web
  web-watcher:
    image: node:18-alpine
    container_name: ecodeli-web-watcher
    working_dir: /app
    volumes:
      - ./apps/web:/app
    command: ["npm", "run", "dev:watch"]
    networks:
      - ecodeli-network
    depends_on:
      - web
    profiles:
      - dev-tools

  # Watcher pour l'application desktop
  desktop-watcher:
    image: maven:3.9-openjdk-17
    container_name: ecodeli-desktop-watcher
    working_dir: /app
    volumes:
      - ./apps/desktop-java:/app
    command: ["mvn", "compile", "quarkus:dev"]
    networks:
      - ecodeli-network
    depends_on:
      - desktop
    profiles:
      - dev-tools

# =============================================================================
# VOLUMES DÉVELOPPEMENT
# =============================================================================
volumes:
  postgres-dev-data:
    driver: local

  desktop-dev-cache:
    driver: local

# Configuration pour désactiver certains services en dev
profiles:
  dev-tools:
    # Services optionnels pour développement
  monitoring:
    # Monitoring désactivé par défaut en dev