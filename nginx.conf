# Configuration Nginx pour EcoDeli
# Serveur web avec réécriture d'URL et gestion des erreurs personnalisées

# Configuration générale
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Optimisations de performance
worker_rlimit_nofile 65535;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Configuration des logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Optimisations de performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Compression Gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Limites de sécurité
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

    # Configuration SSL/TLS (pour la production)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;

    # Headers de sécurité
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

    # Cache pour les ressources statiques
    map $sent_http_content_type $expires {
        "text/html"                 epoch;
        "text/css"                  max;
        "application/javascript"    max;
        "image/gif"                 max;
        "image/jpeg"                max;
        "image/png"                 max;
        "image/svg+xml"             max;
        "image/x-icon"              max;
        "image/webp"                max;
        "font/woff"                 max;
        "font/woff2"                max;
        default                     off;
    }

    expires $expires;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=20r/m;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=10r/m;

    # Configuration upstream pour Next.js
    upstream nextjs_backend {
        server 127.0.0.1:3000;
        keepalive 32;
    }

    # Serveur principal EcoDeli
    server {
        listen 80;
        listen [::]:80;
        server_name ecodeli.local windows;

        # Redirection HTTPS en production
        # return 301 https://$server_name$request_uri;

        # Configuration pour le développement
        root /var/www/ecodeli;
        index index.html index.htm;

        # Pages d'erreur personnalisées
        error_page 400 /errors/400.html;
        error_page 401 /errors/401.html;
        error_page 403 /errors/403.html;
        error_page 404 /errors/404.html;
        error_page 429 /errors/429.html;
        error_page 500 502 503 504 /errors/5xx.html;

        # Gestion des erreurs personnalisées
        location /errors/ {
            alias /var/www/ecodeli/error-pages/;
            internal;
        }

        # Proxy vers Next.js pour toutes les requêtes
        location / {
            # Rate limiting pour les requêtes générales
            limit_req zone=api burst=20 nodelay;

            proxy_pass http://nextjs_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Headers pour le cache
            proxy_set_header Cache-Control "no-cache";
        }

        # API endpoints avec rate limiting spécifique
        location /api/auth/ {
            limit_req zone=auth burst=5 nodelay;
            
            proxy_pass http://nextjs_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Logs spéciaux pour l'authentification
            access_log /var/log/nginx/auth.log main;
        }

        location /api/upload/ {
            limit_req zone=upload burst=3 nodelay;
            
            # Limite de taille pour les uploads
            client_max_body_size 50M;
            
            proxy_pass http://nextjs_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeouts étendus pour les uploads
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # Servir les fichiers statiques directement
        location /_next/static/ {
            alias /var/www/ecodeli/.next/static/;
            expires max;
            add_header Cache-Control "public, immutable";
        }

        location /public/ {
            alias /var/www/ecodeli/public/;
            expires max;
        }

        # Réécritures d'URL pour l'API
        location ~ ^/api/v1/(.*)$ {
            rewrite ^/api/v1/(.*)$ /api/$1 last;
        }

        # Réécriture pour les anciens liens (SEO)
        location ~ ^/old-path/(.*)$ {
            return 301 /new-path/$1;
        }

        # Documentation API accessible publiquement
        location /api-docs {
            proxy_pass http://nextjs_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Cache pour la documentation
            proxy_cache_valid 200 1h;
        }

        # WebSocket pour les notifications en temps réel
        location /socket.io/ {
            proxy_pass http://nextjs_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Healthcheck endpoint
        location /health {
            access_log off;
            proxy_pass http://nextjs_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
        }

        # Robots.txt dynamique
        location = /robots.txt {
            proxy_pass http://nextjs_backend;
            proxy_cache_valid 200 1d;
        }

        # Sitemap XML
        location ~ ^/sitemap.*\.xml$ {
            proxy_pass http://nextjs_backend;
            proxy_cache_valid 200 1h;
        }

        # Bloquer les accès malveillants
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Logs des tentatives d'accès suspects
        location ~ \.(aspx|php|jsp|cgi)$ {
            access_log /var/log/nginx/suspicious.log main;
            return 404;
        }
    }

    # Configuration HTTPS pour la production
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name ecodeli.fr www.ecodeli.fr;

        # Certificats SSL (Let's Encrypt recommandé)
        # ssl_certificate /path/to/certificate.crt;
        # ssl_certificate_key /path/to/private.key;

        # Redirection www vers non-www
        if ($host = 'www.ecodeli.fr') {
            return 301 https://ecodeli.fr$request_uri;
        }

        # Configuration identique au serveur HTTP
        root /var/www/ecodeli;
        index index.html index.htm;

        # Headers HTTPS supplémentaires
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Configuration proxy identique au serveur HTTP
        location / {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://nextjs_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
    }

    # Serveur de monitoring (optionnel)
    server {
        listen 8080;
        server_name localhost;

        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }

        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}

# Configuration des streams (optionnel, pour load balancing avancé)
stream {
    # Logs pour les connexions TCP/UDP
    log_format basic '$remote_addr [$time_local] '
                     '$protocol $status $bytes_sent $bytes_received '
                     '$session_time';

    access_log /var/log/nginx/stream.log basic;

    # Load balancing pour base de données (si nécessaire)
    upstream database_backend {
        server 127.0.0.1:5432 weight=3;
        # server backup.server:5432 backup;
    }

    # Proxy pour base de données
    server {
        listen 5433;
        proxy_pass database_backend;
        proxy_timeout 3s;
        proxy_responses 1;
    }
}