---
description: 
globs: 
alwaysApply: false
---
# üöÄ EcoDeli - R√®gles Globales Compl√®tes du Projet

## üìã Table des Mati√®res
1. [Vue d'ensemble du Projet](mdc:#vue-densemble-du-projet)
2. [Sp√©cifications Officielles](mdc:#sp√©cifications-officielles)
3. [Architecture et Stack Technique](mdc:#architecture-et-stack-technique)
4. [Structure API Routes](mdc:#structure-api-routes)
5. [Mod√®les de Donn√©es Prisma](mdc:#mod√®les-de-donn√©es-prisma)
6. [Fonctionnalit√©s Critiques](mdc:#fonctionnalit√©s-critiques)
7. [Bonnes Pratiques de D√©veloppement](mdc:#bonnes-pratiques-de-d√©veloppement)
8. [Restrictions et Interdictions](mdc:#restrictions-et-interdictions)
9. [Rapport de Fonctionnalit√©s](mdc:#rapport-de-fonctionnalit√©s)

---

## üè¢ Vue d'ensemble du Projet

**EcoDeli** est une soci√©t√© de crowdshipping cr√©√©e √† Paris en 2018, bas√©e au 110 rue de Flandre (19√®me).
L'entreprise met en relation exp√©diteurs et livreurs occasionnels pour r√©duire l'impact environnemental et favoriser le pouvoir d'achat.

### Croissance et Infrastructure
- **Croissance rapide** depuis 2018
- **6 entrep√¥ts** : Paris (bureau + entrep√¥t), Marseille, Lyon, Lille, Montpellier, Rennes
- **Modernisation SI** compl√®te demand√©e
- **Appel d'offre** lanc√© le 20 f√©vrier 2025

### 5 Espaces Utilisateur Distincts

#### 1. Espace Client
- D√©p√¥t d'annonces (colis ou services)
- R√©servation de services √† la personne
- Gestion des paiements et abonnements (Free/Starter/Premium)
- Suivi des livraisons en temps r√©el
- Acc√®s aux box de stockage
- **Tutoriel obligatoire premi√®re connexion** (overlay)

#### 2. Espace Livreur
- Inscription avec validation documents (identit√©, permis, assurance)
- D√©claration de trajets √† l'avance
- Matching automatique avec annonces
- Gestion des livraisons (compl√®tes/partielles)
- Validation par code √† 6 chiffres
- Portefeuille et retraits
- Carte NFC apr√®s validation

#### 3. Espace Commer√ßant
- Gestion contrat avec EcoDeli
- Cr√©ation d'annonces produits
- Configuration l√¢cher de chariot
- Facturation et paiements
- Import bulk d'annonces

#### 4. Espace Prestataire
- Validation avec certifications/habilitations
- Calendrier de disponibilit√©s
- Gestion des interventions
- √âvaluations clients
- Facturation mensuelle automatique
- Tarifs n√©goci√©s avec EcoDeli

#### 5. Back Office Admin
- Validation documents livreurs/prestataires
- Gestion compl√®te utilisateurs
- Monitoring livraisons et litiges
- Gestion financi√®re globale
- Configuration des 6 entrep√¥ts
- Param√®tres services cloud

### Services Disponibles
- Transport de colis (int√©gral ou partiel avec relais)
- Transport de personnes
- Transfert a√©roport
- Courses
- Achats internationaux
- Garde d'animaux
- Services √† domicile (m√©nage, jardinage)
- L√¢cher de chariot
- Box de stockage temporaire

---

## üéØ Sp√©cifications Officielles

### Structure Obligatoire des 3 Missions

#### Mission 1 : Gestion de la Soci√©t√© ‚≠ê **PRIORIT√â MAXIMALE**
**Application Web compl√®te** avec 5 espaces distincts obligatoires

#### Mission 2 : Services Suppl√©mentaires
**Applications compl√©mentaires** Java + Android + NFC

#### Mission 3 : Infrastructure Syst√®me, R√©seau et S√©curit√©
**Architecture r√©seau EDN** compl√®te avec 6 sites

### Mission 1 - Fonctionnalit√©s D√©taill√©es

#### Espace Clients - Abonnements **OBLIGATOIRES**
```
Free (‚Ç¨0/mois) :
- Assurance : 0‚Ç¨
- R√©duction : 0%
- Envoi prioritaire : +15%

Starter (‚Ç¨9.90/mois) :
- Assurance : jusqu'√† 115‚Ç¨/envoi
- R√©duction : 5%
- Envoi prioritaire : +5%
- R√©duction permanente : 5% petits colis

Premium (‚Ç¨19.99/mois) :
- Assurance : jusqu'√† 3000‚Ç¨/envoi (au-del√† +75‚Ç¨)
- R√©duction : 9%
- Premier envoi offert (si < 150‚Ç¨)
- Envoi prioritaire : 3 offerts/mois, puis +5%
- R√©duction permanente : 5% tous colis
```

#### Espace Commer√ßants - L√¢cher de Chariot **SERVICE PHARE**
- **Configuration** par le commer√ßant : zones, cr√©neaux, tarifs
- **Processus client** : Achats ‚Üí Demande livraison ‚Üí Choix cr√©neau ‚Üí Paiement ‚Üí Livraison

#### Espace Prestataires - Facturation Automatique **CRITIQUE**
- **G√©n√©ration automatique** le 30 de chaque mois √† 23h
- **Synth√®se prestations** du mois √©coul√©
- **G√©n√©ration PDF** professionnel
- **Virement bancaire automatique** simul√©

---

## üõ†Ô∏è Architecture et Stack Technique

### Stack Technique Obligatoire

#### Framework & Runtime
- **Next.js 15** avec App Router
- **TypeScript** pour le typage strict
- **Node.js** pour le runtime

#### Authentification
- **Better-Auth** pour la gestion compl√®te de l'authentification
- Support des 5 r√¥les : CLIENT, DELIVERER, MERCHANT, PROVIDER, ADMIN
- Sessions s√©curis√©es avec cookies

#### Base de Donn√©es
- **PostgreSQL** comme base de donn√©es principale
- **Prisma** comme ORM avec typage TypeScript
- Migrations automatiques avec `npx prisma migrate dev`
- Interface d'administration avec `npx prisma studio`

#### State Management
- **Zustand** pour la gestion d'√©tat global
- Store modulaire par feature

#### Validation & Formulaires
- **React Hook Form** pour les formulaires performants
- **Zod** pour la validation des sch√©mas
- Validation c√¥t√© client ET serveur

#### Interface Utilisateur
- **Radix UI** pour les composants primitifs accessibles
- **Tailwind CSS** pour le styling utilitaire
- **shadcn/ui** comme syst√®me de design
- Composants dans [src/components/ui/](mdc:src/components/ui)

#### Paiements
- **Stripe** pour tous les paiements
- Webhooks s√©curis√©s pour les √©v√©nements
- Gestion des abonnements (Free/Starter/Premium)

#### Notifications
- **OneSignal** pour les notifications push
- Templates de notifications dans [src/features/notifications/templates/](mdc:src/features/notifications/templates)

#### G√©n√©ration PDF
- **jsPDF** pour la g√©n√©ration de factures et documents
- Templates r√©utilisables dans [src/features/invoices/templates/](mdc:src/features/invoices/templates)

#### Internationalisation
- **next-intl** pour le support multilingue FR/EN
- Messages dans [src/messages/](mdc:src/messages)
- Configuration dans [src/i18n.ts](mdc:src/i18n.ts)

### Structure de Fichiers
- Configuration : [components.json](mdc:components.json)
- Base de donn√©es : [prisma/schema.prisma](mdc:prisma/schema.prisma)
- Authentification : [src/lib/auth.ts](mdc:src/lib/auth.ts)
- Routes API : [src/app/api/](mdc:src/app/api)
- Layouts par r√¥le : [src/app/[locale]/(protected)/](mdc:src/app/[locale]/(protected)/)
- Composants UI : [src/components/ui/](mdc:src/components/ui)
- Features modulaires : [src/features/](mdc:src/features)

---

## üîó Structure API Routes

### Architecture API Routes

#### 1. Authentification
```
/api/auth/
‚îú‚îÄ‚îÄ register/route.ts       # POST - Inscription utilisateur
‚îú‚îÄ‚îÄ login/route.ts          # POST - Connexion
‚îú‚îÄ‚îÄ logout/route.ts         # POST - D√©connexion
‚îî‚îÄ‚îÄ [...all]/route.ts       # Better-Auth configuration
```

#### 2. Gestion Utilisateurs
```
/api/users/
‚îú‚îÄ‚îÄ profile/route.ts        # GET/PUT - Profil utilisateur
‚îú‚îÄ‚îÄ [id]/
‚îÇ   ‚îú‚îÄ‚îÄ route.ts           # GET/PUT/DELETE - Utilisateur sp√©cifique
‚îÇ   ‚îú‚îÄ‚îÄ documents/route.ts  # GET/POST - Documents utilisateur
‚îÇ   ‚îî‚îÄ‚îÄ validate/route.ts   # POST - Validation utilisateur (admin)
‚îî‚îÄ‚îÄ [role]/route.ts         # GET - Utilisateurs par r√¥le
```

#### 3. Annonces
```
/api/announcements/
‚îú‚îÄ‚îÄ route.ts               # GET/POST - Liste/Cr√©er annonces
‚îú‚îÄ‚îÄ [id]/route.ts          # GET/PUT/DELETE - Annonce sp√©cifique
‚îî‚îÄ‚îÄ matching/route.ts      # POST - Matching annonces/trajets
```

#### 4. Livraisons
```
/api/deliveries/
‚îú‚îÄ‚îÄ route.ts               # GET/POST - Liste/Cr√©er livraisons
‚îú‚îÄ‚îÄ [id]/
‚îÇ   ‚îú‚îÄ‚îÄ route.ts           # GET/PUT - Livraison sp√©cifique
‚îÇ   ‚îú‚îÄ‚îÄ tracking/route.ts   # GET/POST - Suivi livraison
‚îÇ   ‚îî‚îÄ‚îÄ validate/route.ts   # POST - Validation code 6 chiffres
```

#### 5. R√©servations
```
/api/bookings/
‚îú‚îÄ‚îÄ route.ts               # GET/POST - Liste/Cr√©er r√©servations
‚îî‚îÄ‚îÄ [id]/route.ts          # GET/PUT/DELETE - R√©servation sp√©cifique
```

#### 6. Paiements
```
/api/payments/
‚îú‚îÄ‚îÄ route.ts               # GET/POST - Paiements
‚îú‚îÄ‚îÄ stripe/
‚îÇ   ‚îî‚îÄ‚îÄ webhook/route.ts   # POST - Webhooks Stripe
‚îî‚îÄ‚îÄ wallet/
    ‚îî‚îÄ‚îÄ withdraw/route.ts  # POST - Retrait portefeuille
```

#### 7. Documents
```
/api/documents/
‚îî‚îÄ‚îÄ upload/route.ts        # POST - Upload documents
```

#### 8. Factures
```
/api/invoices/
‚îî‚îÄ‚îÄ generate/route.ts      # POST - G√©n√©ration PDF factures
```

#### 9. Notifications
```
/api/notifications/
‚îî‚îÄ‚îÄ push/route.ts          # POST - Notifications push OneSignal
```

#### 10. Contrats
```
/api/contracts/
‚îî‚îÄ‚îÄ [id]/route.ts          # GET/PUT - Contrats commer√ßants
```

#### 11. Entrep√¥ts et Stockage
```
/api/storage-boxes/
‚îî‚îÄ‚îÄ [id]/route.ts          # GET/PUT - Box de stockage
```

#### 12. Localisations
```
/api/locations/
‚îî‚îÄ‚îÄ [id]/route.ts          # GET/PUT - Gestion entrep√¥ts
```

### Middleware d'Authentification

#### Fichier : `src/middleware.ts`
```typescript
import { NextRequest, NextResponse } from 'next/server'
import { auth } from '@/lib/auth'

export async function middleware(request: NextRequest) {
  // V√©rification des routes prot√©g√©es
  if (request.nextUrl.pathname.startsWith('/api/')) {
    const session = await auth()
    
    if (!session && isProtectedRoute(request.nextUrl.pathname)) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    // V√©rification des permissions par r√¥le
    if (session && !hasRequiredRole(session.user.role, request.nextUrl.pathname)) {
      return NextResponse.json({ error: 'Forbidden' }, { status: 403 })
    }
  }
  
  return NextResponse.next()
}
```

### Structure Type d'une API Route

#### Exemple : `/api/announcements/route.ts`
```typescript
import { NextRequest, NextResponse } from 'next/server'
import { z } from 'zod'
import { auth } from '@/lib/auth'
import { prisma } from '@/lib/db'
import { announcementSchema } from '@/features/announcements/schemas'

// GET - Liste des annonces
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const page = parseInt(searchParams.get('page') || '1')
    const limit = parseInt(searchParams.get('limit') || '10')
    const type = searchParams.get('type')
    
    const announcements = await prisma.announcement.findMany({
      where: type ? { type } : {},
      skip: (page - 1) * limit,
      take: limit,
      include: {
        author: {
          select: { id: true, profile: true }
        }
      },
      orderBy: { createdAt: 'desc' }
    })
    
    return NextResponse.json(announcements)
  } catch (error) {
    console.error('Error fetching announcements:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

// POST - Cr√©er une annonce
export async function POST(request: NextRequest) {
  try {
    const session = await auth()
    if (!session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    
    const body = await request.json()
    const validatedData = announcementSchema.parse(body)
    
    const announcement = await prisma.announcement.create({
      data: {
        ...validatedData,
        authorId: session.user.id
      },
      include: {
        author: {
          select: { id: true, profile: true }
        }
      }
    })
    
    return NextResponse.json(announcement, { status: 201 })
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Validation error', details: error.errors },
        { status: 400 }
      )
    }
    
    console.error('Error creating announcement:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}
```

### Permissions par R√¥le

#### Matrice d'Autorisation
```typescript
const rolePermissions = {
  CLIENT: [
    'announcements:read',
    'announcements:create',
    'bookings:read',
    'bookings:create',
    'payments:read'
  ],
  DELIVERER: [
    'announcements:read',
    'deliveries:read',
    'deliveries:create',
    'deliveries:update',
    'payments:read'
  ],
  MERCHANT: [
    'announcements:read',
    'announcements:create',
    'contracts:read',
    'contracts:update'
  ],
  PROVIDER: [
    'services:read',
    'services:create',
    'bookings:read',
    'invoices:read'
  ],
  ADMIN: ['*'] // Tous les droits
}
```

---

## üóÑÔ∏è Mod√®les de Donn√©es Prisma

### 1. Utilisateurs et Authentification
```prisma
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  CLIENT
  DELIVERER
  MERCHANT
  PROVIDER
  ADMIN
}

model Profile {
  id          String  @id @default(cuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id])
  firstName   String?
  lastName    String?
  phone       String?
  address     String?
  city        String?
  postalCode  String?
  country     String?
  avatar      String?
  verified    Boolean @default(false)
  documents   Document[]
}
```

### 2. Annonces et Services
```prisma
model Announcement {
  id            String           @id @default(cuid())
  title         String
  description   String
  type          AnnouncementType
  status        AnnouncementStatus @default(ACTIVE)
  price         Decimal
  authorId      String
  author        User             @relation(fields: [authorId], references: [id])
  deliveries    Delivery[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

enum AnnouncementType {
  PACKAGE_DELIVERY
  PERSON_TRANSPORT
  AIRPORT_TRANSFER
  SHOPPING
  INTERNATIONAL_PURCHASE
  PET_SITTING
  HOME_SERVICE
  CART_DROP
}

enum AnnouncementStatus {
  ACTIVE
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
```

### 3. Livraisons et Validation
```prisma
model Delivery {
  id               String         @id @default(cuid())
  announcementId   String
  announcement     Announcement   @relation(fields: [announcementId], references: [id])
  delivererId      String
  deliverer        User           @relation(fields: [delivererId], references: [id])
  status           DeliveryStatus @default(PENDING)
  validationCode   String?        @unique
  pickupAddress    String
  deliveryAddress  String
  scheduledAt      DateTime
  completedAt      DateTime?
  payment          Payment?
  tracking         TrackingUpdate[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}
```

### 4. Paiements et Abonnements
```prisma
model Payment {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  deliveryId    String?       @unique
  delivery      Delivery?     @relation(fields: [deliveryId], references: [id])
  amount        Decimal
  currency      String        @default("EUR")
  status        PaymentStatus @default(PENDING)
  stripePaymentId String?
  type          PaymentType
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Subscription {
  id        String           @id @default(cuid())
  userId    String           @unique
  user      User             @relation(fields: [userId], references: [id])
  plan      SubscriptionPlan
  status    String           @default("active")
  startDate DateTime         @default(now())
  endDate   DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum SubscriptionPlan {
  FREE
  STARTER
  PREMIUM
}
```

### 5. Documents et Validation
```prisma
model Document {
  id         String         @id @default(cuid())
  profileId  String
  profile    Profile        @relation(fields: [profileId], references: [id])
  type       DocumentType
  filename   String
  url        String
  status     DocumentStatus @default(PENDING)
  validatedBy String?
  validatedAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

enum DocumentType {
  IDENTITY
  DRIVING_LICENSE
  INSURANCE
  CERTIFICATION
  CONTRACT
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}
```

### 6. Prestataires et Services
```prisma
model Service {
  id          String        @id @default(cuid())
  providerId  String
  provider    User          @relation(fields: [providerId], references: [id])
  name        String
  description String
  category    ServiceCategory
  price       Decimal
  duration    Int           // en minutes
  isActive    Boolean       @default(true)
  bookings    Booking[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Booking {
  id          String        @id @default(cuid())
  serviceId   String
  service     Service       @relation(fields: [serviceId], references: [id])
  clientId    String
  client      User          @relation(fields: [clientId], references: [id])
  scheduledAt DateTime
  status      BookingStatus @default(PENDING)
  notes       String?
  rating      Int?          // 1-5
  review      String?
  payment     Payment?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}
```

### 7. Entrep√¥ts et Box de Stockage
```prisma
model Warehouse {
  id       String @id @default(cuid())
  name     String
  address  String
  city     String
  capacity Int
  storageBoxes StorageBox[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StorageBox {
  id          String     @id @default(cuid())
  warehouseId String
  warehouse   Warehouse  @relation(fields: [warehouseId], references: [id])
  number      String
  size        BoxSize
  status      BoxStatus  @default(AVAILABLE)
  clientId    String?
  client      User?      @relation(fields: [clientId], references: [id])
  rentStartDate DateTime?
  rentEndDate   DateTime?
  monthlyPrice  Decimal
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum BoxSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum BoxStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}
```

---

## ‚ö° Fonctionnalit√©s Critiques

### Fonctionnalit√©s OBLIGATOIRES √† Impl√©menter

#### 1. Tutoriel Client Premi√®re Connexion
**CRITIQUE** : Overlay obligatoire bloquant √† la premi√®re connexion

```typescript
// src/features/tutorials/components/TutorialOverlay.tsx
// Utiliser un √©tat global pour tracking
// Bloquer toute interaction jusqu'√† completion
// √âtapes : D√©p√¥t annonce ‚Üí R√©servation ‚Üí Paiement ‚Üí Suivi
```

#### 2. Validation Documents Livreur
**FLOW COMPLET** :
1. Upload documents (identit√©, permis, assurance)
2. Statut PENDING ‚Üí admin validation
3. G√©n√©ration carte NFC automatique
4. Activation compte + notifications

#### 3. Code Validation Livraison (6 chiffres)
**S√âCURIT√â CRITIQUE** :
- Code unique g√©n√©r√© √† la cr√©ation livraison
- Client donne code au livreur
- Livreur saisit code pour validation
- D√©blocage paiement automatique

```typescript
// src/features/deliveries/services/validation.service.ts
generateValidationCode(): string // 6 chiffres
validateDelivery(code: string, deliveryId: string): Promise<boolean>
```

#### 4. Matching Trajets/Annonces
**ALGORITHME OBLIGATOIRE** :
- Livreur d√©clare trajets √† l'avance
- Syst√®me match avec annonces compatibles
- Notification push automatique
- Distance, horaires, capacit√©

#### 5. Notifications Push OneSignal
**√âV√âNEMENTS OBLIGATOIRES** :
- Nouvelle annonce match√©e
- Livraison accept√©e/refus√©e
- Code validation re√ßu
- Paiement effectu√©
- Document valid√©/rejet√©

#### 6. Paiements Stripe Int√©gr√©s
**S√âCURIT√â MAXIMALE** :
- Webhooks obligatoires
- Gestion des √©checs
- Remboursements
- Abonnements r√©currents

---

## üìã Bonnes Pratiques de D√©veloppement

### M√©thodologie Obligatoire

#### 0. Instance Unique et MCP
**AVANT TOUT** : V√©rifier l'instance unique et utiliser les MCP appropri√©s
- **Instance** : Une seule instance EcoDeli active (port 3000)
- **MCP** : Utiliser les MCP disponibles selon les besoins
- **Desktop Commander** : Pour toutes les op√©rations de fichiers locaux
- **GitHub MCP** : Pour rechercher des exemples et g√©rer le repository

#### 1. Backend First
**TOUJOURS** d√©velopper dans cet ordre :
1. Cr√©er/mettre √† jour le mod√®le Prisma
2. Cr√©er le service avec la logique m√©tier
3. Cr√©er l'API Route
4. Tester avec cURL

#### 2. Validation Continue
Pour **CHAQUE** fonctionnalit√© d√©velopp√©e :

```bash
# Exemple : Test cr√©ation utilisateur
curl -X POST http://localhost:3000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{"email":"test@test.com","password":"password123","role":"CLIENT"}'

# Test route prot√©g√©e
curl -X GET http://localhost:3000/api/users/profile \
  -H "Cookie: [cookie-re√ßu]"
```

#### 3. Structure Modulaire
- **Features** : Chaque fonctionnalit√© dans [src/features/](mdc:src/features)
- **Services** : Logique m√©tier dans `*/services/`
- **Schemas** : Validation Zod dans `*/schemas/`
- **Types** : Types TypeScript dans `*/types/`
- **Hooks** : Hooks React dans `*/hooks/`
- **Components** : Composants dans `*/components/`

### Comptes de Test Obligatoires

```typescript
// √Ä cr√©er au d√©but du d√©veloppement
const testAccounts = [
  { email: 'client@test.com', password: 'Test123!', role: 'CLIENT' },
  { email: 'livreur@test.com', password: 'Test123!', role: 'DELIVERER' },
  { email: 'commercant@test.com', password: 'Test123!', role: 'MERCHANT' },
  { email: 'prestataire@test.com', password: 'Test123!', role: 'PROVIDER' },
  { email: 'admin@test.com', password: 'Test123!', role: 'ADMIN' }
]
```

### Standards de Code

#### Coh√©rence Obligatoire
**TOUJOURS** v√©rifier :
- Mod√®le Prisma ‚Üî Schema Zod ‚Üî Types TS
- API Route ‚Üî Service ‚Üî Hook ‚Üî Component

#### Gestion d'Erreurs
- Try/catch partout
- Messages d'erreur clairs et traduits
- Logs appropri√©s avec niveaux

#### Performance
- Pagination des listes
- Optimisation requ√™tes Prisma
- Cache appropri√© avec Next.js

---

## üö´ Restrictions et Interdictions

### Interdictions Absolues de Nommage de Fichiers

**INTERDICTION ABSOLUE** de cr√©er des fichiers avec les suffixes suivants :
- `*-enhanced.*` (ex: `user-enhanced.ts`)
- `*-fix.*` (ex: `auth-fix.js`)
- `*-simple.*` (ex: `payment-simple.tsx`)
- `*-improved.*` (ex: `delivery-improved.service.ts`)
- `*-updated.*` (ex: `schema-updated.prisma`)
- `*-new.*` (ex: `component-new.tsx`)
- `*-refactored.*` (ex: `api-refactored.ts`)
- `*-optimized.*` (ex: `query-optimized.sql`)

### Interdiction Stricte des Donn√©es Mock

#### üö´ INTERDICTIONS ABSOLUES
- **AUCUNE** donn√©e hardcod√©e dans le code
- **AUCUNE** simulation de donn√©es
- **AUCUN** mock de services
- **AUCUNE** r√©ponse statique
- **AUCUN** placeholder de donn√©es

#### Examples d'Interdictions
```typescript
// ‚ùå INTERDIT - Donn√©es hardcod√©es
const users = [
  { id: 1, name: "John Doe", email: "john@example.com" },
  { id: 2, name: "Jane Smith", email: "jane@example.com" }
]

// ‚ùå INTERDIT - Mock de service
const mockStripePayment = () => ({ success: true, transactionId: "fake_123" })

// ‚ùå INTERDIT - Donn√©es simul√©es
const generateFakeDeliveries = () => Array.from({length: 10}, () => ({...}))

// ‚ùå INTERDIT - R√©ponses statiques
return NextResponse.json({ message: "Simulated success" })
```

### R√®gles de Nommage Obligatoires

#### Fichiers de Services
- Format : `[feature].service.ts`
- Exemple : `delivery-validation.service.ts`, `invoice-generator.service.ts`

#### Fichiers de Sch√©mas
- Format : `[feature].schema.ts`
- Exemple : `announcement.schema.ts`, `payment.schema.ts`

#### Composants React
- Format : `[ComponentName].tsx` (PascalCase)
- Exemple : `delivery-form.tsx`, `user-profile.tsx`

#### API Routes
- Format : `route.ts` dans le dossier appropri√©
- Structure : `src/app/api/[feature]/route.ts`

---

## üìä Rapport de Fonctionnalit√©s

### üéØ Mission 1 : Gestion de la Soci√©t√©

#### 1.1 Espaces Utilisateur Obligatoires

##### ‚úÖ Espace Livreurs
- [ ] **Inscription et validation** avec pi√®ces justificatives
- [ ] **Gestion des annonces** de livraison
- [ ] **Gestion des trajets** d√©clar√©s √† l'avance
- [ ] **Matching automatique** avec notifications
- [ ] **Gestion des livraisons** (toutes formes)
- [ ] **Syst√®me de paiement** avec portefeuille
- [ ] **Planning et d√©placements**
- [ ] **Code de validation** √† 6 chiffres pour livraisons
- [ ] **Carte NFC** apr√®s validation

##### ‚úÖ Espace Clients
- [ ] **Tutoriel obligatoire** premi√®re connexion (overlay bloquant)
- [ ] **D√©p√¥t d'annonces** avec d√©tails
- [ ] **R√©servation de services** √† la personne
- [ ] **Gestion des paiements** et abonnements
- [ ] **Suivi des livraisons** en temps r√©el
- [ ] **Acc√®s aux box de stockage** temporaire
- [ ] **Abonnements** : Free (‚Ç¨0), Starter (‚Ç¨9.90), Premium (‚Ç¨19.99)

##### ‚úÖ Espace Commer√ßants
- [ ] **Gestion des contrats** avec EcoDeli
- [ ] **Cr√©ation d'annonces** produits
- [ ] **Configuration l√¢cher de chariot**
- [ ] **Facturation** des services
- [ ] **Gestion des paiements**
- [ ] **Import bulk** d'annonces

##### ‚úÖ Espace Prestataires
- [ ] **Validation avec certifications**
- [ ] **Calendrier de disponibilit√©s**
- [ ] **Gestion des interventions**
- [ ] **√âvaluations clients**
- [ ] **Facturation mensuelle automatique** (30 de chaque mois)
- [ ] **Tarifs n√©goci√©s** avec EcoDeli

##### ‚úÖ Back Office Admin
- [ ] **Validation documents** livreurs/prestataires
- [ ] **Gestion compl√®te utilisateurs**
- [ ] **Monitoring livraisons** et litiges
- [ ] **Gestion financi√®re** globale
- [ ] **Configuration des 6 entrep√¥ts**
- [ ] **Param√®tres services cloud**

#### 1.2 Int√©grations Techniques Obligatoires

##### Paiements
- [ ] **Stripe** pour tous les paiements
- [ ] **Webhooks s√©curis√©s** pour √©v√©nements
- [ ] **Gestion des abonnements** r√©currents
- [ ] **Portefeuille livreur** avec retraits

##### Notifications
- [ ] **OneSignal** pour notifications push
- [ ] **Notifications automatiques** :
  - Nouvelle annonce match√©e
  - Livraison accept√©e/refus√©e
  - Code validation re√ßu
  - Paiement effectu√©
  - Document valid√©/rejet√©

##### Documents
- [ ] **G√©n√©ration PDF automatique** des factures
- [ ] **Archive accessible** des documents
- [ ] **Virement bancaire simul√©** pour prestataires

##### Multilingue
- [ ] **Support FR/EN obligatoire**
- [ ] **Ajout de langues** sans modification code
- [ ] **Interface compl√®te traduite**

### üõ†Ô∏è Mission 2 : Services Suppl√©mentaires

#### 2.1 Application Java Autonome
- [ ] **Rapport graphique** de l'activit√©
- [ ] **R√©cup√©ration donn√©es** :
  - Comptes commer√ßants avec factures
  - Livraisons d√©taill√©es (type, contenu, modalit√©s)
  - Prestations d√©taill√©es
- [ ] **30 enregistrements minimum** par type
- [ ] **G√©n√©ration PDF** avec diagrammes
- [ ] **Bonus** : Application Data Mining

#### 2.2 Application Android
- [ ] **Acc√®s aux livraisons** et prestations
- [ ] **Validation de livraison**
- [ ] **Gestion des comptes** clients
- [ ] **Interface mobile** optimis√©e

#### 2.3 Carte NFC Livreurs
- [ ] **Reconnaissance** par les clients
- [ ] **Validation** des livraisons
- [ ] **S√©curisation** des √©changes

### üèóÔ∏è Mission 3 : Infrastructure Syst√®me, R√©seau et S√©curit√©

#### 3.1 Architecture R√©seau EDN (EcoDeli Network)

##### Site Principal Paris
- [ ] **Active Directory** Windows Server 2019/2022/2025
- [ ] **Baie de stockage** (missions 1 et 2 incluses)
- [ ] **DMZ** avec serveur mails Linux (Postfix)
- [ ] **5 VLAN** : Direction, Marketing, Commercial, RH, Informatique
- [ ] **2 Firewalls OPNSense**
- [ ] **Outils de supervision** : GLPI, Zabbix/Nagios

##### Sites Provinciaux
- [ ] **Site Marseille** : Serveur Mail backup, VPN
- [ ] **Site Lyon** : Serveur DHCP/DNS, Backup infrastructure
- [ ] **Site Lille** : RODC, Stockage partag√© chiffr√©

#### 3.2 Configuration R√©seau EDN
- [ ] **Protocole RIP v2** entre routeurs
- [ ] **VPN IPSec over GRE** inter-sites
- [ ] **ACL** pour gestion flux
- [ ] **Redondance HSRP/VRRP**

### ‚ö†Ô∏è Points Critiques de Validation

#### Fonctionnalit√©s Bloquantes
- [ ] **Tutoriel client** overlay premi√®re connexion
- [ ] **Code validation** 6 chiffres livraisons
- [ ] **Facturation automatique** prestataires (30/mois)
- [ ] **Matching trajets/annonces** automatique
- [ ] **Notifications push** OneSignal
- [ ] **Abonnements** 3 niveaux fonctionnels
- [ ] **Multilingue** FR/EN complet

#### Int√©grations Critiques
- [ ] **Stripe** paiements + webhooks
- [ ] **jsPDF** g√©n√©ration factures
- [ ] **Upload documents** s√©curis√©
- [ ] **Validation admin** documents
- [ ] **6 entrep√¥ts** configur√©s

#### Tests End-to-End Obligatoires
- [ ] Inscription ‚Üí validation ‚Üí activation livreur
- [ ] Cr√©ation annonce ‚Üí matching ‚Üí livraison ‚Üí paiement
- [ ] R√©servation service ‚Üí intervention ‚Üí √©valuation
- [ ] Upload document ‚Üí validation admin ‚Üí notification

---

## üéØ Priorit√©s de D√©veloppement

### Phase 1 : Fondations (Semaines 1-2)
1. ‚úÖ Setup Next.js 15 + Prisma + PostgreSQL
2. ‚úÖ Mod√®les de donn√©es complets
3. ‚úÖ Authentification Better-Auth
4. [ ] Configuration environnements

### Phase 2 : Mission 1 Core (Semaines 3-6)
1. [ ] API Routes compl√®tes
2. [ ] 5 espaces utilisateur
3. [ ] Int√©grations Stripe + OneSignal
4. [ ] Tutoriel client overlay
5. [ ] Code validation 6 chiffres

### Phase 3 : Mission 2 (Semaines 7-8)
1. [ ] Application Java avec PDF
2. [ ] Application Android
3. [ ] Syst√®me NFC

### Phase 4 : Mission 3 (Semaines 9-12)
1. [ ] Infrastructure r√©seau EDN
2. [ ] Configuration sites
3. [ ] S√©curit√© et monitoring
4. [ ] D√©ploiement production

---

## üìà M√©triques de Succ√®s

### Technique
- [ ] **100% des API routes** fonctionnelles
- [ ] **0 erreur** validation Prisma
- [ ] **Tous les r√¥les** authentifi√©s
- [ ] **Toutes les int√©grations** test√©es

### Fonctionnel
- [ ] **5 espaces utilisateur** op√©rationnels
- [ ] **Tous les services** EcoDeli impl√©ment√©s
- [ ] **Infrastructure r√©seau** compl√®te
- [ ] **Documentation** exhaustive

### Qualit√©
- [ ] **Code review** syst√©matique
- [ ] **Tests unitaires** critiques
- [ ] **Performance** optimis√©e
- [ ] **S√©curit√©** valid√©e

---

## üö® Documentation Obligatoire

Maintenir [DEVELOPMENT_REPORT.md](mdc:DEVELOPMENT_REPORT.md) avec :
- √âtat d'avancement par feature
- Tests API document√©s
- Comptes de test avec tokens
- Probl√®mes rencontr√©s
- TODO prioritaire

---

## üîß Tests cURL Obligatoires

### Authentification
```bash
# Inscription
curl -X POST http://localhost:3000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"Test123!","role":"CLIENT"}'

# Connexion
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"test@example.com","password":"Test123!"}'
```

### Annonces
```bash
# Cr√©er annonce
curl -X POST http://localhost:3000/api/announcements \
  -H "Content-Type: application/json" \
  -H "Cookie: [session-cookie]" \
  -d '{"title":"Livraison Paris-Lyon","description":"Besoin de livrer un colis","type":"PACKAGE_DELIVERY","price":25.50}'

# Lister annonces
curl -X GET "http://localhost:3000/api/announcements?page=1&limit=10" \
  -H "Cookie: [session-cookie]"
```

---

Ce document constitue la **r√©f√©rence officielle compl√®te** pour le d√©veloppement du projet annuel EcoDeli 2024-2025 ESGI.

**TOUTES** les r√®gles de ce fichier sont **NON-N√âGOCIABLES** et doivent √™tre respect√©es scrupuleusement.

