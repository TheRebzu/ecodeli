#!/usr/bin/env node

/**
 * Test des workflows m√©tier EcoDeli selon le cahier des charges
 * Simulation de sc√©narios utilisateur complets
 */

const BASE_URL = 'http://localhost:3000';

class BusinessWorkflowTester {
  constructor() {
    this.sessions = {};
    this.testData = {};
  }

  async makeAuthenticatedRequest(endpoint, role, options = {}) {
    const session = this.sessions[role];
    if (!session) {
      throw new Error(`Pas de session pour le r√¥le ${role}`);
    }

    const response = await fetch(`${BASE_URL}${endpoint}`, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...session.headers,
        ...options.headers
      }
    });

    return response;
  }

  async authenticateUser(email, password, role) {
    console.log(`üîê Authentification ${role}...`);
    
    try {
      // Tentative d'inscription
      await fetch(`${BASE_URL}/api/auth/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email,
          password,
          role,
          firstName: 'Test',
          lastName: role,
          acceptTerms: true
        })
      });

      // Connexion
      const response = await fetch(`${BASE_URL}/api/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password })
      });

      if (response.ok) {
        const cookies = response.headers.get('set-cookie');
        if (cookies) {
          this.sessions[role] = {
            cookies,
            headers: { 'Cookie': cookies }
          };
          console.log(`‚úÖ ${role} authentifi√©`);
          return true;
        }
      }
      
      console.log(`‚ùå √âchec authentification ${role}`);
      return false;
    } catch (error) {
      console.log(`‚ùå Erreur authentification ${role}:`, error.message);
      return false;
    }
  }

  async testClientWorkflow() {
    console.log('\nüë§ === WORKFLOW CLIENT (selon cahier des charges) ===');
    
    // 1. Tutoriel obligatoire premi√®re connexion
    console.log('\nüéì Test: Tutoriel obligatoire premi√®re connexion');
    try {
      const tutorialResponse = await this.makeAuthenticatedRequest('/api/client/tutorial', 'CLIENT');
      const tutorialData = await tutorialResponse.json();
      
      if (tutorialResponse.ok) {
        console.log('‚úÖ Tutoriel accessible');
        console.log('   üìã √âtapes du tutoriel:', tutorialData.steps?.length || 'N/A');
      } else {
        console.log('‚ùå Tutoriel non accessible');
      }
    } catch (error) {
      console.log('‚ùå Erreur tutoriel:', error.message);
    }

    // 2. Cr√©ation d'une annonce
    console.log('\nüìù Test: Cr√©ation d\'une annonce de livraison');
    try {
      const announcementData = {
        title: 'Livraison de colis urgent',
        description: 'Livraison d\'un colis fragile √† effectuer rapidement',
        type: 'PACKAGE_DELIVERY',
        pickupAddress: '123 Rue de la Paix, 75001 Paris',
        deliveryAddress: '456 Avenue de la Libert√©, 69001 Lyon',
        price: 25.50,
        weight: 2.5,
        urgent: true,
        fragile: true
      };

      const createResponse = await this.makeAuthenticatedRequest('/api/client/announcements', 'CLIENT', {
        method: 'POST',
        body: JSON.stringify(announcementData)
      });

      if (createResponse.ok) {
        const announcement = await createResponse.json();
        this.testData.clientAnnouncement = announcement;
        console.log('‚úÖ Annonce cr√©√©e avec succ√®s');
        console.log(`   üÜî ID: ${announcement.id}`);
      } else {
        console.log('‚ùå √âchec cr√©ation annonce');
      }
    } catch (error) {
      console.log('‚ùå Erreur cr√©ation annonce:', error.message);
    }

    // 3. R√©servation d'un service
    console.log('\nüìÖ Test: R√©servation d\'un service prestataire');
    try {
      const bookingData = {
        serviceType: 'CLEANING',
        scheduledDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        duration: 120,
        address: '789 Rue du Commerce, 75015 Paris',
        notes: 'Nettoyage de bureau, 2 pi√®ces'
      };

      const bookingResponse = await this.makeAuthenticatedRequest('/api/client/bookings', 'CLIENT', {
        method: 'POST',
        body: JSON.stringify(bookingData)
      });

      if (bookingResponse.ok) {
        const booking = await bookingResponse.json();
        this.testData.clientBooking = booking;
        console.log('‚úÖ Service r√©serv√© avec succ√®s');
      } else {
        console.log('‚ùå √âchec r√©servation service');
      }
    } catch (error) {
      console.log('‚ùå Erreur r√©servation service:', error.message);
    }

    // 4. Gestion des paiements
    console.log('\nüí≥ Test: Gestion des paiements');
    try {
      const paymentsResponse = await this.makeAuthenticatedRequest('/api/client/payments', 'CLIENT');
      
      if (paymentsResponse.ok) {
        const payments = await paymentsResponse.json();
        console.log('‚úÖ Acc√®s aux paiements disponible');
        console.log(`   üí∞ Paiements: ${payments.payments?.length || 0}`);
      } else {
        console.log('‚ùå Acc√®s aux paiements indisponible');
      }
    } catch (error) {
      console.log('‚ùå Erreur acc√®s paiements:', error.message);
    }

    // 5. Acc√®s aux box de stockage
    console.log('\nüì¶ Test: Acc√®s aux box de stockage');
    try {
      const storageResponse = await this.makeAuthenticatedRequest('/api/client/storage-boxes', 'CLIENT');
      
      if (storageResponse.ok) {
        const storage = await storageResponse.json();
        console.log('‚úÖ Acc√®s aux box de stockage disponible');
        console.log(`   üì¶ Box disponibles: ${storage.boxes?.length || 0}`);
      } else {
        console.log('‚ùå Acc√®s aux box indisponible');
      }
    } catch (error) {
      console.log('‚ùå Erreur acc√®s box:', error.message);
    }
  }

  async testDelivererWorkflow() {
    console.log('\nüöö === WORKFLOW LIVREUR (selon cahier des charges) ===');

    // 1. V√©rification du statut de validation
    console.log('\nüìã Test: Validation par pi√®ces justificatives');
    try {
      const dashboardResponse = await this.makeAuthenticatedRequest('/api/deliverer/dashboard', 'DELIVERER');
      
      if (dashboardResponse.ok) {
        const dashboard = await dashboardResponse.json();
        console.log('‚úÖ Dashboard livreur accessible');
        console.log(`   üìÑ Statut validation: ${dashboard.validationStatus || 'N/A'}`);
        console.log(`   üÜî Documents requis: ${dashboard.documents ? 'Oui' : 'Non'}`);
      } else {
        console.log('‚ùå Dashboard livreur inaccessible');
      }
    } catch (error) {
      console.log('‚ùå Erreur dashboard livreur:', error.message);
    }

    // 2. Gestion des opportunit√©s de livraison
    console.log('\nüéØ Test: Opportunit√©s de livraison');
    try {
      const opportunitiesResponse = await this.makeAuthenticatedRequest('/api/deliverer/opportunities', 'DELIVERER');
      
      if (opportunitiesResponse.ok) {
        const opportunities = await opportunitiesResponse.json();
        console.log('‚úÖ Opportunit√©s de livraison accessibles');
        console.log(`   üì¶ Opportunit√©s: ${opportunities.opportunities?.length || 0}`);
      } else {
        console.log('‚ùå Opportunit√©s non accessibles');
      }
    } catch (error) {
      console.log('‚ùå Erreur opportunit√©s:', error.message);
    }

    // 3. Gestion du portefeuille et paiements
    console.log('\nüí∞ Test: Gestion des paiements livreur');
    try {
      const walletResponse = await this.makeAuthenticatedRequest('/api/deliverer/wallet', 'DELIVERER');
      
      if (walletResponse.ok) {
        const wallet = await walletResponse.json();
        console.log('‚úÖ Portefeuille livreur accessible');
        console.log(`   üíµ Solde: ${wallet.balance || 0}‚Ç¨`);
        console.log(`   üìä Gains: ${wallet.totalEarnings || 0}‚Ç¨`);
      } else {
        console.log('‚ùå Portefeuille non accessible');
      }
    } catch (error) {
      console.log('‚ùå Erreur portefeuille:', error.message);
    }

    // 4. Optimisation des trajets
    console.log('\nüó∫Ô∏è Test: Planning et optimisation des trajets');
    try {
      const routeResponse = await this.makeAuthenticatedRequest('/api/deliverer/route-optimization', 'DELIVERER');
      
      if (routeResponse.ok) {
        const routes = await routeResponse.json();
        console.log('‚úÖ Optimisation des trajets disponible');
        console.log(`   üõ£Ô∏è Routes optimis√©es: ${routes.routes?.length || 0}`);
      } else {
        console.log('‚ùå Optimisation des trajets indisponible');
      }
    } catch (error) {
      console.log('‚ùå Erreur optimisation trajets:', error.message);
    }
  }

  async testProviderWorkflow() {
    console.log('\nüë®‚Äçüîß === WORKFLOW PRESTATAIRE (selon cahier des charges) ===');

    // 1. Suivi des √©valuations clients
    console.log('\n‚≠ê Test: Suivi des √©valuations des prestations');
    try {
      const reviewsResponse = await this.makeAuthenticatedRequest('/api/provider/reviews', 'PROVIDER');
      
      if (reviewsResponse.ok) {
        const reviews = await reviewsResponse.json();
        console.log('‚úÖ √âvaluations accessibles');
        console.log(`   ‚≠ê Note moyenne: ${reviews.averageRating || 'N/A'}`);
        console.log(`   üìù Nombre d\'√©valuations: ${reviews.totalReviews || 0}`);
      } else {
        console.log('‚ùå √âvaluations non accessibles');
      }
    } catch (error) {
      console.log('‚ùå Erreur √©valuations:', error.message);
    }

    // 2. Calendrier des disponibilit√©s
    console.log('\nüìÖ Test: Calendrier des disponibilit√©s');
    try {
      const availabilityResponse = await this.makeAuthenticatedRequest('/api/provider/availability', 'PROVIDER');
      
      if (availabilityResponse.ok) {
        const availability = await availabilityResponse.json();
        console.log('‚úÖ Calendrier de disponibilit√©s accessible');
        console.log(`   üìÖ Cr√©neaux: ${availability.slots?.length || 0}`);
      } else {
        console.log('‚ùå Calendrier non accessible');
      }
    } catch (error) {
      console.log('‚ùå Erreur calendrier:', error.message);
    }

    // 3. Gestion des interventions
    console.log('\nüîß Test: Gestion des interventions');
    try {
      const interventionsResponse = await this.makeAuthenticatedRequest('/api/provider/interventions?providerId=test', 'PROVIDER');
      
      if (interventionsResponse.ok) {
        const interventions = await interventionsResponse.json();
        console.log('‚úÖ Gestion des interventions disponible');
        console.log(`   üîß Interventions: ${interventions.interventions?.length || 0}`);
      } else {
        console.log('‚ùå Gestion des interventions indisponible');
      }
    } catch (error) {
      console.log('‚ùå Erreur interventions:', error.message);
    }

    // 4. Facturation automatique mensuelle
    console.log('\nüíº Test: Facturation automatique mensuelle');
    try {
      const invoicesResponse = await this.makeAuthenticatedRequest('/api/provider/invoices', 'PROVIDER');
      
      if (invoicesResponse.ok) {
        const invoices = await invoicesResponse.json();
        console.log('‚úÖ Facturation automatique disponible');
        console.log(`   üìÑ Factures: ${invoices.invoices?.length || 0}`);
        console.log(`   üí∞ Gains mensuels: ${invoices.monthlyEarnings || 0}‚Ç¨`);
      } else {
        console.log('‚ùå Facturation automatique indisponible');
      }
    } catch (error) {
      console.log('‚ùå Erreur facturation:', error.message);
    }

    // 5. Validation et habilitations
    console.log('\nüìã Test: Validation et habilitations');
    try {
      const documentsResponse = await this.makeAuthenticatedRequest('/api/provider/documents', 'PROVIDER');
      
      if (documentsResponse.ok) {
        const documents = await documentsResponse.json();
        console.log('‚úÖ Syst√®me de validation accessible');
        console.log(`   üìÑ Documents: ${documents.documents?.length || 0}`);
        console.log(`   ‚úÖ Statut validation: ${documents.validationStatus || 'N/A'}`);
      } else {
        console.log('‚ùå Syst√®me de validation indisponible');
      }
    } catch (error) {
      console.log('‚ùå Erreur validation:', error.message);
    }
  }

  async testMerchantWorkflow() {
    console.log('\nüè™ === WORKFLOW COMMER√áANT (selon cahier des charges) ===');

    // 1. Gestion des annonces avec import en masse
    console.log('\nüì¶ Test: Gestion des annonces (import en masse)');
    try {
      const announcementsResponse = await this.makeAuthenticatedRequest('/api/merchant/announcements/bulk', 'MERCHANT');
      
      if (announcementsResponse.ok) {
        console.log('‚úÖ Import en masse d\'annonces disponible');
      } else {
        console.log('‚ùå Import en masse indisponible');
      }
    } catch (error) {
      console.log('‚ùå Erreur import en masse:', error.message);
    }

    // 2. Gestion des commandes et facturation
    console.log('\nüí∞ Test: Gestion de la facturation');
    try {
      const ordersResponse = await this.makeAuthenticatedRequest('/api/merchant/orders', 'MERCHANT');
      
      if (ordersResponse.ok) {
        const orders = await ordersResponse.json();
        console.log('‚úÖ Gestion de la facturation accessible');
        console.log(`   üìÑ Commandes: ${orders.orders?.length || 0}`);
      } else {
        console.log('‚ùå Gestion de la facturation indisponible');
      }
    } catch (error) {
      console.log('‚ùå Erreur facturation commer√ßant:', error.message);
    }
  }

  async testAdminWorkflow() {
    console.log('\nüëë === WORKFLOW ADMINISTRATION (selon cahier des charges) ===');

    // 1. Gestion centralis√©e des utilisateurs
    console.log('\nüë• Test: Gestion des utilisateurs');
    try {
      const usersResponse = await this.makeAuthenticatedRequest('/api/admin/users', 'ADMIN');
      
      if (usersResponse.ok) {
        const users = await usersResponse.json();
        console.log('‚úÖ Gestion centralis√©e des utilisateurs');
        console.log(`   üë• Utilisateurs: ${users.users?.length || 0}`);
      } else {
        console.log('‚ùå Gestion des utilisateurs indisponible');
      }
    } catch (error) {
      console.log('‚ùå Erreur gestion utilisateurs:', error.message);
    }

    // 2. Gestion financi√®re
    console.log('\nüí∞ Test: Gestion financi√®re de l\'entreprise');
    try {
      const financeResponse = await this.makeAuthenticatedRequest('/api/admin/finance', 'ADMIN');
      
      if (financeResponse.ok) {
        const finance = await financeResponse.json();
        console.log('‚úÖ Gestion financi√®re accessible');
        console.log(`   üíµ Revenus: ${finance.totalRevenue || 0}‚Ç¨`);
        console.log(`   üìä Charges: ${finance.totalExpenses || 0}‚Ç¨`);
      } else {
        console.log('‚ùå Gestion financi√®re indisponible');
      }
    } catch (error) {
      console.log('‚ùå Erreur gestion financi√®re:', error.message);
    }

    // 3. Monitoring syst√®me
    console.log('\nüìä Test: Monitoring et m√©triques syst√®me');
    try {
      const monitoringResponse = await this.makeAuthenticatedRequest('/api/admin/monitoring/metrics', 'ADMIN');
      
      if (monitoringResponse.ok) {
        const metrics = await monitoringResponse.json();
        console.log('‚úÖ Monitoring syst√®me accessible');
        console.log(`   üìà M√©triques: ${Object.keys(metrics).length || 0}`);
      } else {
        console.log('‚ùå Monitoring syst√®me indisponible');
      }
    } catch (error) {
      console.log('‚ùå Erreur monitoring:', error.message);
    }

    // 4. Tests syst√®me (email et notifications)
    console.log('\nüìß Test: Tests syst√®me');
    try {
      const emailTestResponse = await this.makeAuthenticatedRequest('/api/admin/tests/email', 'ADMIN');
      const notifTestResponse = await this.makeAuthenticatedRequest('/api/admin/tests/notification', 'ADMIN');
      
      const emailOk = emailTestResponse.ok;
      const notifOk = notifTestResponse.ok;
      
      console.log(`   üìß Test email: ${emailOk ? '‚úÖ' : '‚ùå'}`);
      console.log(`   üîî Test notifications: ${notifOk ? '‚úÖ' : '‚ùå'}`);
    } catch (error) {
      console.log('‚ùå Erreur tests syst√®me:', error.message);
    }
  }

  async testTechnicalRequirements() {
    console.log('\nüõ†Ô∏è === EXIGENCES TECHNIQUES (selon cahier des charges) ===');

    // 1. Test Stripe (paiements)
    console.log('\nüí≥ Test: Int√©gration Stripe');
    try {
      const stripeResponse = await this.makeAuthenticatedRequest('/api/webhooks/stripe', 'ADMIN');
      console.log(`   üí≥ Webhooks Stripe: ${stripeResponse.ok ? '‚úÖ' : '‚ùå'}`);
    } catch (error) {
      console.log('   üí≥ Webhooks Stripe: ‚ùå');
    }

    // 2. Test OneSignal (notifications push)
    console.log('\nüîî Test: Notifications push OneSignal');
    try {
      const onesignalResponse = await this.makeAuthenticatedRequest('/api/webhooks/onesignal', 'ADMIN');
      console.log(`   üîî OneSignal: ${onesignalResponse.ok ? '‚úÖ' : '‚ùå'}`);
    } catch (error) {
      console.log('   üîî OneSignal: ‚ùå');
    }

    // 3. Test g√©n√©ration PDF
    console.log('\nüìÑ Test: G√©n√©ration automatique de documents PDF');
    try {
      const pdfResponse = await this.makeAuthenticatedRequest('/api/documents/generate', 'ADMIN');
      console.log(`   üìÑ G√©n√©ration PDF: ${pdfResponse.ok ? '‚úÖ' : '‚ùå'}`);
    } catch (error) {
      console.log('   üìÑ G√©n√©ration PDF: ‚ùå');
    }

    // 4. Test multilingue
    console.log('\nüåç Test: Support multilingue');
    const languages = ['fr', 'en', 'es'];
    for (const lang of languages) {
      try {
        const response = await fetch(`${BASE_URL}/${lang}/login`);
        console.log(`   üåç ${lang.toUpperCase()}: ${response.ok ? '‚úÖ' : '‚ùå'}`);
      } catch (error) {
        console.log(`   üåç ${lang.toUpperCase()}: ‚ùå`);
      }
    }
  }

  async run() {
    console.log('üîç === TEST WORKFLOWS M√âTIER ECODELI ===\n');
    console.log(`Base URL: ${BASE_URL}\n`);

    // Authentification des utilisateurs de test
    const users = [
      { email: 'client@ecodeli.test', password: 'TestClient123!', role: 'CLIENT' },
      { email: 'livreur@ecodeli.test', password: 'TestLivreur123!', role: 'DELIVERER' },
      { email: 'commercant@ecodeli.test', password: 'TestCommercant123!', role: 'MERCHANT' },
      { email: 'prestataire@ecodeli.test', password: 'TestPrestataire123!', role: 'PROVIDER' },
      { email: 'admin@ecodeli.test', password: 'TestAdmin123!', role: 'ADMIN' }
    ];

    console.log('üîê === AUTHENTIFICATION ===');
    for (const user of users) {
      await this.authenticateUser(user.email, user.password, user.role);
    }

    // Tests des workflows m√©tier
    await this.testClientWorkflow();
    await this.testDelivererWorkflow();
    await this.testProviderWorkflow();
    await this.testMerchantWorkflow();
    await this.testAdminWorkflow();
    await this.testTechnicalRequirements();

    console.log('\n' + '='.repeat(80));
    console.log('üéØ WORKFLOWS M√âTIER TEST√âS SELON LE CAHIER DES CHARGES');
    console.log('='.repeat(80));
    console.log('\n‚úÖ Tests termin√©s - V√©rifiez les r√©sultats ci-dessus');
    console.log('üöÄ Application pr√™te pour validation fonctionnelle');
  }
}

// Lancement du test
const tester = new BusinessWorkflowTester();
tester.run().catch(console.error);