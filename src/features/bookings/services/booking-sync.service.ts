import { prisma } from "@/lib/db";
import { BookingStatus, PaymentStatus } from "@prisma/client";

/**
 * Service centralis√© pour synchroniser les statuts des r√©servations et paiements
 * √âvite les incoh√©rences entre booking.status et payment.status
 */
export class BookingSyncService {
  /**
   * Synchronise le statut d'une r√©servation quand le paiement change
   */
  static async syncBookingOnPaymentChange(
    paymentId: string,
    newPaymentStatus: PaymentStatus,
  ): Promise<void> {
    try {
      const payment = await prisma.payment.findUnique({
        where: { id: paymentId },
        include: {
          booking: {
            include: {
              service: {
                include: {
                  provider: {
                    include: { user: true },
                  },
                },
              },
              client: {
                include: { user: true },
              },
            },
          },
        },
      });

      if (!payment?.booking) {
        console.warn(`Payment ${paymentId} has no associated booking`);
        return;
      }

      const booking = payment.booking;
      let newBookingStatus: BookingStatus | null = null;

      // D√©terminer le nouveau statut de r√©servation bas√© sur le paiement
      switch (newPaymentStatus) {
        case "COMPLETED":
          if (booking.status === "PENDING") {
            newBookingStatus = "CONFIRMED";
          }
          break;

        case "FAILED":
        case "REFUNDED":
          if (["PENDING", "CONFIRMED"].includes(booking.status)) {
            newBookingStatus = "CANCELLED";
          }
          break;

        default:
          // Pas de changement n√©cessaire
          break;
      }

      if (newBookingStatus) {
        await prisma.$transaction(async (tx) => {
          // Mettre √† jour le booking
          await tx.booking.update({
            where: { id: booking.id },
            data: {
              status: newBookingStatus!,
              updatedAt: new Date(),
            },
          });

          // Cr√©er les notifications appropri√©es
          if (newBookingStatus === "CONFIRMED") {
            await this.createConfirmationNotifications(
              tx,
              booking,
              payment.amount,
            );
          } else if (newBookingStatus === "CANCELLED") {
            await this.createCancellationNotifications(tx, booking);
          }
        });

        console.log(
          `‚úÖ Booking ${booking.id} status synced: ${booking.status} ‚Üí ${newBookingStatus}`,
        );
      }
    } catch (error) {
      console.error(`‚ùå Error syncing booking on payment change:`, error);
      throw error;
    }
  }

  /**
   * Synchronise le paiement quand le statut de r√©servation change
   */
  static async syncPaymentOnBookingChange(
    bookingId: string,
    newBookingStatus: BookingStatus,
    metadata?: any,
  ): Promise<void> {
    try {
      const booking = await prisma.booking.findUnique({
        where: { id: bookingId },
        include: {
          payment: true,
          service: {
            include: {
              provider: {
                include: { user: true },
              },
            },
          },
          client: {
            include: { user: true },
          },
        },
      });

      if (!booking) {
        console.warn(`Booking ${bookingId} not found`);
        return;
      }

      // Si pas de paiement existant et booking COMPLETED, cr√©er un paiement
      if (!booking.payment && newBookingStatus === "COMPLETED") {
        await this.createMissingPayment(booking);
        return;
      }

      if (!booking.payment) {
        return; // Pas de paiement √† synchroniser
      }

      let newPaymentStatus: PaymentStatus | null = null;

      // D√©terminer le nouveau statut de paiement bas√© sur la r√©servation
      switch (newBookingStatus) {
        case "COMPLETED":
          if (booking.payment.status === "PENDING") {
            newPaymentStatus = "COMPLETED";
          }
          break;

        case "CANCELLED":
          if (["PENDING", "PROCESSING"].includes(booking.payment.status)) {
            newPaymentStatus = "FAILED";
          }
          break;

        default:
          // Pas de changement n√©cessaire
          break;
      }

      if (newPaymentStatus) {
        await prisma.payment.update({
          where: { id: booking.payment.id },
          data: {
            status: newPaymentStatus,
            paidAt:
              newPaymentStatus === "COMPLETED"
                ? new Date()
                : booking.payment.paidAt,
            failedAt:
              newPaymentStatus === "FAILED"
                ? new Date()
                : booking.payment.failedAt,
            metadata: {
              ...booking.payment.metadata,
              syncedAt: new Date(),
              syncReason: `booking_status_changed_to_${newBookingStatus}`,
              ...metadata,
            },
            updatedAt: new Date(),
          },
        });

        console.log(
          `‚úÖ Payment ${booking.payment.id} status synced: ${booking.payment.status} ‚Üí ${newPaymentStatus}`,
        );
      }
    } catch (error) {
      console.error(`‚ùå Error syncing payment on booking change:`, error);
      throw error;
    }
  }

  /**
   * Force la synchronisation compl√®te d'une r√©servation
   */
  static async forceSyncBooking(bookingId: string): Promise<void> {
    try {
      const booking = await prisma.booking.findUnique({
        where: { id: bookingId },
        include: {
          payment: true,
          service: {
            include: {
              provider: {
                include: { user: true },
              },
            },
          },
          client: {
            include: { user: true },
          },
        },
      });

      if (!booking) {
        throw new Error(`Booking ${bookingId} not found`);
      }

      // Si paiement existe, synchroniser le booking bas√© sur le paiement
      if (booking.payment) {
        await this.syncBookingOnPaymentChange(
          booking.payment.id,
          booking.payment.status,
        );
      }

      // Synchroniser le paiement bas√© sur le booking
      await this.syncPaymentOnBookingChange(bookingId, booking.status);

      console.log(`‚úÖ Force sync completed for booking ${bookingId}`);
    } catch (error) {
      console.error(`‚ùå Error force syncing booking:`, error);
      throw error;
    }
  }

  /**
   * V√©rifie et corrige toutes les incoh√©rences
   */
  static async auditAndFixInconsistencies(): Promise<{
    checked: number;
    fixed: number;
    errors: string[];
  }> {
    const results = {
      checked: 0,
      fixed: 0,
      errors: [] as string[],
    };

    try {
      // Trouver toutes les r√©servations avec paiements
      const bookingsWithPayments = await prisma.booking.findMany({
        include: {
          payment: true,
          service: true,
        },
      });

      for (const booking of bookingsWithPayments) {
        if (!booking.payment) continue;

        results.checked++;

        try {
          const needsSync = this.detectInconsistency(
            booking.status,
            booking.payment.status,
          );

          if (needsSync) {
            await this.forceSyncBooking(booking.id);
            results.fixed++;
            console.log(`‚úÖ Fixed inconsistency for booking ${booking.id}`);
          }
        } catch (error) {
          const errorMsg = `Error fixing booking ${booking.id}: ${error}`;
          results.errors.push(errorMsg);
          console.error(errorMsg);
        }
      }

      console.log(
        `üîç Audit completed: ${results.checked} checked, ${results.fixed} fixed, ${results.errors.length} errors`,
      );
      return results;
    } catch (error) {
      console.error(`‚ùå Error during audit:`, error);
      throw error;
    }
  }

  /**
   * D√©tecte les incoh√©rences entre booking et payment
   */
  private static detectInconsistency(
    bookingStatus: BookingStatus,
    paymentStatus: PaymentStatus,
  ): boolean {
    const problematicCombinations = [
      // Paiement compl√©t√© mais booking pas confirm√©
      { booking: "PENDING", payment: "COMPLETED" },
      // Booking compl√©t√© mais paiement pas compl√©t√©
      { booking: "COMPLETED", payment: "PENDING" },
      { booking: "COMPLETED", payment: "PROCESSING" },
      // Booking confirm√©/en cours mais paiement √©chou√©
      { booking: "CONFIRMED", payment: "FAILED" },
      { booking: "IN_PROGRESS", payment: "FAILED" },
    ];

    return problematicCombinations.some(
      (combo) =>
        combo.booking === bookingStatus && combo.payment === paymentStatus,
    );
  }

  /**
   * Cr√©e un paiement manquant pour une r√©servation compl√©t√©e
   */
  private static async createMissingPayment(booking: any): Promise<void> {
    await prisma.payment.create({
      data: {
        userId: booking.clientId,
        bookingId: booking.id,
        amount: booking.totalPrice,
        currency: "EUR",
        status: "COMPLETED",
        type: "SERVICE",
        paymentMethod: "AUTO_SYNC",
        paidAt: booking.scheduledDate,
        metadata: {
          createdBy: "booking_sync_service",
          reason: "missing_payment_for_completed_booking",
          originalBookingDate: booking.scheduledDate,
        },
      },
    });

    console.log(
      `‚úÖ Created missing payment for completed booking ${booking.id}`,
    );
  }

  /**
   * Cr√©e les notifications de confirmation
   */
  private static async createConfirmationNotifications(
    tx: any,
    booking: any,
    amount: number,
  ): Promise<void> {
    await tx.notification.createMany({
      data: [
        {
          userId: booking.client.user.id,
          type: "BOOKING_CONFIRMED",
          title: "R√©servation confirm√©e",
          message: `Votre r√©servation pour "${booking.service.name}" a √©t√© confirm√©e suite au paiement.`,
          isRead: false,
          data: {
            bookingId: booking.id,
            amount,
            syncedBy: "booking_sync_service",
          },
        },
        {
          userId: booking.service.provider.user.id,
          type: "BOOKING_PAID",
          title: "Nouvelle r√©servation pay√©e",
          message: `Une r√©servation pour "${booking.service.name}" a √©t√© confirm√©e et pay√©e.`,
          isRead: false,
          data: {
            bookingId: booking.id,
            amount,
            syncedBy: "booking_sync_service",
          },
        },
      ],
    });
  }

  /**
   * Cr√©e les notifications d'annulation
   */
  private static async createCancellationNotifications(
    tx: any,
    booking: any,
  ): Promise<void> {
    await tx.notification.createMany({
      data: [
        {
          userId: booking.client.user.id,
          type: "BOOKING_CANCELLED",
          title: "R√©servation annul√©e",
          message: `Votre r√©servation pour "${booking.service.name}" a √©t√© annul√©e suite √† un probl√®me de paiement.`,
          isRead: false,
          data: {
            bookingId: booking.id,
            syncedBy: "booking_sync_service",
          },
        },
        {
          userId: booking.service.provider.user.id,
          type: "BOOKING_CANCELLED",
          title: "R√©servation annul√©e",
          message: `Une r√©servation pour "${booking.service.name}" a √©t√© annul√©e.`,
          isRead: false,
          data: {
            bookingId: booking.id,
            syncedBy: "booking_sync_service",
          },
        },
      ],
    });
  }
}
