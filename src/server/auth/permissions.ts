import { TRPCError } from '@trpc/server';\nimport { db } from '../db';\nimport { UserRole } from '@prisma/client';\n\n// Vérification spécifique pour les livreurs vérifiés\nexport const isVerifiedDeliverer = async (userId: string) => {\n  const deliverer = await db.deliverer.findFirst({\n    where: { userId, isVerified: true }\n  });\n  \n  if (!deliverer) {\n    throw new TRPCError({\n      code: 'FORBIDDEN',\n      message: 'Cette action nécessite un compte livreur vérifié.'\n    });\n  }\n  \n  return deliverer;\n};\n\n// Vérification spécifique pour les prestataires vérifiés\nexport const isVerifiedProvider = async (userId: string) => {\n  const provider = await db.provider.findFirst({\n    where: { userId, isVerified: true }\n  });\n  \n  if (!provider) {\n    throw new TRPCError({\n      code: 'FORBIDDEN',\n      message: 'Cette action nécessite un compte prestataire vérifié.'\n    });\n  }\n  \n  return provider;\n};\n\n// Vérification pour les actions sur les ressources possédées\nexport const ownsResource = async (resourceType: string, resourceId: string, userId: string) => {\n  let resource: any = null;\n  \n  switch (resourceType) {\n    case 'announcement':\n      resource = await db.announcement.findUnique({\n        where: { id: resourceId },\n        select: { clientId: true, merchantId: true, delivererId: true }\n      });\n      break;\n    case 'delivery':\n      // Vérification pour livraison\n      break;\n    // Autres cas\n  }\n  \n  if (!resource) {\n    throw new TRPCError({\n      code: 'NOT_FOUND',\n      message: 'Ressource non trouvée'\n    });\n  }\n  \n  // Vérification de la propriété selon le type de ressource\n  // ...\n  \n  return true;\n};