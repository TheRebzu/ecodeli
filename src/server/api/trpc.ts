import { initTRPC, TRPCError } from '@trpc/server';\nimport superjson from 'superjson';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '../auth/next-auth';\nimport { db } from '../db';\n\nexport const createTRPCContext = async (opts: any) => {\n  const session = await getServerSession(authOptions);\n  return {\n    db,\n    session,\n  };\n};\n\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n});\n\nexport const router = t.router;\nexport const publicProcedure = t.procedure;\n\nconst isAuthenticated = t.middleware(({ ctx, next }) => {\n  if (!ctx.session || !ctx.session.user) {\n    throw new TRPCError({ code: 'UNAUTHORIZED' });\n  }\n  return next({\n    ctx: {\n      ...ctx,\n      session: { ...ctx.session, user: ctx.session.user },\n    },\n  });\n});\n\nexport const protectedProcedure = t.procedure.use(isAuthenticated);