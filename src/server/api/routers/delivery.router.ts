import { router, protectedProcedure } from '../trpc';\nimport { z } from 'zod';\n\nexport const deliveryRouter = router({\n  getAll: protectedProcedure\n    .input(z.object({\n      status: z.enum(['PENDING', 'ACCEPTED', 'PICKED_UP', 'IN_TRANSIT', 'DELIVERED', 'CANCELLED']).optional(),\n      limit: z.number().min(1).max(100).default(10),\n      cursor: z.string().nullish(),\n    }))\n    .query(async ({ ctx, input }) => {\n      // Récupération des livraisons\n    }),\n  \n  getById: protectedProcedure\n    .input(z.object({ id: z.string() }))\n    .query(async ({ ctx, input }) => {\n      // Récupération d'une livraison par ID\n    }),\n  \n  create: protectedProcedure\n    .input(z.object({\n      announcementId: z.string().optional(),\n      pickupAddress: z.string(),\n      deliveryAddress: z.string(),\n      pickupDate: z.date(),\n      weight: z.number().optional(),\n      dimensions: z.string().optional(),\n      description: z.string().optional(),\n      price: z.number(),\n      type: z.enum(['PACKAGE', 'SHOPPING_CART', 'AIRPORT_TRANSFER', 'GROCERY', 'FOREIGN_PRODUCT']),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      // Création d'une livraison\n    }),\n  \n  updateStatus: protectedProcedure\n    .input(z.object({\n      id: z.string(),\n      status: z.enum(['PENDING', 'ACCEPTED', 'PICKED_UP', 'IN_TRANSIT', 'DELIVERED', 'CANCELLED']),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      // Mise à jour du statut d'une livraison\n    }),\n  \n  confirmCode: protectedProcedure\n    .input(z.object({\n      id: z.string(),\n      code: z.string(),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      // Confirmation du code de livraison\n    }),\n});