import { TRPCError } from '@trpc/server';\nimport { z } from 'zod';\nimport { router, publicProcedure, protectedProcedure } from '../trpc';\nimport { UserRole } from '@prisma/client';\nimport { hash, compare } from 'bcryptjs';\n\nexport const authRouter = router({\n  register: publicProcedure\n    .input(z.object({\n      email: z.string().email(),\n      password: z.string().min(8),\n      name: z.string().min(2),\n      role: z.enum(['CLIENT', 'DELIVERER', 'MERCHANT', 'PROVIDER']),\n      // Autres champs spécifiques au rôle\n    }))\n    .mutation(async ({ ctx, input }) => {\n      // Logique d'inscription\n    }),\n  \n  verifyEmail: publicProcedure\n    .input(z.object({ token: z.string() }))\n    .mutation(async ({ ctx, input }) => {\n      // Logique de vérification d'email\n    }),\n  \n  requestPasswordReset: publicProcedure\n    .input(z.object({ email: z.string().email() }))\n    .mutation(async ({ ctx, input }) => {\n      // Demande de réinitialisation de mot de passe\n    }),\n  \n  resetPassword: publicProcedure\n    .input(z.object({ \n      token: z.string(),\n      password: z.string().min(8)\n    }))\n    .mutation(async ({ ctx, input }) => {\n      // Réinitialisation de mot de passe\n    }),\n  \n  getCurrentUser: protectedProcedure\n    .query(async ({ ctx }) => {\n      // Récupération de l'utilisateur courant\n    }),\n});