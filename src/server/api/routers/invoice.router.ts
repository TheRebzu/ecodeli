import { router, protectedProcedure } from '../trpc';\nimport { z } from 'zod';\n\nexport const invoiceRouter = router({\n  getAll: protectedProcedure\n    .input(z.object({\n      status: z.enum(['PENDING', 'PAID', 'OVERDUE', 'CANCELLED']).optional(),\n      limit: z.number().min(1).max(100).default(10),\n      cursor: z.string().nullish(),\n    }))\n    .query(async ({ ctx, input }) => {\n      // Récupération des factures\n    }),\n  \n  getById: protectedProcedure\n    .input(z.object({ id: z.string() }))\n    .query(async ({ ctx, input }) => {\n      // Récupération d'une facture par ID\n    }),\n  \n  generateInvoice: protectedProcedure\n    .input(z.object({\n      deliveryId: z.string().optional(),\n      serviceId: z.string().optional(),\n      dueDate: z.date().optional(),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      // Génération d'une facture\n    }),\n  \n  markAsPaid: protectedProcedure\n    .input(z.object({ id: z.string() }))\n    .mutation(async ({ ctx, input }) => {\n      // Marquer une facture comme payée\n    }),\n});