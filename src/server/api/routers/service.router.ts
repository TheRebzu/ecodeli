import { router, protectedProcedure } from '../trpc';\nimport { z } from 'zod';\n\nexport const serviceRouter = router({\n  getAll: protectedProcedure\n    .input(z.object({\n      type: z.enum(['TRANSPORT', 'AIRPORT_TRANSFER', 'PET_SITTING', 'HOUSEKEEPING', 'GARDENING']).optional(),\n      limit: z.number().min(1).max(100).default(10),\n      cursor: z.string().nullish(),\n    }))\n    .query(async ({ ctx, input }) => {\n      // Récupération des services\n    }),\n  \n  getById: protectedProcedure\n    .input(z.object({ id: z.string() }))\n    .query(async ({ ctx, input }) => {\n      // Récupération d'un service par ID\n    }),\n  \n  create: protectedProcedure\n    .input(z.object({\n      type: z.enum(['TRANSPORT', 'AIRPORT_TRANSFER', 'PET_SITTING', 'HOUSEKEEPING', 'GARDENING']),\n      description: z.string(),\n      date: z.date(),\n      duration: z.number(), // en minutes\n      address: z.string(),\n      price: z.number(),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      // Création d'un service\n    }),\n  \n  book: protectedProcedure\n    .input(z.object({\n      serviceId: z.string(),\n      date: z.date(),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      // Réservation d'un service\n    }),\n  \n  updateStatus: protectedProcedure\n    .input(z.object({\n      id: z.string(),\n      status: z.enum(['PENDING', 'ACCEPTED', 'COMPLETED', 'CANCELLED']),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      // Mise à jour du statut d'un service\n    }),\n  \n  addRating: protectedProcedure\n    .input(z.object({\n      id: z.string(),\n      rating: z.number().min(1).max(5),\n      comment: z.string().optional(),\n    }))\n    .mutation(async ({ ctx, input }) => {\n      // Ajout d'une évaluation\n    }),\n});