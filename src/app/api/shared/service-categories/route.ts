import { NextRequest, NextResponse } from 'next/server'

// Cat√©gories de services bas√©es sur l'enum ServiceType du sch√©ma Prisma
const SERVICE_CATEGORIES = [
  {
    id: 'PERSON_TRANSPORT',
    name: 'Transport de personnes',
    description: 'Transport de personnes et accompagnement',
    icon: 'üöó'
  },
  {
    id: 'AIRPORT_TRANSFER',
    name: 'Transfert a√©roport',
    description: 'Navette et transfert vers les a√©roports',
    icon: '‚úàÔ∏è'
  },
  {
    id: 'SHOPPING',
    name: 'Courses',
    description: 'Courses et achats √† domicile',
    icon: 'üõí'
  },
  {
    id: 'INTERNATIONAL_PURCHASE',
    name: 'Achats internationaux',
    description: 'Achat et import de produits internationaux',
    icon: 'üåç'
  },
  {
    id: 'PET_CARE',
    name: 'Garde d\'animaux',
    description: 'Garde et soins pour animaux de compagnie',
    icon: 'üêï'
  },
  {
    id: 'HOME_SERVICE',
    name: 'Services √† domicile',
    description: 'M√©nage, jardinage et services m√©nagers',
    icon: 'üè†'
  },
  {
    id: 'CART_DROP',
    name: 'L√¢cher de chariot',
    description: 'Livraison apr√®s achat en magasin',
    icon: 'üõçÔ∏è'
  },
  {
    id: 'OTHER',
    name: 'Autre',
    description: 'Autres services personnalis√©s',
    icon: 'üìã'
  }
]

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const includeInactive = searchParams.get('includeInactive') === 'true'
    
    // Pour l'instant, toutes les cat√©gories sont actives
    // On pourrait ajouter une logique pour filtrer selon la disponibilit√©
    let categories = SERVICE_CATEGORIES
    
    if (!includeInactive) {
      // Filtrer les cat√©gories inactives si n√©cessaire
      categories = SERVICE_CATEGORIES
    }

    return NextResponse.json({
      categories,
      total: categories.length
    })
  } catch (error) {
    console.error('Error fetching service categories:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
} 