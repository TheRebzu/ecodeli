import { NextRequest, NextResponse } from 'next/server'
import { getUserFromSession } from '@/lib/auth/utils'
import { db } from '@/lib/db'
import { createServiceRequestSchema } from '@/features/services/schemas/service-request.schema'
import { z } from 'zod'

export async function GET(request: NextRequest) {
  try {
    console.log('üîç [GET /api/client/service-requests] D√©but de la requ√™te')
    
    const user = await getUserFromSession(request)
    if (!user) {
      console.log('‚ùå Utilisateur non authentifi√©')
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    console.log('‚úÖ Utilisateur authentifi√©:', user.id, user.role)

    const { searchParams } = new URL(request.url)
    
    // Validation des param√®tres avec le schema
    const params = {
      page: searchParams.get('page') ? parseInt(searchParams.get('page')!) : 1,
      limit: searchParams.get('limit') ? parseInt(searchParams.get('limit')!) : 20,
      status: searchParams.get('status'),
      type: searchParams.get('type'),
      budgetMin: searchParams.get('budgetMin'),
      budgetMax: searchParams.get('budgetMax'),
      city: searchParams.get('city'),
      dateFrom: searchParams.get('dateFrom'),
      dateTo: searchParams.get('dateTo'),
      urgency: searchParams.get('urgency'),
      isRecurring: searchParams.get('isRecurring'),
      sortBy: searchParams.get('sortBy') || 'createdAt',
      sortOrder: searchParams.get('sortOrder') || 'desc'
    }

    console.log('üìù Param√®tres de recherche demandes de services:', params)

    // Construction des filtres
    const where: any = {
      authorId: user.id,
      type: 'HOME_SERVICE'
    }

    // Filtres optionnels
    if (params.status) {
      where.status = params.status
    }

    if (params.budgetMin || params.budgetMax) {
      where.basePrice = {}
      if (params.budgetMin) where.basePrice.gte = parseFloat(params.budgetMin)
      if (params.budgetMax) where.basePrice.lte = parseFloat(params.budgetMax)
    }

    if (params.urgency) {
      where.isUrgent = params.urgency === 'true'
    }

    console.log('üîç Requ√™te base de donn√©es demandes de services avec filtres...')

    try {
      const [serviceRequests, total] = await Promise.all([
        db.announcement.findMany({
          where,
          include: {
            author: {
              include: {
                profile: {
                  select: {
                    firstName: true,
                    lastName: true,
                    avatar: true
                  }
                }
              }
            },
            deliverer: {
              include: {
                profile: {
                  select: {
                    firstName: true,
                    lastName: true,
                    avatar: true
                  }
                }
              }
            },
            ServiceAnnouncement: true,
            _count: {
              select: {
                reviews: true,
                matches: true,
                attachments: true,
                notifications: true,
                tracking: true,
                AnnouncementGroup: true,
                GroupingProposal: true
              }
            }
          },
          orderBy: {
            [params.sortBy]: params.sortOrder
          },
          skip: (params.page - 1) * params.limit,
          take: params.limit
        }),
        db.announcement.count({ where })
      ])

      console.log(`‚úÖ Demandes de services trouv√©es: ${serviceRequests.length} sur un total de ${total}`)

      return NextResponse.json({
        serviceRequests,
        pagination: {
          page: params.page,
          limit: params.limit,
          total,
          totalPages: Math.ceil(total / params.limit)
        }
      })

    } catch (dbError) {
      console.error('‚ùå Erreur base de donn√©es:', dbError)
      return NextResponse.json(
        { error: 'Erreur lors de la r√©cup√©ration des demandes de services' },
        { status: 500 }
      )
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    console.log('üîç [POST /api/client/service-requests] Cr√©ation demande de service')
    
    const user = await getUserFromSession(request)
    if (!user) {
      console.log('‚ùå Utilisateur non authentifi√©')
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    console.log('‚úÖ Utilisateur authentifi√©:', user.id, user.role)

    const body = await request.json()
    console.log('üìù Donn√©es re√ßues:', body)

    // Validation des donn√©es avec le sch√©ma
    let validatedData
    try {
      validatedData = createServiceRequestSchema.parse(body)
      console.log('‚úÖ Donn√©es valid√©es:', validatedData)
    } catch (validationError) {
      console.error('‚ùå Erreur de validation:', validationError)
      if (validationError instanceof z.ZodError) {
        return NextResponse.json({
          error: 'Donn√©es invalides',
          details: validationError.errors
        }, { status: 400 })
      }
      return NextResponse.json({
        error: 'Format de donn√©es invalide'
      }, { status: 400 })
    }

    // Pr√©paration des instructions sp√©ciales avec les informations d'acc√®s
    let specialInstructions = validatedData.specificRequirements || ''
    if (validatedData.location.accessCode) {
      specialInstructions += `\nCode d'acc√®s: ${validatedData.location.accessCode}`
    }
    if (validatedData.location.floor) {
      specialInstructions += `\n√âtage: ${validatedData.location.floor}`
    }

    // Cr√©ation de l'annonce principale
    const announcement = await db.announcement.create({
      data: {
        title: validatedData.title,
        description: validatedData.description,
        type: 'HOME_SERVICE',
        status: 'ACTIVE',
        basePrice: validatedData.budget,
        currency: 'EUR',
        pickupAddress: `${validatedData.location.address}, ${validatedData.location.postalCode} ${validatedData.location.city}`,
        deliveryAddress: `${validatedData.location.address}, ${validatedData.location.postalCode} ${validatedData.location.city}`,
        pickupDate: new Date(validatedData.scheduledAt),
        deliveryDate: new Date(validatedData.scheduledAt),
        pickupLatitude: 0, // √Ä g√©ocoder
        pickupLongitude: 0, // √Ä g√©ocoder
        deliveryLatitude: 0, // √Ä g√©ocoder
        deliveryLongitude: 0, // √Ä g√©ocoder
        isUrgent: validatedData.urgency === 'HIGH' || validatedData.urgency === 'URGENT',
        authorId: user.id,
        specialInstructions: specialInstructions.trim(),
        estimatedDuration: validatedData.duration,
        publishedAt: new Date()
      }
    })

    console.log('‚úÖ Annonce cr√©√©e:', announcement.id)

    // Cr√©ation des d√©tails de service
    const serviceAnnouncement = await db.serviceAnnouncement.create({
      data: {
        announcementId: announcement.id,
        serviceType: validatedData.type as any, // Conversion du type
        duration: validatedData.duration,
        recurringService: validatedData.isRecurring,
        recurringPattern: validatedData.frequency || null,
        specialRequirements: validatedData.specificRequirements || null,
        preferredProviderId: null // √Ä impl√©menter si n√©cessaire
      }
    })

    console.log('‚úÖ D√©tails de service cr√©√©s:', serviceAnnouncement.id)

    // Cr√©ation du tracking initial
    await db.announcementTracking.create({
      data: {
        announcementId: announcement.id,
        status: 'ACTIVE',
        message: 'Demande de service cr√©√©e',
        createdBy: user.id,
        isPublic: true
      }
    })

    console.log('‚úÖ Tracking initial cr√©√©')

    // R√©cup√©ration de l'annonce compl√®te avec relations
    const createdAnnouncement = await db.announcement.findUnique({
      where: { id: announcement.id },
      include: {
        author: {
          include: {
            profile: {
              select: {
                firstName: true,
                lastName: true,
                avatar: true
              }
            }
          }
        },
        ServiceAnnouncement: true,
        tracking: {
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      }
    })

    console.log('‚úÖ Demande de service cr√©√©e avec succ√®s')

    return NextResponse.json({
      message: 'Demande de service cr√©√©e avec succ√®s',
      serviceRequest: createdAnnouncement
    }, { status: 201 })

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation:', error)
    return NextResponse.json({
      error: 'Erreur lors de la cr√©ation de la demande de service'
    }, { status: 500 })
  }
}