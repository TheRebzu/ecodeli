import { NextRequest, NextResponse } from 'next/server'
import { getUserFromSession } from '@/lib/auth/utils'
import { ClientDashboardService } from '@/features/client/services/dashboard.service'
import { ClientDashboardResponseSchema } from '@/features/client/schemas/dashboard.schema'
import { prisma } from '@/lib/db'

/**
 * API Dashboard Client EcoDeli
 * 
 * Impl√©mente les exigences Mission 1 - Partie d√©di√©e aux clients :
 * - D√©p√¥t d'annonces et suivi des livraisons
 * - R√©servation de services et RDV avec prestataires
 * - Gestion des paiements
 * - Acc√®s aux box de stockage temporaire
 * - Tutoriel obligatoire √† la premi√®re connexion
 * 
 * AUCUNE DONN√âE MOCK - Toutes les donn√©es viennent de PostgreSQL
 */

const dashboardService = new ClientDashboardService()

/**
 * GET /api/client/dashboard
 * R√©cup√©rer toutes les donn√©es du dashboard client
 */
export async function GET(request: NextRequest) {
  try {
    // V√©rification de l'authentification et du r√¥le
    const user = await getUserFromSession(request)
    
    if (!user || user.role !== 'CLIENT') {
      return NextResponse.json(
        { error: 'Acc√®s refus√© - R√¥le CLIENT requis' }, 
        { status: 403 }
      )
    }

    // R√©cup√©ration des donn√©es compl√®tes du dashboard
    console.log('üîç [Dashboard API] User ID:', user.id)
    const dashboardData = await dashboardService.getDashboardData(user.id)
    
    // Formatage de la r√©ponse selon le sch√©ma
    const response = {
      client: {
        id: dashboardData.client.id,
        subscriptionPlan: dashboardData.client.subscriptionPlan,
        subscriptionExpiry: dashboardData.client.subscriptionEnd,
        tutorialCompleted: dashboardData.client.tutorialCompleted,
        emailVerified: dashboardData.client.user.emailVerified,
        profileComplete: !!(dashboardData.client.user.profile?.firstName && dashboardData.client.user.profile?.lastName),
        user: {
          id: dashboardData.client.user.id,
          name: dashboardData.client.user.name,
          email: dashboardData.client.user.email,
          phone: dashboardData.client.user.profile?.phone,
          avatar: dashboardData.client.user.profile?.avatar
        }
      },
      stats: dashboardData.stats,
      recentAnnouncements: dashboardData.recentActivity.announcements,
      recentBookings: dashboardData.recentActivity.bookings,
      activeStorageBoxes: dashboardData.recentActivity.storageBoxes,
      notifications: dashboardData.notifications,
      tutorial: dashboardData.tutorial,
      quickActions: dashboardData.quickActions
    }

    // Validation de la r√©ponse avec Zod
    const validatedResponse = ClientDashboardResponseSchema.parse(response)

    return NextResponse.json(validatedResponse)

  } catch (error) {
    console.error('‚ùå [API Dashboard] Erreur:', error)
    
    // Gestion des erreurs de validation Zod
    if (error instanceof Error && error.name === 'ZodError') {
      return NextResponse.json({
        error: 'Erreur de validation des donn√©es',
        details: error.message
      }, { status: 400 })
    }

    // Erreurs m√©tier
    if (error instanceof Error && error.message.includes('introuvable')) {
      return NextResponse.json({
        error: 'Profil client introuvable'
      }, { status: 404 })
    }

    // Erreur g√©n√©rique
    return NextResponse.json({
      error: 'Erreur serveur lors de la r√©cup√©ration du dashboard',
      details: process.env.NODE_ENV === 'development' ? (error as Error).message : undefined
    }, { status: 500 })
  }
}

/**
 * POST /api/client/dashboard/refresh
 * Rafra√Æchir les donn√©es du dashboard (cache bust)
 */
export async function POST(request: NextRequest) {
  try {
    const user = await getUserFromSession(request)
    
    if (!user || user.role !== 'CLIENT') {
      return NextResponse.json(
        { error: 'Acc√®s refus√©' }, 
        { status: 403 }
      )
    }

    // Rafra√Æchissement des donn√©es

    // Re-r√©cup√©ration des donn√©es (peut inclure un cache bust)
    const dashboardData = await dashboardService.getDashboardData(user.id)
    
    const response = {
      client: {
        id: dashboardData.client.id,
        subscriptionPlan: dashboardData.client.subscriptionPlan,
        subscriptionExpiry: dashboardData.client.subscriptionEnd,
        tutorialCompleted: dashboardData.client.tutorialCompleted,
        emailVerified: dashboardData.client.user.emailVerified,
        profileComplete: !!(dashboardData.client.user.profile?.firstName && dashboardData.client.user.profile?.lastName),
        user: {
          id: dashboardData.client.user.id,
          name: dashboardData.client.user.name,
          email: dashboardData.client.user.email,
          phone: dashboardData.client.user.profile?.phone,
          avatar: dashboardData.client.user.profile?.avatar
        }
      },
      stats: dashboardData.stats,
      recentAnnouncements: dashboardData.recentActivity.announcements,
      recentBookings: dashboardData.recentActivity.bookings,
      activeStorageBoxes: dashboardData.recentActivity.storageBoxes,
      notifications: dashboardData.notifications,
      tutorial: dashboardData.tutorial,
      quickActions: dashboardData.quickActions,
      refreshedAt: new Date().toISOString()
    }

    return NextResponse.json(response)

  } catch (error) {
    console.error('‚ùå [API Dashboard] Erreur refresh:', error)
    return NextResponse.json({
      error: 'Erreur lors du rafra√Æchissement'
    }, { status: 500 })
  }
}

/**
 * PUT /api/client/dashboard/tutorial
 * Marquer le tutoriel comme termin√©
 */
export async function PUT(request: NextRequest) {
  try {
    const user = await getUserFromSession(request)
    
    if (!user || user.role !== 'CLIENT') {
      return NextResponse.json(
        { error: 'Acc√®s refus√©' }, 
        { status: 403 }
      )
    }

    const body = await request.json()
    const { completed, timeSpent, feedback } = body

    if (completed) {
      // Marquer le tutoriel comme termin√©
      await prisma.client.update({
        where: { userId: user.id },
        data: {
          tutorialCompleted: true,
          tutorialCompletedAt: new Date()
        }
      })

      // Tutoriel marqu√© comme termin√©

      return NextResponse.json({
        success: true,
        message: 'Tutoriel marqu√© comme termin√©'
      })
    }

    return NextResponse.json({
      error: 'Param√®tre completed requis'
    }, { status: 400 })

  } catch (error) {
    console.error('‚ùå [API Dashboard] Erreur tutoriel:', error)
    return NextResponse.json({
      error: 'Erreur lors de la mise √† jour du tutoriel'
    }, { status: 500 })
  }
}