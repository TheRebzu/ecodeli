import { NextRequest, NextResponse } from "next/server";
import { getUserFromSession } from "@/lib/auth/utils";
import { db } from "@/lib/db";
import { z } from "zod";

const responseSchema = z.object({
  action: z.enum(["ACCEPT", "REJECT"]),
  message: z.string().optional(),
});

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> },
) {
  try {
    console.log(
      "üîç [POST /api/client/applications/[id]/respond] R√©ponse client √† candidature",
    );

    const user = await getUserFromSession(request);
    if (!user || user.role !== "CLIENT") {
      console.log("‚ùå Utilisateur non authentifi√© ou non client");
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    console.log("‚úÖ Client authentifi√©:", user.id, user.role);

    const { id: applicationId } = await params;
    const body = await request.json();

    try {
      const validatedData = responseSchema.parse(body);
      console.log("‚úÖ Donn√©es de r√©ponse valid√©es:", validatedData);

      // V√©rifier que la candidature existe et appartient au client
      const application = await db.serviceApplication.findUnique({
        where: { id: applicationId },
        include: {
          announcement: {
            include: {
              author: true,
            },
          },
          provider: {
            include: {
              profile: true,
            },
          },
        },
      });

      if (!application) {
        console.log("‚ùå Candidature non trouv√©e");
        return NextResponse.json(
          { error: "Candidature non trouv√©e" },
          { status: 404 },
        );
      }

      // V√©rifier que le client est bien l'auteur de la demande de service
      if (application.announcement.authorId !== user.id) {
        console.log("‚ùå Acc√®s non autoris√© √† cette candidature");
        return NextResponse.json(
          { error: "Acc√®s non autoris√©" },
          { status: 403 },
        );
      }

      // V√©rifier que la candidature n'a pas d√©j√† √©t√© trait√©e
      if (application.status !== "PENDING") {
        console.log("‚ùå Candidature d√©j√† trait√©e");
        return NextResponse.json(
          {
            error: "Cette candidature a d√©j√† √©t√© trait√©e",
          },
          { status: 400 },
        );
      }

      console.log("üîç Traitement de la r√©ponse...");

      // Mettre √† jour le statut de la candidature
      const updatedApplication = await db.serviceApplication.update({
        where: { id: applicationId },
        data: {
          status: validatedData.action === "ACCEPT" ? "ACCEPTED" : "REJECTED",
        },
      });

      console.log(
        `‚úÖ Candidature ${validatedData.action === "ACCEPT" ? "accept√©e" : "refus√©e"}`,
      );

      // Si accept√©e, mettre √† jour le statut de la demande de service
      if (validatedData.action === "ACCEPT") {
        await db.announcement.update({
          where: { id: application.announcementId },
          data: {
            status: "IN_PROGRESS",
          },
        });
        console.log("‚úÖ Demande de service mise √† jour: IN_PROGRESS");
      }

      // Cr√©er une notification pour le prestataire
      const notificationTitle =
        validatedData.action === "ACCEPT"
          ? "Candidature accept√©e"
          : "Candidature refus√©e";

      const notificationMessage =
        validatedData.action === "ACCEPT"
          ? `Votre candidature pour "${application.announcement.title}" a √©t√© accept√©e !`
          : `Votre candidature pour "${application.announcement.title}" a √©t√© refus√©e.`;

      await db.notification.create({
        data: {
          userId: application.provider.id,
          title: notificationTitle,
          message: notificationMessage,
          type:
            validatedData.action === "ACCEPT"
              ? "APPLICATION_ACCEPTED"
              : "APPLICATION_REJECTED",
          data: {
            applicationId: applicationId,
            serviceRequestId: application.serviceRequestId,
            clientMessage: validatedData.message,
          },
        },
      });

      console.log("‚úÖ Notification cr√©√©e pour le prestataire");

      return NextResponse.json({
        success: true,
        application: {
          id: updatedApplication.id,
          status: updatedApplication.status,
          respondedAt: updatedApplication.respondedAt?.toISOString(),
        },
      });
    } catch (validationError) {
      console.error("‚ùå Erreur de validation:", validationError);
      if (validationError instanceof z.ZodError) {
        return NextResponse.json(
          { error: "Donn√©es invalides", details: validationError.errors },
          { status: 400 },
        );
      }
      throw validationError;
    }
  } catch (error) {
    console.error("‚ùå Erreur g√©n√©rale:", error);
    return NextResponse.json(
      { error: "Erreur interne du serveur" },
      { status: 500 },
    );
  }
}
