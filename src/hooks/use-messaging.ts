import { useEffect } from 'react';\nimport { api } from './use-trpc';\nimport { useMessagingStore } from '@/store/use-messaging-store';\nimport { useSocket } from './use-socket';\n\nexport function useMessaging(conversationId?: string) {\n  const socket = useSocket();\n  const { setConversations, setMessages, addMessage } = useMessagingStore();\n  \n  // Requêtes tRPC\n  const conversationsQuery = api.messaging.getConversations.useQuery();\n  const messagesQuery = conversationId \n    ? api.messaging.getMessages.useQuery({ conversationId })\n    : { data: undefined, isLoading: false };\n  \n  // Mutation pour envoyer un message\n  const sendMessageMutation = api.messaging.sendMessage.useMutation();\n  \n  useEffect(() => {\n    if (conversationsQuery.data) {\n      setConversations(conversationsQuery.data);\n    }\n  }, [conversationsQuery.data, setConversations]);\n  \n  useEffect(() => {\n    if (messagesQuery.data) {\n      setMessages(conversationId!, messagesQuery.data);\n    }\n  }, [messagesQuery.data, conversationId, setMessages]);\n  \n  // Écouter les nouveaux messages via socket\n  useEffect(() => {\n    if (socket && conversationId) {\n      socket.on(message:, (message) => {\n        addMessage(conversationId, message);\n      });\n      \n      return () => {\n        socket.off(message:);\n      };\n    }\n  }, [socket, conversationId, addMessage]);\n  \n  const sendMessage = async (content: string) => {\n    if (!conversationId) return;\n    \n    await sendMessageMutation.mutateAsync({\n      conversationId,\n      content,\n    });\n  };\n  \n  return {\n    conversations: conversationsQuery.data,\n    messages: messagesQuery.data,\n    isLoadingConversations: conversationsQuery.isLoading,\n    isLoadingMessages: messagesQuery.isLoading,\n    sendMessage,\n    createConversation: api.messaging.createConversation.useMutation(),\n  };\n}