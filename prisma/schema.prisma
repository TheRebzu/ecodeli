generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                        @id @default(cuid())
  name                     String
  email                    String                        @unique
  emailVerified            DateTime?
  password                 String
  image                    String?
  role                     UserRole
  status                   UserStatus                    @default(PENDING_VERIFICATION)
  createdAt                DateTime                      @default(now())
  updatedAt                DateTime                      @updatedAt
  phoneNumber              String?
  lastLoginAt              DateTime?
  twoFactorEnabled         Boolean                       @default(false)
  twoFactorSecret          String?
  locale                   String?
  preferences              Json?
  isVerified               Boolean                       @default(false)
  lastPasswordChange       DateTime?
  lockedUntil              DateTime?
  loginAttempts            Int                           @default(0)
  notes                    String?
  hasCompletedOnboarding   Boolean                       @default(false)
  lastOnboardingStep       Int                           @default(0)
  onboardingCompletionDate DateTime?
  isProvider               Boolean                       @default(false)
  providerBio              String?
  providerLocationLat      Float?
  providerLocationLng      Float?
  providerAddress          String?
  providerZipCode          String?
  providerCity             String?
  providerVerified         Boolean                       @default(false)
  clientDeliveries         Delivery[]                    @relation("ClientDeliveries")
  delivererDeliveries      Delivery[]                    @relation("DelivererDeliveries")
  notifications            Notification[]
  providerAvailability     ProviderAvailability[]
  providedServices         Service[]
  clientBookings           ServiceBooking[]              @relation("ClientBookings")
  providerBookings         ServiceBooking[]              @relation("ProviderBookings")
  accounts                 Account[]
  admin                    Admin?
  announcements            Announcement[]
  deliveryAnnouncements    Announcement[]                @relation("AnnouncementDeliverer")
  performedAuditLogs       AuditLog[]                    @relation("AuditLogPerformer")
  boxSubscriptions         BoxAvailabilitySubscription[]
  boxUsageHistory          BoxUsageHistory[]
  boxes                    Box[]
  client                   Client?
  favorites                DelivererFavorite[]
  deliverer                Deliverer?
  deliveryApplications     DeliveryApplication[]
  reviewedDocuments        Document[]                    @relation("DocumentReviewer")
  documents                Document[]
  financialTasks           FinancialTask[]
  invoices                 Invoice[]
  merchant                 Merchant?
  paymentMethods           PaymentMethod[]
  payments                 Payment[]
  provider                 Provider?
  reservations             Reservation[]
  sessions                 Session[]
  subscriptions            Subscription[]
  activityLogs             UserActivityLog[]
  verificationHistory      VerificationHistory[]
  verifiedHistories        VerificationHistory[]         @relation("VerifierRelation")
  submittedVerifications   Verification[]                @relation("SubmitterRelation")
  verifications            Verification[]                @relation("VerifierRelation")
  wallet                   Wallet?
  currentStatus            DeliveryStatusEnum
  lastUpdated              DateTime                      @default(now())
  estimatedArrival         DateTime?
  actualArrival            DateTime?
  trackingEnabled          Boolean                       @default(true)
  proofOfDelivery          String?
  deliveryCode             String?
  statuses                 DeliveryStatus[]
  deliveryTracking         DeliveryTracking[]
  checkpointsCompleted     DeliveryCheckpoint[]
  etaUpdates               DeliveryETA[]
  statusUpdates            DeliveryStatusHistory[]
  reportedIssues           DeliveryIssue[]
  resolvedIssues           DeliveryIssue[]               @relation("IssueResolver")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime
  type       TokenType @default(EMAIL_VERIFICATION)
  used       Boolean   @default(false)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Client {
  id                String    @id @default(cuid())
  userId            String    @unique
  address           String?
  phone             String?
  preferences       Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  city              String?
  state             String?
  postalCode        String?
  country           String?
  preferredLanguage String?
  newsletterOptIn   Boolean   @default(false)
  notificationPrefs Json?
  avatarUrl         String?
  deliveryAddresses Address[]
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("clients")
}

model Deliverer {
  id                  String    @id @default(cuid())
  userId              String    @unique
  address             String?
  phone               String
  vehicleType         String?
  licensePlate        String?
  isVerified          Boolean   @default(false)
  availableHours      Json?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  verificationDate    DateTime?
  maxCapacity         Float?
  currentLocation     String?
  isActive            Boolean   @default(false)
  rating              Float?
  serviceZones        Json?
  bio                 String?
  yearsOfExperience   Int?
  preferredVehicle    String?
  maxWeightCapacity   Float?
  availableDays       String[]
  bankInfo            Json?
  taxIdentifier       String?
  deliveryPreferences Json?
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deliverers")
}

model Merchant {
  id               String     @id @default(cuid())
  userId           String     @unique
  companyName      String
  address          String
  phone            String
  businessType     String?
  vatNumber        String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  businessName     String?
  businessAddress  String?
  businessCity     String?
  businessState    String?
  businessPostal   String?
  businessCountry  String?
  taxId            String?
  websiteUrl       String?
  isVerified       Boolean    @default(false)
  verificationDate DateTime?
  logoUrl          String?
  coverPhotoUrl    String?
  openingHours     Json?
  description      String?
  socialLinks      Json?
  paymentMethods   String[]
  deliveryOptions  String[]
  certifications   String[]
  foundingYear     Int?
  employeeCount    Int?
  contracts        Contract[]
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("merchants")
}

model Provider {
  id                 String    @id @default(cuid())
  userId             String    @unique
  companyName        String?
  address            String
  phone              String
  services           String[]
  isVerified         Boolean   @default(false)
  rating             Float?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  serviceType        String?
  description        String?
  availability       String?
  verificationDate   DateTime?
  professionalBio    String?
  serviceRadius      Int?
  portfolioUrls      String[]
  qualifications     String[]
  yearsInBusiness    Int?
  insuranceInfo      Json?
  workSchedule       Json?
  serviceFees        Json?
  cancellationPolicy String?
  languages          String[]
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills             Skill[]

  @@map("providers")
}

model Admin {
  id               String   @id @default(cuid())
  userId           String   @unique
  permissions      String[]
  department       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Document {
  id                  String                @id @default(cuid())
  type                DocumentType
  userId              String
  filename            String
  fileUrl             String
  mimeType            String
  fileSize            Int
  uploadedAt          DateTime              @default(now())
  expiryDate          DateTime?
  notes               String?
  isVerified          Boolean               @default(false)
  verificationStatus  VerificationStatus    @default(PENDING)
  rejectionReason     String?
  reviewerId          String?
  reviewer            User?                 @relation("DocumentReviewer", fields: [reviewerId], references: [id])
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  verificationHistory VerificationHistory[]
  verifications       Verification[]

  @@index([userId])
  @@index([type])
  @@index([verificationStatus])
  @@map("documents")
}

model Verification {
  id              String             @id @default(cuid())
  status          VerificationStatus @default(PENDING)
  requestedAt     DateTime           @default(now())
  verifiedAt      DateTime?
  documentId      String
  submitterId     String
  verifierId      String?
  notes           String?
  rejectionReason String?
  document        Document           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  submitter       User               @relation("SubmitterRelation", fields: [submitterId], references: [id])
  verifier        User?              @relation("VerifierRelation", fields: [verifierId], references: [id])

  @@index([documentId])
  @@index([submitterId])
  @@index([verifierId])
  @@index([status])
  @@map("verifications")
}

model Contract {
  id         String         @id @default(cuid())
  merchantId String
  title      String
  content    String
  status     ContractStatus @default(DRAFT)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  signedAt   DateTime?
  expiresAt  DateTime?
  fileUrl    String?
  merchant   Merchant       @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@index([merchantId])
  @@index([status])
  @@map("contracts")
}

model Skill {
  id          String   @id @default(cuid())
  providerId  String
  name        String
  description String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  provider    Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@map("skills")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  link      String?
  data      String?
  read      Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
}

model VerificationHistory {
  id            String             @id @default(cuid())
  status        VerificationStatus
  comment       String?
  createdAt     DateTime           @default(now())
  documentId    String?
  userId        String
  verifiedById  String
  reason        String?
  internalNotes String?
  document      Document?          @relation(fields: [documentId], references: [id])
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifiedBy    User               @relation("VerifierRelation", fields: [verifiedById], references: [id])

  @@index([documentId])
  @@index([userId])
  @@index([verifiedById])
  @@map("verification_history")
}

model Warehouse {
  id             String   @id @default(cuid())
  name           String
  location       String
  address        String
  capacity       Float
  occupied       Float    @default(0)
  description    String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  latitude       Float?
  longitude      Float?
  openingHours   Json?
  contactPhone   String?
  contactEmail   String?
  imageUrl       String?
  availableBoxes Int      @default(0)
  reservedBoxes  Int      @default(0)
  boxes          Box[]

  @@map("warehouses")
}

model Box {
  id                  String                        @id @default(cuid())
  warehouseId         String
  name                String
  size                Float
  boxType             BoxType                       @default(STANDARD)
  isOccupied          Boolean                       @default(false)
  clientId            String?
  pricePerDay         Float
  description         String?
  locationDescription String?
  floorLevel          Int                           @default(0)
  maxWeight           Float?
  dimensions          Json?
  features            String[]
  status              BoxStatus                     @default(AVAILABLE)
  lastInspectedAt     DateTime?
  createdAt           DateTime                      @default(now())
  updatedAt           DateTime                      @updatedAt
  subscriptions       BoxAvailabilitySubscription[]
  usageHistory        BoxUsageHistory[]
  client              User?                         @relation(fields: [clientId], references: [id])
  warehouse           Warehouse                     @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  reservations        Reservation[]

  @@index([warehouseId])
  @@index([clientId])
  @@index([status])
  @@map("boxes")
}

model Reservation {
  id              String            @id @default(cuid())
  boxId           String
  clientId        String
  startDate       DateTime
  endDate         DateTime
  status          ReservationStatus @default(ACTIVE)
  totalPrice      Float
  paymentStatus   PaymentStatus     @default(PENDING)
  paymentId       String?
  accessCode      String?
  lastAccessed    DateTime?
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  cancelledAt     DateTime?
  cancelReason    String?
  extendedCount   Int               @default(0)
  originalEndDate DateTime?
  usageHistory    BoxUsageHistory[]
  box             Box               @relation(fields: [boxId], references: [id], onDelete: Cascade)
  client          User              @relation(fields: [clientId], references: [id])

  @@index([boxId])
  @@index([clientId])
  @@index([status])
  @@map("reservations")
}

model BoxUsageHistory {
  id            String        @id @default(cuid())
  boxId         String
  reservationId String?
  clientId      String
  actionType    BoxActionType
  actionTime    DateTime      @default(now())
  details       String?
  ipAddress     String?
  deviceInfo    String?
  box           Box           @relation(fields: [boxId], references: [id], onDelete: Cascade)
  client        User          @relation(fields: [clientId], references: [id])
  reservation   Reservation?  @relation(fields: [reservationId], references: [id])

  @@index([boxId])
  @@index([reservationId])
  @@index([clientId])
  @@map("box_usage_history")
}

model BoxAvailabilitySubscription {
  id                      String    @id @default(cuid())
  boxId                   String
  clientId                String
  startDate               DateTime?
  endDate                 DateTime?
  minSize                 Float?
  maxPrice                Float?
  boxType                 BoxType?
  warehouseId             String?
  isActive                Boolean   @default(true)
  notificationPreferences Json?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  lastNotified            DateTime?
  box                     Box       @relation(fields: [boxId], references: [id], onDelete: Cascade)
  client                  User      @relation(fields: [clientId], references: [id])

  @@index([boxId])
  @@index([clientId])
  @@map("box_availability_subscriptions")
}

model UserActivityLog {
  id           String       @id @default(cuid())
  userId       String
  activityType ActivityType
  details      String?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activity_logs")
}

model AuditLog {
  id            String   @id @default(cuid())
  entityType    String
  entityId      String
  action        String
  performedById String
  changes       Json?
  createdAt     DateTime @default(now())
  performedBy   User     @relation("AuditLogPerformer", fields: [performedById], references: [id])

  @@map("audit_logs")
}

model Announcement {
  id                  String                @id @default(cuid())
  title               String
  description         String
  type                AnnouncementType
  status              AnnouncementStatus    @default(PENDING)
  priority            AnnouncementPriority  @default(MEDIUM)
  pickupAddress       String
  pickupLongitude     Float?
  pickupLatitude      Float?
  deliveryAddress     String
  deliveryLongitude   Float?
  deliveryLatitude    Float?
  weight              Float?
  width               Float?
  height              Float?
  length              Float?
  isFragile           Boolean               @default(false)
  needsCooling        Boolean               @default(false)
  pickupDate          DateTime?
  pickupTimeWindow    String?
  deliveryDate        DateTime?
  deliveryTimeWindow  String?
  isFlexible          Boolean               @default(false)
  suggestedPrice      Float?
  finalPrice          Float?
  isNegotiable        Boolean               @default(true)
  paymentStatus       String?
  clientId            String
  delivererId         String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  viewCount           Int                   @default(0)
  applicationsCount   Int                   @default(0)
  cancelReason        String?
  notes               String?
  tags                String[]
  photos              String[]              @default([])
  estimatedDistance   Float?
  estimatedDuration   Int?
  requiresSignature   Boolean               @default(false)
  requiresId          Boolean               @default(false)
  specialInstructions String?
  isFavorite          Boolean               @default(false)
  client              User                  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  deliverer           User?                 @relation("AnnouncementDeliverer", fields: [delivererId], references: [id])
  favorites           DelivererFavorite[]
  applications        DeliveryApplication[]

  @@map("announcements")
}

model DeliveryApplication {
  id                    String       @id @default(cuid())
  announcementId        String
  delivererId           String
  proposedPrice         Float?
  message               String?
  status                String       @default("PENDING")
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  estimatedPickupTime   DateTime?
  estimatedDeliveryTime DateTime?
  isPreferred           Boolean      @default(false)
  notes                 String?
  announcement          Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  deliverer             User         @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  @@map("delivery_applications")
}

model Service {
  id          String           @id @default(cuid())
  name        String
  description String
  price       Decimal
  duration    Int
  categoryId  String
  providerId  String
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    ServiceCategory  @relation(fields: [categoryId], references: [id])
  provider    User             @relation(fields: [providerId], references: [id])
  bookings    ServiceBooking[]
  payments    Payment[]

  @@index([providerId])
  @@index([categoryId])
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]
}

model ProviderAvailability {
  id         String   @id @default(cuid())
  providerId String
  dayOfWeek  Int
  startTime  DateTime
  endTime    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  provider   User     @relation(fields: [providerId], references: [id])

  @@index([providerId])
}

model ServiceBooking {
  id         String         @id @default(cuid())
  clientId   String
  providerId String
  serviceId  String
  startTime  DateTime
  endTime    DateTime
  status     BookingStatus  @default(PENDING)
  totalPrice Decimal
  paymentId  String?
  notes      String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  client     User           @relation("ClientBookings", fields: [clientId], references: [id])
  payment    Payment?       @relation(fields: [paymentId], references: [id])
  provider   User           @relation("ProviderBookings", fields: [providerId], references: [id])
  service    Service        @relation(fields: [serviceId], references: [id])
  review     ServiceReview?

  @@index([clientId])
  @@index([providerId])
  @@index([serviceId])
  @@index([paymentId])
}

model ServiceReview {
  id        String         @id @default(cuid())
  bookingId String         @unique
  rating    Int
  comment   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  booking   ServiceBooking @relation(fields: [bookingId], references: [id])
}

model Payment {
  id                 String           @id @default(cuid())
  amount             Decimal
  currency           String
  status             PaymentStatus
  description        String?
  userId             String
  isEscrow           Boolean          @default(false)
  escrowReleaseCode  String?
  escrowReleaseDate  DateTime?
  escrowReleasedAt   DateTime?
  stripePaymentId    String?
  paymentIntentId    String?
  deliveryId         String?          @unique
  serviceId          String?
  subscriptionId     String?
  invoiceId          String?
  commissionAmount   Decimal?
  commissionId       String?
  refundId           String?
  refundedAmount     Decimal?
  refundedAt         DateTime?
  disputeId          String?
  disputeStatus      String?
  metadata           Json?
  capturedAt         DateTime?
  paymentMethodType  String?
  paymentMethodId    String?
  receiptUrl         String?
  errorMessage       String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  source             String?
  notes              String?
  paymentProvider    String           @default("STRIPE")
  isRecurring        Boolean          @default(false)
  recurringFrequency String?
  processingFee      Decimal?
  taxAmount          Decimal?
  taxRate            Decimal?
  paymentReference   String?
  ipAddress          String?
  bookings           ServiceBooking[]
  commission         Commission?      @relation(fields: [commissionId], references: [id])
  delivery           Delivery?        @relation("PaymentToDelivery", fields: [deliveryId], references: [id])
  invoice            Invoice?         @relation(fields: [invoiceId], references: [id])
  service            Service?         @relation(fields: [serviceId], references: [id])
  subscription       Subscription?    @relation(fields: [subscriptionId], references: [id])
  user               User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([deliveryId])
  @@index([serviceId])
  @@index([subscriptionId])
  @@index([invoiceId])
  @@index([commissionId])
  @@map("payments")
}

model DelivererFavorite {
  id             String       @id @default(cuid())
  delivererId    String
  announcementId String
  createdAt      DateTime     @default(now())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  deliverer      User         @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  @@unique([delivererId, announcementId])
  @@map("deliverer_favorites")
}

model Wallet {
  id                      String              @id @default(cuid())
  userId                  String              @unique
  balance                 Decimal             @default(0)
  currency                String              @default("EUR")
  isActive                Boolean             @default(true)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  lastTransactionAt       DateTime?
  accountVerified         Boolean             @default(false)
  accountType             String?
  minimumWithdrawalAmount Decimal             @default(10)
  automaticWithdrawal     Boolean             @default(false)
  withdrawalThreshold     Decimal?
  withdrawalDay           Int?
  totalEarned             Decimal?
  totalWithdrawn          Decimal?
  earningsLastMonth       Decimal?
  earningsThisMonth       Decimal?
  encryptedBankInfo       String?
  fiscalCategory          String?
  lastWithdrawalAt        DateTime?
  notificationThreshold   Decimal?
  notificationsEnabled    Boolean             @default(true)
  stripeConnectAccountId  String?
  stripeCustomerId        String?
  taxIdentifier           String?
  taxReportingEnabled     Boolean             @default(false)
  transactions            WalletTransaction[]
  user                    User                @relation(fields: [userId], references: [id])
  withdrawalRequests      WithdrawalRequest[]

  @@map("wallets")
}

model WalletTransaction {
  id                String            @id @default(cuid())
  walletId          String
  amount            Decimal
  currency          String
  type              TransactionType
  status            TransactionStatus @default(PENDING)
  description       String?
  reference         String?
  stripeTransferId  String?
  metadata          Json?
  createdAt         DateTime          @default(now())
  balanceAfter      Decimal?
  commissionRate    Decimal?
  completedAt       DateTime?
  deliveryId        String?
  failedAt          DateTime?
  failureReason     String?
  isSystemGenerated Boolean           @default(false)
  paymentId         String?
  previousBalance   Decimal?
  reportingCategory String?
  serviceId         String?
  sourceTransaction String?
  taxAmount         Decimal?
  taxRate           Decimal?
  updatedAt         DateTime          @updatedAt
  withdrawalId      String?
  wallet            Wallet            @relation(fields: [walletId], references: [id])

  @@index([walletId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("wallet_transactions")
}

model BankTransfer {
  id                    String             @id @default(cuid())
  amount                Decimal
  currency              String
  withdrawalRequestId   String?            @unique
  recipientName         String
  bankName              String?
  reference             String?
  initiatedAt           DateTime
  completedAt           DateTime?
  failedAt              DateTime?
  failureReason         String?
  notes                 String?
  metadata              Json?
  createdBy             String?
  endorsedBy            String?
  estimatedArrivalDate  DateTime?
  externalReference     String?
  isRecipientVerified   Boolean            @default(false)
  isSenderVerified      Boolean            @default(true)
  platformTransactionId String?
  recipientBic          String?
  recipientIban         String
  senderIban            String?
  senderName            String?
  transferFee           Decimal?
  transferMethod        String             @default("SEPA")
  transferProofUrl      String?
  transferReference     String?
  status                TransactionStatus
  withdrawalRequest     WithdrawalRequest? @relation(fields: [withdrawalRequestId], references: [id])

  @@map("bank_transfers")
}

model WithdrawalRequest {
  id                  String           @id @default(cuid())
  walletId            String
  amount              Decimal
  currency            String
  status              WithdrawalStatus @default(PENDING)
  requestedAt         DateTime         @default(now())
  processedAt         DateTime?
  rejectionReason     String?
  preferredMethod     String?
  reference           String?
  accountVerified     Boolean          @default(true)
  estimatedArrival    DateTime?
  estimatedFee        Decimal?
  expedited           Boolean          @default(false)
  lastNotificationAt  DateTime?
  priority            Int              @default(0)
  processorComments   String?
  processorId         String?
  reviewRequired      Boolean          @default(false)
  supportingDocuments String[]
  taxWithheld         Decimal?
  bankTransfer        BankTransfer?
  wallet              Wallet           @relation(fields: [walletId], references: [id])

  @@index([walletId])
  @@index([status])
  @@index([requestedAt])
  @@map("withdrawal_requests")
}

model Subscription {
  id                     String             @id @default(cuid())
  userId                 String
  status                 SubscriptionStatus
  planType               PlanType
  stripeSubscriptionId   String?
  startDate              DateTime
  endDate                DateTime?
  autoRenew              Boolean            @default(true)
  cancelAtPeriodEnd      Boolean            @default(false)
  cancelledAt            DateTime?
  currentPeriodStart     DateTime?
  currentPeriodEnd       DateTime?
  discountPercent        Decimal?
  previousPlanType       PlanType?
  billingCycleAnchor     Int?
  couponApplied          String?
  createdAt              DateTime           @default(now())
  currency               String             @default("EUR")
  customPlanFeatures     Json?
  discountAmount         Decimal?
  discountDuration       String?
  discountDurationMonths Int?
  downgradedAt           DateTime?
  gracePeriodEnd         DateTime?
  lastPaymentFailure     DateTime?
  metadata               Json?
  nextInvoiceDate        DateTime?
  pausedAt               DateTime?
  paymentFailureCount    Int                @default(0)
  price                  Decimal?
  resumeAt               DateTime?
  trialEnd               DateTime?
  trialStart             DateTime?
  updatedAt              DateTime           @updatedAt
  upgradedAt             DateTime?
  payments               Payment[]
  user                   User               @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@map("subscriptions")
}

model PaymentMethod {
  id               String    @id @default(cuid())
  userId           String
  type             String
  isDefault        Boolean   @default(false)
  brand            String?
  last4            String?
  expiryMonth      Int?
  expiryYear       Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  billingAddress   String?
  billingCity      String?
  billingCountry   String?
  billingEmail     String?
  billingName      String?
  billingPostal    String?
  billingState     String?
  deletedAt        DateTime?
  fingerprint      String?
  isDeleted        Boolean   @default(false)
  mandateCreatedAt DateTime?
  mandateId        String?
  mandateStatus    String?
  provider         String    @default("STRIPE")
  token            String
  user             User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isDefault])
  @@map("payment_methods")
}

model Invoice {
  id                 String        @id @default(cuid())
  userId             String
  amount             Decimal
  currency           String        @default("EUR")
  status             InvoiceStatus
  dueDate            DateTime
  paidDate           DateTime?
  pdfUrl             String?
  billingPeriodStart DateTime?
  billingPeriodEnd   DateTime?
  paymentTerms       String?
  notes              String?
  companyName        String?
  billingAddress     String?
  billingCity        String?
  billingCountry     String?
  billingName        String?
  billingPostal      String?
  billingState       String?
  createdAt          DateTime      @default(now())
  description        String?
  emailSentAt        DateTime?
  invoiceNumber      String        @unique
  invoiceType        String        @default("SERVICE")
  isCreditNote       Boolean       @default(false)
  issueDate          DateTime
  locale             String        @default("fr")
  merchantId         String?
  originalInvoiceId  String?
  providerId         String?
  refundReason       String?
  reminderSentAt     DateTime?
  remoteStorageUrl   String?
  serviceDescription String?
  taxAmount          Decimal?
  taxId              String?
  taxRate            Decimal?
  termsAndConditions String?
  totalAmount        Decimal
  updatedAt          DateTime      @updatedAt
  items              InvoiceItem[]
  user               User          @relation(fields: [userId], references: [id])
  payments           Payment[]

  @@index([userId])
  @@index([status])
  @@index([issueDate])
  @@map("invoices")
}

model InvoiceItem {
  id          String    @id @default(cuid())
  invoiceId   String
  description String
  quantity    Decimal
  unitPrice   Decimal
  taxRate     Decimal?
  taxAmount   Decimal?
  serviceId   String?
  deliveryId  String?
  discount    Decimal?
  amount      Decimal
  createdAt   DateTime  @default(now())
  itemCode    String?
  metadata    Json?
  periodEnd   DateTime?
  periodStart DateTime?
  updatedAt   DateTime  @updatedAt
  invoice     Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@map("invoice_items")
}

model PromotionRecord {
  id          String   @id @default(cuid())
  type        String
  serviceType String?
  rate        Decimal
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  description String?
  createdAt   DateTime @default(now())

  @@map("promotion_records")
}

model Commission {
  id              String    @id @default(cuid())
  rate            Decimal
  promotionId     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  applicableRoles String[]
  calculationType String    @default("PERCENTAGE")
  countryCode     String?
  currency        String    @default("EUR")
  description     String?
  endDate         DateTime?
  flatFee         Decimal?
  isActive        Boolean   @default(true)
  maximumAmount   Decimal?
  minimumAmount   Decimal?
  payoutSchedule  String?   @default("IMMEDIATE")
  productCategory String?
  serviceType     String
  startDate       DateTime?
  tierThresholds  Json?
  payments        Payment[]

  @@index([serviceType])
  @@index([isActive])
  @@map("commissions")
}

model BillingCycle {
  id               String    @id @default(cuid())
  merchantId       String?
  providerId       String?
  periodStart      DateTime
  periodEnd        DateTime
  status           String    @default("PENDING")
  invoiceId        String?
  totalAmount      Decimal?
  serviceFees      Decimal?
  commissionFees   Decimal?
  processingFees   Decimal?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  scheduledRunDate DateTime
  serviceSummary   Json?
  lastRunAt        DateTime?
  errorMessage     String?
  retryCount       Int       @default(0)

  @@index([periodStart, periodEnd])
  @@index([status])
  @@map("billing_cycles")
}

model FinancialAccount {
  id                 String    @id @default(cuid())
  name               String
  accountType        String
  balance            Decimal   @default(0)
  currency           String    @default("EUR")
  description        String?
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  reconciliationDate DateTime?
  bankAccount        String?
  accountNumber      String?
  notes              String?

  @@map("financial_accounts")
}

model TaxRate {
  id          String    @id @default(cuid())
  name        String
  rate        Decimal
  countryCode String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  taxType     String    @default("VAT")
  region      String?
  startDate   DateTime?
  endDate     DateTime?

  @@index([countryCode])
  @@index([isActive])
  @@map("tax_rates")
}

model FinancialReport {
  id               String   @id @default(cuid())
  data             Json?
  totalRevenue     Decimal?
  totalCommissions Decimal?
  status           String   @default("DRAFT")
  generatedAt      DateTime @default(now())
  fileUrl          String?
  generatedBy      String?
  netRevenue       Decimal?
  notes            String?
  periodEnd        DateTime
  periodStart      DateTime
  reportType       String
  totalFees        Decimal?

  @@index([reportType])
  @@index([periodStart, periodEnd])
  @@map("financial_reports")
}

model FinancialTask {
  id          String                @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean               @default(false)
  completedAt DateTime?
  priority    FinancialTaskPriority
  category    FinancialTaskCategory
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  userId      String
  user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([priority])
  @@index([category])
  @@index([completed])
  @@map("financial_tasks")
}

model Delivery {
  id                 String                @id @default(cuid())
  status             DeliveryStatus        @default(PENDING)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  pickupAddress      String
  deliveryAddress    String
  pickupDate         DateTime
  deliveryDate       DateTime?
  currentLat         Float?
  currentLng         Float?
  lastLocationUpdate DateTime?
  estimatedArrival   DateTime?
  confirmationCode   String?
  clientId           String
  delivererId        String?
  client             User                  @relation("ClientDeliveries", fields: [clientId], references: [id])
  deliverer          User?                 @relation("DelivererDeliveries", fields: [delivererId], references: [id])
  coordinates        DeliveryCoordinates[]
  logs               DeliveryLog[]
  proofs             DeliveryProof[]
  rating             DeliveryRating?
  payment            Payment?              @relation("PaymentToDelivery")
  currentStatus      DeliveryStatusEnum
  estimatedArrival   DateTime?
  actualArrival      DateTime?
  trackingEnabled    Boolean             @default(true)
  proofOfDelivery    String?
  deliveryCode       String?
  statuses           DeliveryStatus[]
  tracking           DeliveryTracking[]
  trackingPositions  DeliveryTrackingPosition[]
  checkpoints        DeliveryCheckpoint[]
  eta                DeliveryETA?
  statusHistory      DeliveryStatusHistory[]
  issues             DeliveryIssue[]

  @@index([clientId])
  @@index([delivererId])
}

model DeliveryLog {
  id         String         @id @default(cuid())
  deliveryId String
  status     DeliveryStatus
  timestamp  DateTime       @default(now())
  note       String?
  latitude   Float?
  longitude  Float?
  delivery   Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
}

model DeliveryCoordinates {
  id         String   @id @default(cuid())
  deliveryId String
  latitude   Float
  longitude  Float
  timestamp  DateTime @default(now())
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
}

model DeliveryProof {
  id          String   @id @default(cuid())
  deliveryId  String
  type        String
  url         String?
  confirmedBy String?
  confirmedAt DateTime @default(now())
  delivery    Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
}

model DeliveryRating {
  id         String   @id @default(cuid())
  deliveryId String   @unique
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
}

model Address {
  id         String  @id @default(cuid())
  label      String
  street     String
  city       String
  state      String?
  postalCode String
  country    String
  isDefault  Boolean @default(false)
  clientId   String
  client     Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model DeliveryStatus {
  id            String    @id @default(cuid())
  deliveryId    String
  status        DeliveryStatusEnum
  notes         String?
  location      Json?     // Format GeoJSON {type: "Point", coordinates: [longitude, latitude]}
  accuracy      Float?    // Précision en mètres
  timestamp     DateTime  @default(now())
  updatedById   String
  updatedBy     User      @relation(fields: [updatedById], references: [id])
  delivery      Delivery  @relation(fields: [deliveryId], references: [id])

  @@index([deliveryId, timestamp])
}

model DeliveryTracking {
  id             String    @id @default(cuid())
  deliveryId     String
  delivery       Delivery  @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  delivererId    String
  deliverer      User      @relation(fields: [delivererId], references: [id])
  isActive       Boolean   @default(true)
  startedAt      DateTime  @default(now())
  endedAt        DateTime?
  lastUpdatedAt  DateTime  @updatedAt
  batteryLevel   Int?      // Niveau de batterie du livreur en pourcentage
  networkType    String?   // Type de connexion réseau (4G, WiFi, etc.)
  
  @@index([deliveryId])
  @@index([delivererId])
  @@index([isActive])
  @@map("delivery_tracking")
}

model DeliveryTrackingPosition {
  id              String    @id @default(cuid())
  deliveryId      String
  delivery        Delivery  @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  timestamp       DateTime  @default(now())
  location        Json      // Format GeoJSON {type: "Point", coordinates: [longitude, latitude]}
  accuracy        Float?    // Précision en mètres
  heading         Float?    // Direction en degrés (0-360)
  speed           Float?    // Vitesse en km/h
  altitude        Float?    // Altitude en mètres
  isSynced        Boolean   @default(true)  // Indique si la position a été synchronisée depuis le mode hors ligne
  syncedAt        DateTime? // Date de synchronisation si initialement hors ligne
  metadata        Json?     // Données additionnelles (conditions météo, trafic, etc.)

  @@index([deliveryId, timestamp])
  @@map("delivery_tracking_positions")
}

model DeliveryCheckpoint {
  id             String           @id @default(cuid())
  deliveryId     String
  delivery       Delivery         @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  type           CheckpointType
  location       Json             // Format GeoJSON {type: "Point", coordinates: [longitude, latitude]}
  address        String
  name           String?          // Nom du point de passage (ex: "Entrepôt Nord")
  plannedTime    DateTime?        // Heure prévue
  actualTime     DateTime?        // Heure réelle de passage
  completedBy    String?
  completedByUser User?           @relation(fields: [completedBy], references: [id])
  notes          String?
  photoProofUrl  String?          // URL vers une photo de preuve si nécessaire
  signatureProofUrl String?       // URL vers une signature si nécessaire
  confirmationCode String?        // Code de confirmation utilisé
  metadata       Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([deliveryId])
  @@index([type])
  @@map("delivery_checkpoints")
}

model DeliveryETA {
  id              String    @id @default(cuid())
  deliveryId      String    @unique
  delivery        Delivery  @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  estimatedTime   DateTime
  previousEstimate DateTime?
  calculatedAt    DateTime  @default(now())
  calculationType String    @default("REAL_TIME") // REAL_TIME, HISTORICAL, MANUAL
  distanceRemaining Float?  // En kilomètres
  trafficCondition String?  // LIGHT, MODERATE, HEAVY
  confidence      Float?    // Score de confiance (0-1)
  notifiedAt      DateTime?
  updatedById     String?
  updatedByUser   User?     @relation(fields: [updatedById], references: [id])
  metadata        Json?

  @@index([deliveryId])
  @@index([estimatedTime])
  @@map("delivery_eta")
}

model DeliveryStatusHistory {
  id            String              @id @default(cuid())
  deliveryId    String
  delivery      Delivery            @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  status        DeliveryStatusEnum
  previousStatus DeliveryStatusEnum?
  timestamp     DateTime            @default(now())
  updatedById   String
  updatedBy     User                @relation(fields: [updatedById], references: [id])
  location      Json?               // Format GeoJSON {type: "Point", coordinates: [longitude, latitude]}
  notes         String?
  reason        String?             // Raison du changement, surtout pour retards/annulations
  customerNotified Boolean          @default(false)
  notificationSentAt DateTime?
  metadata      Json?

  @@index([deliveryId, timestamp])
  @@index([deliveryId, status])
  @@map("delivery_status_history")
}

model DeliveryIssue {
  id            String           @id @default(cuid())
  deliveryId    String
  delivery      Delivery         @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  type          DeliveryIssueType
  reportedById  String
  reportedBy    User             @relation(fields: [reportedById], references: [id])
  reportedAt    DateTime         @default(now())
  description   String
  severity      IssueSeverity    @default(MEDIUM)
  status        IssueStatus      @default(OPEN)
  resolvedAt    DateTime?
  resolvedById  String?
  resolvedBy    User?            @relation("IssueResolver", fields: [resolvedById], references: [id])
  resolution    String?
  photoUrls     String[]
  location      Json?            // Format GeoJSON
  metadata      Json?

  @@index([deliveryId])
  @@index([type])
  @@index([status])
  @@map("delivery_issues")
}

enum UserRole {
  CLIENT
  DELIVERER
  MERCHANT
  PROVIDER
  ADMIN
}

enum UserStatus {
  PENDING_VERIFICATION
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocumentType {
  ID_CARD
  DRIVING_LICENSE
  VEHICLE_REGISTRATION
  INSURANCE
  QUALIFICATION_CERTIFICATE
  PROOF_OF_ADDRESS
  BUSINESS_REGISTRATION
  OTHER
  SELFIE
}

enum ContractStatus {
  DRAFT
  PENDING_SIGNATURE
  ACTIVE
  TERMINATED
  EXPIRED
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR_AUTH
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum ActivityType {
  LOGIN
  LOGOUT
  PROFILE_UPDATE
  PASSWORD_CHANGE
  STATUS_CHANGE
  ROLE_CHANGE
  VERIFICATION_SUBMIT
  VERIFICATION_REVIEW
  DOCUMENT_UPLOAD
  ACCOUNT_CREATION
  OTHER
}

enum AnnouncementStatus {
  DRAFT
  PUBLISHED
  IN_APPLICATION
  ASSIGNED
  IN_PROGRESS
  DELIVERED
  COMPLETED
  PAID
  PROBLEM
  DISPUTE
  CANCELLED
}

enum AnnouncementType {
  PACKAGE_DELIVERY
  GROCERY_SHOPPING
  PERSON_TRANSPORT
  AIRPORT_TRANSFER
  FOREIGN_PURCHASE
  PET_CARE
  HOME_SERVICES
}

enum AnnouncementPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum PaymentStatus {
  PENDING
  BLOCKED
  COMPLETED
  REFUNDED
  FAILED
}

enum DeliveryStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  CONFIRMED
  PROBLEM
  CANCELLED
}

enum BoxType {
  STANDARD
  CLIMATE_CONTROLLED
  SECURE
  EXTRA_LARGE
  REFRIGERATED
  FRAGILE
}

enum BoxStatus {
  AVAILABLE
  RESERVED
  OCCUPIED
  MAINTENANCE
  DAMAGED
  INACTIVE
}

enum BoxActionType {
  RESERVATION_CREATED
  RESERVATION_UPDATED
  RESERVATION_CANCELLED
  BOX_ACCESSED
  BOX_CLOSED
  PAYMENT_PROCESSED
  EXTENDED_RENTAL
  INSPECTION_COMPLETED
}

enum ReservationStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  OVERDUE
  EXTENDED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  EARNING
  REFUND
  PLATFORM_FEE
  COMMISSION
  BONUS
  ADJUSTMENT
  TAX
  SERVICE_FEE
  DELIVERY_PAYOUT
  SERVICE_PAYOUT
  SUBSCRIPTION_PAYMENT
  MONTHLY_FEE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  DISPUTED
  REFUNDED
  PROCESSING
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REJECTED
  SCHEDULED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAUSED
  PAST_DUE
  PENDING
  TRIALING
  INCOMPLETE
  UNPAID
}

enum PlanType {
  FREE
  STARTER
  PREMIUM
  CUSTOM
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  SENT
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
  PARTIALLY_PAID
}

enum FinancialTaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum FinancialTaskCategory {
  PAYMENT
  INVOICE
  WITHDRAWAL
  OTHER
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum AddressType {
  PICKUP
  DELIVERY
  WAYPOINT
}

enum PackageType {
  STANDARD
  FRAGILE
  REFRIGERATED
  OVERSIZED
  DOCUMENTS
  FOOD
  ELECTRONICS
}

enum DeliveryStatusEnum {
  CREATED
  ASSIGNED
  PENDING_PICKUP
  PICKED_UP
  IN_TRANSIT
  NEARBY
  ARRIVED
  ATTEMPT_DELIVERY
  DELIVERED
  NOT_DELIVERED
  RESCHEDULED
  RETURNED
  CANCELLED
}

enum CheckpointType {
  DEPARTURE          // Point de départ
  PICKUP             // Récupération du colis
  WAYPOINT           // Point de passage intermédiaire
  DELIVERY_ATTEMPT   // Tentative de livraison
  DELIVERY           // Livraison réussie
  RETURN_POINT       // Point de retour (en cas d'échec)
  WAREHOUSE          // Entrepôt
  CUSTOMS            // Douanes
  HANDOFF            // Transfert à un autre livreur
  OTHER              // Autre
}

enum DeliveryIssueType {
  ACCESS_PROBLEM     // Problème d'accès
  ADDRESS_NOT_FOUND  // Adresse introuvable
  CUSTOMER_ABSENT    // Client absent
  DAMAGED_PACKAGE    // Colis endommagé
  DELIVERY_REFUSED   // Livraison refusée
  VEHICLE_BREAKDOWN  // Panne du véhicule
  TRAFFIC_JAM        // Embouteillage
  WEATHER_CONDITION  // Conditions météorologiques
  SECURITY_ISSUE     // Problème de sécurité
  OTHER              // Autre
}

enum IssueSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  ESCALATED
  CLOSED
}
