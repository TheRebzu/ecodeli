generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                @id @default(cuid())
  name                   String
  email                  String                @unique
  emailVerified          DateTime?
  password               String
  image                  String?
  role                   UserRole
  status                 UserStatus            @default(PENDING_VERIFICATION)
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  phoneNumber            String?
  lastLoginAt            DateTime?
  twoFactorEnabled       Boolean               @default(false)
  twoFactorSecret        String?
  locale                 String?
  preferences            Json?
  isVerified             Boolean               @default(false)
  lastPasswordChange     DateTime?
  lockedUntil            DateTime?
  loginAttempts          Int                   @default(0)
  notes                  String?
  hasCompletedOnboarding Boolean               @default(false)
  lastOnboardingStep     Int                   @default(0)
  onboardingCompletionDate DateTime?
  verificationToken      String?               // Token pour la vérification d'email
  verificationTokenExpires DateTime?           // Date d'expiration du token de vérification
  resetToken             String?               // Token pour la réinitialisation de mot de passe
  resetTokenExpires      DateTime?             // Date d'expiration du token de réinitialisation
  notifications          Notification[]
  accounts               Account[]
  admin                  Admin?
  announcements          Announcement[]
  deliveryAnnouncements  Announcement[]        @relation("AnnouncementDeliverer")
  performedAuditLogs     AuditLog[]            @relation("AuditLogPerformer")
  boxes                  Box[]
  client                 Client?
  deliverer              Deliverer?
  deliveryApplications   DeliveryApplication[]
  reviewedDocuments      Document[]            @relation("DocumentReviewer")
  documents              Document[]
  merchant               Merchant?
  provider               Provider?
  reservations           Reservation[]
  sessions               Session[]
  activityLogs           UserActivityLog[]
  verificationHistory    VerificationHistory[]
  verifiedHistories      VerificationHistory[] @relation("VerifierRelation")
  submittedVerifications Verification[]        @relation("SubmitterRelation")
  verifications          Verification[]        @relation("VerifierRelation")
  providedServices       Service[]
  providerAvailability   ProviderAvailability[]
  clientBookings         ServiceBooking[]      @relation("ClientBookings")
  providerBookings       ServiceBooking[]      @relation("ProviderBookings")
  isProvider             Boolean               @default(false)
  providerBio            String?
  providerLocationLat    Float?
  providerLocationLng    Float?
  providerAddress        String?
  providerZipCode        String?
  providerCity           String?
  providerVerified       Boolean               @default(false)
  favorites              DelivererFavorite[]   // Relation avec les favoris
  clientDeliveries       Delivery[]            @relation("ClientDeliveries")
  delivererDeliveries    Delivery[]            @relation("DelivererDeliveries")
  boxUsageHistory        BoxUsageHistory[]    // Historique d'utilisation des box par le client
  boxSubscriptions       BoxAvailabilitySubscription[] // Abonnements aux notifications de disponibilité

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime
  type       TokenType @default(EMAIL_VERIFICATION)
  used       Boolean   @default(false)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Client {
  id          String   @id @default(cuid())
  userId      String   @unique
  address     String?
  phone       String?
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  city        String?
  state       String?
  postalCode  String?
  country     String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("clients")
}

model Deliverer {
  id               String    @id @default(cuid())
  userId           String    @unique
  address          String?
  phone            String
  vehicleType      String?
  licensePlate     String?
  isVerified       Boolean   @default(false)
  availableHours   Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  verificationDate DateTime?
  maxCapacity      Float?
  currentLocation  String?
  isActive         Boolean   @default(false)
  rating           Float?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deliverers")
}

model Merchant {
  id               String     @id @default(cuid())
  userId           String     @unique
  companyName      String
  address          String
  phone            String
  businessType     String?
  vatNumber        String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  businessName     String?
  businessAddress  String?
  businessCity     String?
  businessState    String?
  businessPostal   String?
  businessCountry  String?
  taxId            String?
  websiteUrl       String?
  isVerified       Boolean    @default(false)
  verificationDate DateTime?
  contracts        Contract[]
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("merchants")
}

model Provider {
  id               String    @id @default(cuid())
  userId           String    @unique
  companyName      String?
  address          String
  phone            String
  services         String[]
  isVerified       Boolean   @default(false)
  rating           Float?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  serviceType      String?
  description      String?
  availability     String?
  verificationDate DateTime?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills           Skill[]

  @@map("providers")
}

model Admin {
  id               String   @id @default(cuid())
  userId           String   @unique
  permissions      String[]
  department       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Document {
  id                  String                @id @default(cuid())
  type                DocumentType
  userId              String
  filename            String
  fileUrl             String
  mimeType            String
  fileSize            Int
  uploadedAt          DateTime              @default(now())
  expiryDate          DateTime?
  notes               String?
  isVerified          Boolean               @default(false)
  verificationStatus  VerificationStatus    @default(PENDING)
  rejectionReason     String?
  reviewerId          String?
  reviewer            User?                 @relation("DocumentReviewer", fields: [reviewerId], references: [id])
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  verificationHistory VerificationHistory[]
  verifications       Verification[]

  @@index([userId])
  @@index([type])
  @@index([verificationStatus])
  @@map("documents")
}

model Verification {
  id              String             @id @default(cuid())
  status          VerificationStatus @default(PENDING)
  requestedAt     DateTime           @default(now())
  verifiedAt      DateTime?
  documentId      String
  submitterId     String
  verifierId      String?
  notes           String?
  rejectionReason String?
  document        Document           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  submitter       User               @relation("SubmitterRelation", fields: [submitterId], references: [id])
  verifier        User?              @relation("VerifierRelation", fields: [verifierId], references: [id])

  @@index([documentId])
  @@index([submitterId])
  @@index([verifierId])
  @@index([status])
  @@map("verifications")
}

model Contract {
  id         String         @id @default(cuid())
  merchantId String
  title      String
  content    String
  status     ContractStatus @default(DRAFT)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  signedAt   DateTime?
  expiresAt  DateTime?
  fileUrl    String?
  merchant   Merchant       @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@index([merchantId])
  @@index([status])
  @@map("contracts")
}

model Skill {
  id          String   @id @default(cuid())
  providerId  String
  name        String
  description String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  provider    Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@map("skills")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  link      String?
  data      String?
  read      Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
}

model VerificationHistory {
  id            String             @id @default(cuid())
  status        VerificationStatus
  comment       String?
  createdAt     DateTime           @default(now())
  documentId    String?
  userId        String
  verifiedById  String
  reason        String?
  internalNotes String?
  document      Document?          @relation(fields: [documentId], references: [id])
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifiedBy    User               @relation("VerifierRelation", fields: [verifiedById], references: [id])

  @@index([documentId])
  @@index([userId])
  @@index([verifiedById])
  @@map("verification_history")
}

model Warehouse {
  id              String   @id @default(cuid())
  name            String
  location        String
  address         String
  capacity        Float
  occupied        Float    @default(0)
  description     String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  latitude        Float?
  longitude       Float?
  openingHours    Json?    // Structure: {day: {open: "08:00", close: "18:00"}}
  contactPhone    String?
  contactEmail    String?
  imageUrl        String?
  boxes           Box[]
  availableBoxes  Int      @default(0)
  reservedBoxes   Int      @default(0)

  @@map("warehouses")
}

model Box {
  id                   String                     @id @default(cuid())
  warehouseId          String
  name                 String
  size                 Float
  boxType              BoxType                    @default(STANDARD)
  isOccupied           Boolean                    @default(false)
  clientId             String?
  pricePerDay          Float
  description          String?
  locationDescription  String?                    // Description de l'emplacement dans l'entrepôt
  floorLevel           Int                        @default(0)
  maxWeight            Float?                     // Poids maximum supporté (en kg)
  dimensions           Json?                      // {width: Float, height: Float, depth: Float}
  features             String[]                   // ["climate-controlled", "secure", "24h-access"]
  status               BoxStatus                  @default(AVAILABLE)
  lastInspectedAt      DateTime?
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  client               User?                      @relation(fields: [clientId], references: [id])
  warehouse            Warehouse                  @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  reservations         Reservation[]
  usageHistory         BoxUsageHistory[]
  subscriptions        BoxAvailabilitySubscription[]

  @@index([warehouseId])
  @@index([clientId])
  @@index([status])
  @@map("boxes")
}

model Reservation {
  id               String          @id @default(cuid())
  boxId            String
  clientId         String
  startDate        DateTime
  endDate          DateTime
  status           ReservationStatus @default(ACTIVE)
  totalPrice       Float
  paymentStatus    PaymentStatus   @default(PENDING)
  paymentId        String?
  accessCode       String?         // Code d'accès temporaire
  lastAccessed     DateTime?       // Dernière fois que la box a été accédée
  notes            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  cancelledAt      DateTime?
  cancelReason     String?
  extendedCount    Int             @default(0)
  originalEndDate  DateTime?       // Date de fin originale avant extension
  usageHistory     BoxUsageHistory[]
  box              Box             @relation(fields: [boxId], references: [id], onDelete: Cascade)
  client           User            @relation(fields: [clientId], references: [id])

  @@index([boxId])
  @@index([clientId])
  @@index([status])
  @@map("reservations")
}

model BoxUsageHistory {
  id             String      @id @default(cuid())
  boxId          String
  reservationId  String?
  clientId       String
  actionType     BoxActionType
  actionTime     DateTime    @default(now())
  details        String?
  ipAddress      String?
  deviceInfo     String?
  box            Box         @relation(fields: [boxId], references: [id], onDelete: Cascade)
  reservation    Reservation? @relation(fields: [reservationId], references: [id])
  client         User        @relation(fields: [clientId], references: [id])

  @@index([boxId])
  @@index([reservationId])
  @@index([clientId])
  @@map("box_usage_history")
}

model BoxAvailabilitySubscription {
  id             String      @id @default(cuid())
  boxId          String
  clientId       String
  startDate      DateTime?
  endDate        DateTime?
  minSize        Float?
  maxPrice       Float?
  boxType        BoxType?
  warehouseId    String?
  isActive       Boolean     @default(true)
  notificationPreferences Json?  // {email: Boolean, sms: Boolean, push: Boolean}
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  lastNotified   DateTime?
  box            Box         @relation(fields: [boxId], references: [id], onDelete: Cascade)
  client         User        @relation(fields: [clientId], references: [id])

  @@index([boxId])
  @@index([clientId])
  @@map("box_availability_subscriptions")
}

model UserActivityLog {
  id           String       @id @default(cuid())
  userId       String
  activityType ActivityType
  details      String?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activity_logs")
}

model AuditLog {
  id            String   @id @default(cuid())
  entityType    String
  entityId      String
  action        String
  performedById String
  changes       Json?
  createdAt     DateTime @default(now())
  performedBy   User     @relation("AuditLogPerformer", fields: [performedById], references: [id])

  @@map("audit_logs")
}

model Announcement {
  id                 String                @id @default(cuid())
  title              String
  description        String
  type               AnnouncementType
  status             AnnouncementStatus    @default(PENDING)
  priority           AnnouncementPriority  @default(MEDIUM)
  pickupAddress      String
  pickupLongitude    Float?
  pickupLatitude     Float?
  deliveryAddress    String
  deliveryLongitude  Float?
  deliveryLatitude   Float?
  weight             Float?
  width              Float?
  height             Float?
  length             Float?
  isFragile          Boolean               @default(false)
  needsCooling       Boolean               @default(false)
  pickupDate         DateTime?
  pickupTimeWindow   String?
  deliveryDate       DateTime?
  deliveryTimeWindow String?
  isFlexible         Boolean               @default(false)
  suggestedPrice     Float?
  finalPrice         Float?
  isNegotiable       Boolean               @default(true)
  paymentStatus      String?
  clientId           String
  delivererId        String?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  viewCount          Int                   @default(0)
  applicationsCount  Int                   @default(0)
  cancelReason       String?
  notes              String?
  tags               String[]
  photos             String[]              @default([])
  estimatedDistance  Float?                // Distance estimée en km
  estimatedDuration  Int?                  // Durée estimée en minutes
  requiresSignature  Boolean               @default(false)
  requiresId         Boolean               @default(false)
  specialInstructions String?              // Instructions spéciales pour le livreur
  isFavorite         Boolean               @default(false) // Pour marquer comme favoris par les livreurs
  client             User                  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  deliverer          User?                 @relation("AnnouncementDeliverer", fields: [delivererId], references: [id])
  applications       DeliveryApplication[]
  favorites          DelivererFavorite[]   // Relation avec les favoris

  @@map("announcements")
}

model DeliveryApplication {
  id                String       @id @default(cuid())
  announcementId    String
  delivererId       String
  proposedPrice     Float?
  message           String?
  status            String       @default("PENDING")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  estimatedPickupTime DateTime?  // Heure estimée de ramassage
  estimatedDeliveryTime DateTime? // Heure estimée de livraison
  isPreferred       Boolean      @default(false) // Marqué comme préféré par le client
  notes             String?      // Notes supplémentaires
  announcement      Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  deliverer         User         @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  @@map("delivery_applications")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Decimal
  duration    Int      // Durée en minutes
  categoryId  String
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  providerId  String
  provider    User     @relation(fields: [providerId], references: [id])
  bookings    ServiceBooking[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([providerId])
  @@index([categoryId])
}

model ServiceCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  services    Service[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProviderAvailability {
  id         String   @id @default(cuid())
  providerId String
  provider   User     @relation(fields: [providerId], references: [id])
  dayOfWeek  Int      // 0-6 pour lundi-dimanche
  startTime  DateTime // Heure de début
  endTime    DateTime // Heure de fin
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([providerId])
}

model ServiceBooking {
  id          String   @id @default(cuid())
  clientId    String
  client      User     @relation("ClientBookings", fields: [clientId], references: [id])
  providerId  String
  provider    User     @relation("ProviderBookings", fields: [providerId], references: [id])
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  totalPrice  Decimal
  paymentId   String?
  payment     Payment? @relation(fields: [paymentId], references: [id])
  notes       String?
  review      ServiceReview?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([clientId])
  @@index([providerId])
  @@index([serviceId])
  @@index([paymentId])
}

model ServiceReview {
  id         String   @id @default(cuid())
  bookingId  String   @unique
  booking    ServiceBooking @relation(fields: [bookingId], references: [id])
  rating     Int      // 1-5 étoiles
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Payment {
  id              String   @id @default(cuid())
  amount          Decimal
  currency        String   @default("EUR")
  stripePaymentId String?
  status          PaymentStatus @default(PENDING)
  bookings        ServiceBooking[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model DelivererFavorite {
  id             String     @id @default(cuid())
  delivererId    String
  announcementId String
  createdAt      DateTime   @default(now())
  
  // Relations
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  deliverer      User         @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  // Index unique pour éviter les doublons
  @@unique([delivererId, announcementId])
  @@map("deliverer_favorites")
}

enum UserRole {
  CLIENT
  DELIVERER
  MERCHANT
  PROVIDER
  ADMIN
}

enum UserStatus {
  PENDING_VERIFICATION
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocumentType {
  ID_CARD
  DRIVING_LICENSE
  VEHICLE_REGISTRATION
  INSURANCE
  QUALIFICATION_CERTIFICATE
  PROOF_OF_ADDRESS
  BUSINESS_REGISTRATION
  SELFIE
  OTHER
}

enum ContractStatus {
  DRAFT
  PENDING_SIGNATURE
  ACTIVE
  TERMINATED
  EXPIRED
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR_AUTH
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum ActivityType {
  LOGIN
  LOGOUT
  PROFILE_UPDATE
  PASSWORD_CHANGE
  STATUS_CHANGE
  ROLE_CHANGE
  VERIFICATION_SUBMIT
  VERIFICATION_REVIEW
  DOCUMENT_UPLOAD
  ACCOUNT_CREATION
  OTHER
}

enum AnnouncementStatus {
  DRAFT
  PENDING
  PUBLISHED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AnnouncementType {
  PACKAGE
  GROCERIES
  DOCUMENTS
  MEAL
  FURNITURE
  OTHER
}

enum AnnouncementPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum BookingStatus {
  PENDING    // En attente de confirmation
  CONFIRMED  // Confirmé par le prestataire
  COMPLETED  // Service effectué
  CANCELLED  // Annulé
  RESCHEDULED // Reprogrammé
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  CONFIRMED
  CANCELLED
  DISPUTED
}

model Delivery {
  id                String         @id @default(cuid())
  status            DeliveryStatus @default(PENDING)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  pickupAddress     String
  deliveryAddress   String
  pickupDate        DateTime
  deliveryDate      DateTime?
  
  currentLat        Float?
  currentLng        Float?
  lastLocationUpdate DateTime?
  
  estimatedArrival  DateTime?
  confirmationCode  String?
  
  clientId          String
  client            User           @relation("ClientDeliveries", fields: [clientId], references: [id])
  delivererId       String?
  deliverer         User?          @relation("DelivererDeliveries", fields: [delivererId], references: [id])
  
  logs              DeliveryLog[]
  coordinates       DeliveryCoordinates[]
  rating            DeliveryRating?
  proofs            DeliveryProof[]

  @@index([clientId])
  @@index([delivererId])
}

model DeliveryLog {
  id              String         @id @default(cuid())
  deliveryId      String
  delivery        Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  status          DeliveryStatus
  timestamp       DateTime       @default(now())
  note            String?
  latitude        Float?
  longitude       Float?

  @@index([deliveryId])
}

model DeliveryCoordinates {
  id              String         @id @default(cuid())
  deliveryId      String
  delivery        Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  latitude        Float
  longitude       Float
  timestamp       DateTime       @default(now())

  @@index([deliveryId])
}

model DeliveryProof {
  id              String         @id @default(cuid())
  deliveryId      String
  delivery        Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  type            String         // PHOTO, SIGNATURE, CODE
  url             String?
  confirmedBy     String?        // User ID who confirmed
  confirmedAt     DateTime       @default(now())

  @@index([deliveryId])
}

model DeliveryRating {
  id              String         @id @default(cuid())
  deliveryId      String         @unique
  delivery        Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  rating          Int            // 1-5 stars
  comment         String?
  createdAt       DateTime       @default(now())
}

enum BoxType {
  STANDARD
  CLIMATE_CONTROLLED
  SECURE
  EXTRA_LARGE
  REFRIGERATED
  FRAGILE
}

enum BoxStatus {
  AVAILABLE
  RESERVED
  OCCUPIED
  MAINTENANCE
  DAMAGED
  INACTIVE
}

enum BoxActionType {
  RESERVATION_CREATED
  RESERVATION_UPDATED
  RESERVATION_CANCELLED
  BOX_ACCESSED
  BOX_CLOSED
  PAYMENT_PROCESSED
  EXTENDED_RENTAL
  INSPECTION_COMPLETED
}

enum ReservationStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  OVERDUE
  EXTENDED
}
