// This is your Prisma schema file for EcoDeli
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle de base pour les utilisateurs
model User {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String
  phone             String?
  address           String?
  city              String?
  postalCode        String?
  country           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  role              Role      @default(CLIENT)
  status            Status    @default(PENDING)
  
  // Relations avec les autres modèles en fonction du rôle
  client            Client?
  merchant          Merchant?
  courier           Courier?
  provider          Provider?
  
  // Authentification
  accounts          Account[]
  sessions          Session[]
  
  // Alertes
  alertRules        AlertRule[]
  alerts            Alert[]
}

// Modèle pour l'authentification avec NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Énumération des rôles possibles
enum Role {
  ADMIN
  CLIENT
  MERCHANT
  COURIER
  PROVIDER
}

// Énumération des statuts des utilisateurs
enum Status {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

// Client (Particulier)
model Client {
  id                String      @id @default(cuid())
  userId            String      @unique
  subscriptionPlan  String?     @default("FREE") // FREE, STARTER, PREMIUM
  subscriptionEnd   DateTime?
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  shipments         Shipment[]  // Expéditions demandées par le client
  serviceRequests   Service[]   // Services demandés par le client
  announcements     Announcement[] // Annonces publiées par le client
}

// Commerçant
model Merchant {
  id                String      @id @default(cuid())
  userId            String      @unique
  companyName       String
  siret             String      @unique
  contractType      String
  contractStart     DateTime
  contractEnd       DateTime?
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcements     Announcement[] // Annonces publiées par le commerçant
  products          Product[]   // Produits proposés par le commerçant
}

// Produit offert par un commerçant
model Product {
  id          String    @id @default(cuid())
  merchantId  String
  name        String
  description String?
  price       Float
  weight      Float?
  dimensions  String?   // Format: LxlxH en cm
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  merchant    Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
}

// Livreur
model Courier {
  id                String      @id @default(cuid())
  userId            String      @unique
  vehicleType       String?
  licenseNumber     String?
  licensePlate      String?
  verifiedDocuments Boolean     @default(false)
  rating            Float?
  nfcCardId         String?     @unique // Identifiant de la carte NFC
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  shipments         ShipmentCourier[] // Livraisons effectuées
  availabilities    Availability[] // Disponibilités
  announcements     Announcement[] // Trajets annoncés
}

// Disponibilité du livreur
model Availability {
  id          String    @id @default(cuid())
  courierId   String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  fromAddress String?
  toAddress   String?
  
  courier     Courier   @relation(fields: [courierId], references: [id], onDelete: Cascade)
}

// Prestataire de services à la personne
model Provider {
  id                String      @id @default(cuid())
  userId            String      @unique
  serviceTypes      String[]    // Types de services proposés
  qualifications    String?
  certifications    String?
  rating            Float?
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  services          Service[]   // Services fournis
  availabilities    ProviderAvailability[] // Disponibilités
}

// Disponibilité du prestataire
model ProviderAvailability {
  id          String    @id @default(cuid())
  providerId  String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  
  provider    Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

// Annonce (livraison ou service)
model Announcement {
  id            String          @id @default(cuid())
  title         String
  description   String
  fromAddress   String
  toAddress     String
  packageSize   PackageSize?    // Taille du colis (si applicable)
  weight        Float?          // Poids en kg (si applicable)
  price         Float
  deliveryDate  DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  status        AnnouncementStatus @default(OPEN)
  type          AnnouncementType
  
  // Relations
  clientId      String?
  merchantId    String?
  courierId     String?         // Si un livreur propose un trajet
  
  client        Client?         @relation(fields: [clientId], references: [id])
  merchant      Merchant?       @relation(fields: [merchantId], references: [id])
  courier       Courier?        @relation(fields: [courierId], references: [id])
  shipment      Shipment?
}

enum AnnouncementStatus {
  OPEN
  ASSIGNED
  COMPLETED
  CANCELLED
}

enum AnnouncementType {
  DELIVERY_REQUEST     // Demande de livraison
  JOURNEY_OFFER        // Offre de trajet par un livreur
  SERVICE_REQUEST      // Demande de service
}

enum PackageSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

// Expédition
model Shipment {
  id                String      @id @default(cuid())
  trackingNumber    String      @unique
  fromAddress       String
  toAddress         String
  packageSize       PackageSize
  weight            Float
  price             Float
  insuranceAmount   Float?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deliveryDate      DateTime?
  deliveryStatus    DeliveryStatus @default(PENDING)
  
  // Codes de validation
  validationCode    String?
  validated         Boolean     @default(false)
  
  // Relations
  clientId          String
  announcementId    String?     @unique
  
  client            Client      @relation(fields: [clientId], references: [id])
  announcement      Announcement? @relation(fields: [announcementId], references: [id])
  couriers          ShipmentCourier[] // Plusieurs livreurs peuvent participer à une livraison
  storageFacility   StorageFacility?  @relation(fields: [storageFacilityId], references: [id])
  storageFacilityId String?
}

// Relation entre livraison et livreur (permet d'avoir plusieurs livreurs par livraison)
model ShipmentCourier {
  id          String    @id @default(cuid())
  shipmentId  String
  courierId   String
  startPoint  String
  endPoint    String
  status      DeliveryStatus @default(PENDING)
  startTime   DateTime?
  endTime     DateTime?
  
  shipment    Shipment  @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  courier     Courier   @relation(fields: [courierId], references: [id], onDelete: Cascade)
  
  @@unique([shipmentId, courierId])
}

// Statut de livraison
enum DeliveryStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  STORED
  DELIVERED
  CANCELLED
  FAILED
}

// Service à la personne
model Service {
  id              String        @id @default(cuid())
  type            ServiceType
  description     String
  address         String?
  price           Float
  date            DateTime
  startTime       DateTime
  endTime         DateTime?
  status          ServiceStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  clientId        String
  providerId      String?
  
  client          Client        @relation(fields: [clientId], references: [id])
  provider        Provider?     @relation(fields: [providerId], references: [id])
}

// Types de services
enum ServiceType {
  PERSONAL_TRANSPORT     // Transport de personnes
  AIRPORT_TRANSFER       // Transfert aéroport
  SHOPPING               // Courses
  FOREIGN_PURCHASE       // Achat à l'étranger
  PET_SITTING            // Garde d'animaux
  HOUSEKEEPING           // Ménage
  GARDENING              // Jardinage
  OTHER                  // Autre
}

// Statut du service
enum ServiceStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Entrepôts de stockage
model StorageFacility {
  id        String      @id @default(cuid())
  name      String
  address   String
  city      String
  capacity  Int
  
  shipments Shipment[]
}

// Factures
model Invoice {
  id            String      @id @default(cuid())
  invoiceNumber String      @unique
  amount        Float
  description   String?
  status        InvoiceStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  dueDate       DateTime
  paidAt        DateTime?
  
  // Le type d'entité à qui est destinée la facture (client, commerçant, livreur, prestataire)
  entityType    String
  entityId      String
}

enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

// Paiements
model Payment {
  id            String      @id @default(cuid())
  amount        Float
  description   String?
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  createdAt     DateTime    @default(now())
  
  // ID de transaction du système de paiement (Stripe, etc.)
  externalId    String?
  
  // Le type d'entité à qui est destiné le paiement (client, commerçant, livreur, prestataire)
  entityType    String
  entityId      String
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Évaluations
model Review {
  id          String    @id @default(cuid())
  rating      Float     // Note de 0 à 5
  comment     String?
  createdAt   DateTime  @default(now())
  
  // Type d'évaluation (livraison, service)
  reviewType  String
  
  // ID de l'élément évalué (livraison, service)
  itemId      String
  
  // Utilisateur qui a posté l'évaluation
  userId      String
}

// Notifications
model Notification {
  id          String    @id @default(cuid())
  title       String
  content     String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  // Utilisateur destinataire
  userId      String
}

// Modèles pour le système d'alertes
model AlertRule {
  id              String          @id @default(cuid())
  name            String
  metricType      AlertMetricType
  condition       AlertCondition
  threshold       Float
  enabled         Boolean         @default(true)
  notifyEmail     Boolean         @default(true)
  notifyDashboard Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  alerts          Alert[]
}

model Alert {
  id            String          @id @default(cuid())
  ruleId        String
  rule          AlertRule       @relation(fields: [ruleId], references: [id])
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  metricType    AlertMetricType
  message       String
  details       String?
  value         Float
  expectedValue Float?
  deviation     Float?
  timestamp     DateTime        @default(now())
  severity      AlertSeverity
  read          Boolean         @default(false)
  dismissed     Boolean         @default(false)
}

enum AlertMetricType {
  REVENUE
  SHIPMENTS
  USERS
  SATISFACTION
  COURIER_DELAY
}

enum AlertCondition {
  ABOVE
  BELOW
  EQUAL
  CHANGE_RATE
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
}
