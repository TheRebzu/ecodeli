// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -------- AUTH MODELS --------

enum UserRole {
  CLIENT
  DELIVERER
  MERCHANT
  PROVIDER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              UserRole  @default(CLIENT)
  status            UserStatus @default(PENDING_VERIFICATION)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // NextAuth.js relations
  accounts          Account[]
  sessions          Session[]
  
  // Role specific relations
  client            Client?
  deliverer         Deliverer?
  merchant          Merchant?
  provider          Provider?
  admin             Admin?
  
  // Additional fields
  phoneNumber       String?
  lastLoginAt       DateTime?
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// -------- ROLE SPECIFIC MODELS --------

model Client {
  id              String    @id @default(cuid())
  userId          String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Client specific fields
  address         String?
  city            String?
  state           String?
  postalCode      String?
  country         String?
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("clients")
}

model Deliverer {
  id                String    @id @default(cuid())
  userId            String    @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Deliverer specific fields
  isVerified        Boolean   @default(false)
  verificationDate  DateTime?
  vehicleType       String?
  licenseNumber     String?
  availableFrom     DateTime?
  availableTo       DateTime?
  maxCapacity       Float?
  currentLocation   String?
  isActive          Boolean   @default(false)
  rating            Float?
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("deliverers")
}

model Merchant {
  id                String    @id @default(cuid())
  userId            String    @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Merchant specific fields
  businessName      String?
  businessAddress   String?
  businessCity      String?
  businessState     String?
  businessPostal    String?
  businessCountry   String?
  taxId             String?
  websiteUrl        String?
  isVerified        Boolean   @default(false)
  verificationDate  DateTime?
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("merchants")
}

model Provider {
  id                String    @id @default(cuid())
  userId            String    @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Provider specific fields
  serviceType       String?
  description       String?
  isVerified        Boolean   @default(false)
  verificationDate  DateTime?
  availability      String?   // JSON string of availability
  rating            Float?
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("providers")
}

model Admin {
  id              String    @id @default(cuid())
  userId          String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Admin specific fields
  permissions     String?   // JSON string of permissions
  adminLevel      Int       @default(1)
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("admins")
}
