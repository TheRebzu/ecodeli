generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// From 00-enums.prisma
// Enums et types partagés EcoDeli

enum UserRole {
  CLIENT
  DELIVERER
  MERCHANT
  PROVIDER
  ADMIN
}

enum ValidationStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum DocumentType {
  IDENTITY
  DRIVING_LICENSE
  INSURANCE
  CERTIFICATION
  CONTRACT
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ServiceType {
  PERSON_TRANSPORT
  AIRPORT_TRANSFER
  SHOPPING
  INTERNATIONAL_PURCHASE
  PET_CARE
  HOME_SERVICE
  CART_DROP
  OTHER
}

enum AnnouncementType {
  PACKAGE_DELIVERY
  PERSON_TRANSPORT
  AIRPORT_TRANSFER
  SHOPPING
  INTERNATIONAL_PURCHASE
  PET_SITTING
  HOME_SERVICE
  CART_DROP
}

enum AnnouncementStatus {
  DRAFT
  ACTIVE
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  DELIVERED
  CANCELLED
  FAILED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum SubscriptionPlan {
  FREE
  STARTER
  PREMIUM
}

enum SubscriptionType {
  FREE
  STARTER
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}

enum NotificationType {
  SYSTEM
  DELIVERY
  BOOKING
  PAYMENT
  ANNOUNCEMENT
  VALIDATION
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum ServiceCategory {
  TRANSPORT
  HOME_CLEANING
  GARDENING
  HANDYMAN
  TUTORING
  HEALTHCARE
  BEAUTY
  PET_CARE
  OTHER
}

enum WalletOperationType {
  CREDIT
  DEBIT
  WITHDRAWAL
  REFUND
  FEE
}

enum OperationStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum BoxSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum BoxStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum ContractType {
  STANDARD
  PREMIUM
  ENTERPRISE
  CUSTOM
}

enum ContractStatus {
  DRAFT
  PENDING
  ACTIVE
  SUSPENDED
  TERMINATED
}

// From 01-users.prisma
// Modèles utilisateurs

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  emailVerified   Boolean   @default(false)
  emailVerifiedAt DateTime?
  password        String
  role            UserRole
  language        String    @default("fr")
  lastLoginAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  profile              Profile?
  sessions             Session[]
  passwordResets       PasswordReset[]
  accounts             Account[]
  client               Client?
  deliverer            Deliverer?
  merchant             Merchant?
  provider             Provider?
  admin                Admin?
  announcements        Announcement[]
  clientDeliveries     Delivery[]           @relation("ClientDeliveries")
  delivererDeliveries  Delivery[]           @relation("DelivererDeliveries")
  bookings             Booking[]
  documents            Document[]
  payments             Payment[]            @relation("UserPayments")
  notifications        Notification[]
  walletOperations     WalletOperation[]
  storageBoxRentals    StorageBoxRental[]
  wallet               Wallet?
  globalAvailabilities GlobalAvailability[]
  activityLogs         ActivityLog[]

  @@index([email])
  @@index([role])
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  firstName   String?
  lastName    String?
  phone       String?
  avatar      String?
  dateOfBirth DateTime?
  address     String?
  city        String?
  postalCode  String?
  country     String    @default("FR")
  isVerified  Boolean   @default(false)
  verifiedAt  DateTime?
  language    String    @default("fr")
  timezone    String    @default("Europe/Paris")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// From 02-auth.prisma
// Modèles authentification

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  userAgent String?
  ip        String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@index([token])
  @@index([email])
  @@index([expiresAt])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// From 03-client.prisma
// Modèles client

model Client {
  id                 String           @id @default(cuid())
  userId             String           @unique
  subscriptionPlan   SubscriptionPlan @default(FREE)
  subscriptionStart  DateTime         @default(now())
  subscriptionEnd    DateTime?
  tutorialCompleted  Boolean          @default(false)
  termsAcceptedAt    DateTime         @default(now())
  emailNotifications Boolean          @default(true)
  pushNotifications  Boolean          @default(true)
  smsNotifications   Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // Relations
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcements Announcement[]
  bookings      Booking[]
  payments      Payment[]          @relation("ClientPayments")
  storageBoxes  StorageBoxRental[]
  reviews       Review[]

  @@index([userId])
  @@index([subscriptionPlan])
}

// From 04-deliverer.prisma
// Modèles livreur

model Deliverer {
  id               String           @id @default(cuid())
  userId           String           @unique
  validationStatus ValidationStatus @default(PENDING)
  vehicleType      String?
  licensePlate     String?
  maxWeight        Float? // en kg
  maxVolume        Float? // en litres
  averageRating    Float?           @default(0)
  totalDeliveries  Int              @default(0)
  isActive         Boolean          @default(true)
  nfcCardId        String?          @unique
  activatedAt      DateTime?
  lastActiveAt     DateTime?
  coordinates      Json? // {lat, lng, updatedAt}
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  user                    User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  routes                  DeliveryRoute[]
  delivererAvailabilities DelivererAvailability[]
  Route                   Route[]
  NFCCard                 NFCCard?
  Availability            Availability[]

  @@index([userId])
  @@index([isActive])
  @@index([averageRating])
}

model DeliveryRoute {
  id                String   @id @default(cuid())
  delivererId       String
  name              String // ex: "Paris - Lyon quotidien"
  fromAddress       String
  toAddress         String
  fromCoordinates   Json // {lat, lng}
  toCoordinates     Json // {lat, lng}
  schedule          Json // {days: ['monday', 'wednesday'], time: '08:00'}
  isActive          Boolean  @default(true)
  maxCapacity       Int      @default(1)
  estimatedDuration Int // en minutes
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  deliverer Deliverer @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  @@index([delivererId])
  @@index([isActive])
}

model DelivererAvailability {
  id          String   @id @default(cuid())
  delivererId String
  dayOfWeek   Int // 0 = dimanche, 1 = lundi, etc.
  startTime   String // "09:00"
  endTime     String // "18:00"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  deliverer Deliverer @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  @@index([delivererId])
  @@index([dayOfWeek])
}

model Route {
  id              String   @id @default(cuid())
  delivererId     String
  startLocation   Json // {address, city, postalCode, lat, lng}
  endLocation     Json // {address, city, postalCode, lat, lng}
  departureDate   DateTime
  arrivalDate     DateTime
  availableWeight Float?
  availableVolume Float?
  pricePerKg      Float?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  deliverer            Deliverer                @relation(fields: [delivererId], references: [id], onDelete: Cascade)
  matchedAnnouncements RouteAnnouncementMatch[]

  @@index([delivererId])
  @@index([departureDate])
}

model NFCCard {
  id          String    @id @default(cuid())
  delivererId String    @unique
  cardNumber  String    @unique
  isActive    Boolean   @default(true)
  issuedAt    DateTime  @default(now())
  lastUsedAt  DateTime?

  deliverer Deliverer @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  @@index([cardNumber])
}

// From 05-merchant.prisma
// Modèles commerçant

model Merchant {
  id                String    @id @default(cuid())
  userId            String    @unique
  companyName       String
  siret             String    @unique
  vatNumber         String?
  contractStatus    String    @default("PENDING")
  contractStartDate DateTime?
  contractEndDate   DateTime?
  commissionRate    Float     @default(0.15)
  rating            Float     @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  contract       Contract?
  announcements  Announcement[]
  orders         Order[]
  cartDropConfig CartDropConfig?
  payments       Payment[]       @relation("MerchantPayments")

  @@index([userId])
  @@index([siret])
}

model CartDropConfig {
  id               String   @id @default(cuid())
  merchantId       String   @unique
  isActive         Boolean  @default(false)
  deliveryZones    Json[] // [{postalCode, deliveryFee}]
  timeSlots        Json[] // [{day, startTime, endTime}]
  maxOrdersPerSlot Int      @default(10)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  merchant Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
}

// From 06-provider.prisma
// Modèles prestataire

model Provider {
  id                String           @id @default(cuid())
  userId            String           @unique
  validationStatus  ValidationStatus @default(PENDING)
  businessName      String?
  siret             String?          @unique
  specialties       String[] // ["TRANSPORT", "HOME_CLEANING", etc.]
  hourlyRate        Float?
  description       String?
  averageRating     Float?           @default(0)
  totalBookings     Int              @default(0)
  isActive          Boolean          @default(true)
  monthlyInvoiceDay Int              @default(30)
  activatedAt       DateTime?
  lastActiveAt      DateTime?
  zone              Json? // Zone de service {coordinates: [], radius: km}
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  user                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  services             Service[]
  bookings             Booking[]
  reviews              Review[]               @relation("ProviderReviews")
  Certification        Certification[]
  ProviderAvailability ProviderAvailability[]
  ProviderRate         ProviderRate[]
  Intervention         Intervention[]
  Availability         Availability[]

  @@index([userId])
}

model Service {
  id                 String      @id @default(cuid())
  providerId         String
  name               String
  description        String
  type               ServiceType
  basePrice          Float
  priceUnit          String      @default("HOUR") // HOUR, FLAT, KM
  duration           Int? // en minutes
  isActive           Boolean     @default(true)
  minAdvanceBooking  Int         @default(24) // heures
  maxAdvanceBooking  Int         @default(720) // heures (30 jours)
  cancellationPolicy String?
  requirements       String[] // ["CAR_LICENSE", "INSURANCE"]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  // Relations
  provider Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@index([providerId])
  @@index([type])
  @@index([isActive])
}

model Certification {
  id          String    @id @default(cuid())
  providerId  String
  name        String
  issuingBody String
  issueDate   DateTime
  expiryDate  DateTime?
  documentUrl String?
  isVerified  Boolean   @default(false)
  verifiedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([expiryDate])
}

model ProviderAvailability {
  id         String   @id @default(cuid())
  providerId String
  dayOfWeek  Int // 0 = dimanche, 1 = lundi, etc.
  startTime  String // "09:00"
  endTime    String // "18:00"
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([dayOfWeek])
}

model ProviderRate {
  id            String      @id @default(cuid())
  providerId    String
  serviceType   ServiceType
  baseRate      Float
  unitType      String      @default("HOUR") // HOUR, FLAT, KM
  minimumCharge Float?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([serviceType])
}

// From 07-admin.prisma
// Modèles admin

model Admin {
  id          String   @id @default(cuid())
  userId      String   @unique
  permissions String[] @default([])
  department  String? // "OPERATIONS", "FINANCE", "SUPPORT", etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// From 08-announcement.prisma
// Modèles annonces

model Announcement {
  id             String             @id @default(cuid())
  clientId       String?
  merchantId     String?
  type           AnnouncementType
  title          String
  description    String
  startLocation  Json // {address, city, postalCode, lat, lng}
  endLocation    Json // {address, city, postalCode, lat, lng}
  desiredDate    DateTime
  flexibleDates  Boolean            @default(false)
  dateRangeStart DateTime?
  dateRangeEnd   DateTime?
  price          Float
  currency       String             @default("EUR")
  status         AnnouncementStatus @default(DRAFT)
  viewCount      Int                @default(0)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  publishedAt    DateTime?

  // Relations
  client         Client?                  @relation(fields: [clientId], references: [id], onDelete: SetNull)
  merchant       Merchant?                @relation(fields: [merchantId], references: [id], onDelete: SetNull)
  packageDetails PackageAnnouncement?
  serviceDetails ServiceAnnouncement?
  delivery       Delivery?
  routeMatches   RouteAnnouncementMatch[]
  User           User?                    @relation(fields: [userId], references: [id])
  userId         String?
  Payment        Payment[]

  @@index([clientId])
  @@index([merchantId])
  @@index([status])
  @@index([type])
  @@index([desiredDate])
}

model PackageAnnouncement {
  id                  String  @id @default(cuid())
  announcementId      String  @unique
  weight              Float // En kg
  length              Float // En cm
  width               Float // En cm
  height              Float // En cm
  fragile             Boolean @default(false)
  requiresInsurance   Boolean @default(false)
  insuredValue        Float?
  specialInstructions String?

  announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
}

model ServiceAnnouncement {
  id                  String      @id @default(cuid())
  announcementId      String      @unique
  serviceType         ServiceType
  numberOfPeople      Int?
  duration            Int? // En minutes
  recurringService    Boolean     @default(false)
  recurringPattern    String? // "DAILY", "WEEKLY", "MONTHLY"
  specialRequirements String?
  preferredProviderId String?

  announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
}

model RouteAnnouncementMatch {
  id             String    @id @default(cuid())
  routeId        String
  announcementId String
  matchScore     Float // Score de correspondance 0-100
  isNotified     Boolean   @default(false)
  notifiedAt     DateTime?
  createdAt      DateTime  @default(now())

  route        Route        @relation(fields: [routeId], references: [id], onDelete: Cascade)
  announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@unique([routeId, announcementId])
  @@index([matchScore])
}

// From 09-delivery.prisma
// Modèles livraisons

model Delivery {
  id                 String         @id @default(cuid())
  announcementId     String         @unique
  clientId           String
  delivererId        String
  status             DeliveryStatus @default(PENDING)
  trackingNumber     String         @unique @default(cuid())
  validationCode     String? // Code à 6 chiffres
  pickupDate         DateTime?
  deliveryDate       DateTime?
  actualDeliveryDate DateTime?
  isPartial          Boolean        @default(false)
  currentLocation    Json? // {address, lat, lng, updatedAt}
  price              Float
  delivererFee       Float // Part du livreur
  platformFee        Float // Commission plateforme
  insuranceFee       Float?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  // Relations
  announcement          Announcement            @relation(fields: [announcementId], references: [id])
  client                User                    @relation("ClientDeliveries", fields: [clientId], references: [id])
  deliverer             User                    @relation("DelivererDeliveries", fields: [delivererId], references: [id])
  payment               Payment?
  tracking              TrackingUpdate[]
  history               DeliveryHistory[]
  validations           DeliveryValidation[]
  DeliveryStatusHistory DeliveryStatusHistory[]
  Handover              Handover[]
  ProofOfDelivery       ProofOfDelivery?

  @@index([clientId])
  @@index([delivererId])
  @@index([status])
  @@index([trackingNumber])
  @@index([createdAt])
}

model TrackingUpdate {
  id          String         @id @default(cuid())
  deliveryId  String
  status      DeliveryStatus
  message     String
  location    String?
  coordinates Json? // {lat, lng}
  timestamp   DateTime       @default(now())
  isAutomatic Boolean        @default(false)

  // Relations
  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@index([timestamp])
}

model DeliveryHistory {
  id          String   @id @default(cuid())
  deliveryId  String
  action      String // "CREATED", "ACCEPTED", "PICKED_UP", etc.
  description String
  metadata    Json?
  createdAt   DateTime @default(now())
  createdBy   String? // User ID qui a fait l'action

  // Relations
  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@index([createdAt])
}

model DeliveryStatusHistory {
  id         String         @id @default(cuid())
  deliveryId String
  status     DeliveryStatus
  comment    String?
  location   Json? // {address, lat, lng}
  createdBy  String
  createdAt  DateTime       @default(now())

  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
}

model Handover {
  id              String    @id @default(cuid())
  deliveryId      String
  fromDelivererId String
  toDelivererId   String?
  locationId      String
  handoverDate    DateTime
  handoverCode    String // Code de transfert
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  location Location @relation(fields: [locationId], references: [id])

  @@index([deliveryId])
  @@index([handoverCode])
}

model ProofOfDelivery {
  id                 String   @id @default(cuid())
  deliveryId         String   @unique
  recipientName      String?
  recipientSignature String? // Base64
  photos             String[] // URLs
  notes              String?
  validatedWithCode  Boolean  @default(false)
  validatedWithNFC   Boolean  @default(false)
  createdAt          DateTime @default(now())

  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
}

// From 10-booking.prisma
// Modèles réservations

model Booking {
  id            String   @id @default(cuid())
  clientId      String
  providerId    String
  serviceId     String
  status        String   @default("PENDING") // PENDING, CONFIRMED, IN_PROGRESS, COMPLETED, CANCELLED
  scheduledDate DateTime
  scheduledTime String // HH:MM
  duration      Int // En minutes
  address       Json // {address, city, postalCode, lat, lng}
  totalPrice    Float
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  client       Client        @relation(fields: [clientId], references: [id])
  provider     Provider      @relation(fields: [providerId], references: [id])
  service      Service       @relation(fields: [serviceId], references: [id])
  intervention Intervention?
  payment      Payment?
  review       Review?
  User         User?         @relation(fields: [userId], references: [id])
  userId       String?

  @@index([clientId])
  @@index([providerId])
  @@index([scheduledDate])
  @@index([status])
}

model Intervention {
  id              String    @id @default(cuid())
  bookingId       String    @unique
  providerId      String
  startTime       DateTime?
  endTime         DateTime?
  actualDuration  Int? // En minutes
  report          String?
  photos          String[] // URLs
  clientSignature String? // Base64
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  booking  Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  provider Provider @relation(fields: [providerId], references: [id])

  @@index([providerId])
}

// From 10-delivery-validation.prisma
// Modèle pour la validation des livraisons avec codes à 6 chiffres

model DeliveryValidation {
  id         String    @id @default(cuid())
  deliveryId String
  code       String    @unique // Code à 6 chiffres
  isUsed     Boolean   @default(false)
  usedAt     DateTime?
  expiresAt  DateTime // Expire après 2 heures
  createdAt  DateTime  @default(now())

  // Relations
  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@index([code])
  @@index([expiresAt])
}

// From 11-payment.prisma
// Modèles paiements

model Payment {
  id              String        @id @default(cuid())
  userId          String
  announcementId  String?
  deliveryId      String?       @unique
  bookingId       String?       @unique
  clientId        String?
  merchantId      String?
  amount          Float
  currency        String        @default("EUR")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String // "STRIPE", "WALLET", "BANK_TRANSFER"
  stripePaymentId String?       @unique
  stripeSessionId String?
  metadata        Json? // Données Stripe ou autres
  paidAt          DateTime?
  failedAt        DateTime?
  refundedAt      DateTime?
  refundAmount    Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user         User          @relation("UserPayments", fields: [userId], references: [id])
  announcement Announcement? @relation(fields: [announcementId], references: [id])
  delivery     Delivery?     @relation(fields: [deliveryId], references: [id])
  booking      Booking?      @relation(fields: [bookingId], references: [id])
  client       Client?       @relation("ClientPayments", fields: [clientId], references: [id])
  merchant     Merchant?     @relation("MerchantPayments", fields: [merchantId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([paymentMethod])
  @@index([createdAt])
}

model Wallet {
  id              String   @id @default(cuid())
  userId          String   @unique
  balance         Float    @default(0)
  currency        String   @default("EUR")
  stripeAccountId String?  @unique
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user       User              @relation(fields: [userId], references: [id])
  operations WalletOperation[]

  @@index([userId])
  @@index([isActive])
}

model WalletOperation {
  id          String              @id @default(cuid())
  walletId    String
  userId      String
  type        WalletOperationType
  amount      Float
  description String
  reference   String? // ID de la livraison, booking, etc.
  status      OperationStatus     @default(PENDING)
  executedAt  DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relations
  wallet Wallet @relation(fields: [walletId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@index([walletId])
  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

// From 12-invoice.prisma
// Modèles factures

model Invoice {
  id                 String    @id @default(cuid())
  invoiceNumber      String    @unique
  type               String // "PROVIDER_MONTHLY", "DELIVERY", "SERVICE", "MERCHANT"
  status             String    @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE
  providerId         String?
  merchantId         String?
  clientId           String?
  billingPeriodStart DateTime?
  billingPeriodEnd   DateTime?
  subtotal           Float
  tax                Float
  total              Float
  currency           String    @default("EUR")
  dueDate            DateTime
  paidAt             DateTime?
  pdfUrl             String?
  metadata           Json?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  items InvoiceItem[]

  @@index([invoiceNumber])
  @@index([type])
  @@index([status])
  @@index([providerId])
}

model InvoiceItem {
  id            String   @id @default(cuid())
  invoiceId     String
  description   String
  quantity      Float    @default(1)
  unitPrice     Float
  total         Float
  referenceType String? // "INTERVENTION", "DELIVERY", etc.
  referenceId   String?
  metadata      Json?
  createdAt     DateTime @default(now())

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

// From 13-location.prisma
// Modèles emplacements

model Location {
  id           String   @id @default(cuid())
  name         String
  type         String // "WAREHOUSE", "RELAY_POINT", "OFFICE"
  address      String
  city         String
  postalCode   String
  country      String   @default("FR")
  lat          Float
  lng          Float
  phone        String?
  email        String?
  openingHours Json? // [{day, open, close}]
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  warehouses   Warehouse[]
  handovers    Handover[]
  storageBoxes StorageBox[]

  @@index([type])
  @@index([city])
}

model Warehouse {
  id               String   @id @default(cuid())
  locationId       String   @unique
  capacity         Int // Nombre de colis max
  currentOccupancy Int      @default(0)
  managerName      String?
  managerEmail     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  location Location @relation(fields: [locationId], references: [id])
}

model StorageBox {
  id          String   @id @default(cuid())
  locationId  String
  boxNumber   String
  size        String // "SMALL", "MEDIUM", "LARGE"
  pricePerDay Float
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  location Location           @relation(fields: [locationId], references: [id])
  rentals  StorageBoxRental[]

  @@unique([locationId, boxNumber])
  @@index([locationId])
  @@index([isAvailable])
}

model StorageBoxRental {
  id           String    @id @default(cuid())
  clientId     String
  storageBoxId String
  startDate    DateTime
  endDate      DateTime?
  accessCode   String // Code d'accès au box
  totalPrice   Float?
  isPaid       Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  client     Client     @relation(fields: [clientId], references: [id])
  storageBox StorageBox @relation(fields: [storageBoxId], references: [id])
  User       User?      @relation(fields: [userId], references: [id])
  userId     String?

  @@index([clientId])
  @@index([storageBoxId])
  @@index([startDate])
}

// From 14-document.prisma
// Modèles documents

model Document {
  id               String           @id @default(cuid())
  userId           String
  type             DocumentType
  filename         String
  originalName     String
  mimeType         String
  validationStatus ValidationStatus @default(PENDING)
  size             Int // en bytes
  url              String
  validatedAt      DateTime?
  validatedBy      String? // ID de l'admin qui a validé
  rejectionReason  String?
  expirationDate   DateTime? // Pour permis, assurances, etc.
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([validationStatus])
}

// From 15-notification.prisma
// Modèles notifications

model Notification {
  id         String    @id @default(cuid())
  userId     String
  type       String // "ANNOUNCEMENT_MATCH", "DELIVERY_UPDATE", "PAYMENT_RECEIVED", etc.
  title      String
  message    String
  data       Json? // Données additionnelles
  isRead     Boolean   @default(false)
  readAt     DateTime?
  isPush     Boolean   @default(false)
  pushSentAt DateTime?
  createdAt  DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([type])
}

model NotificationPreference {
  id                 String  @id @default(cuid())
  userId             String  @unique
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  smsNotifications   Boolean @default(false)

  // Types de notifications
  announcementMatch Boolean @default(true)
  deliveryUpdates   Boolean @default(true)
  paymentUpdates    Boolean @default(true)
  marketingEmails   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// From 16-review.prisma
// Modèles évaluations et autres

model Review {
  id          String    @id @default(cuid())
  bookingId   String?   @unique
  clientId    String?
  rating      Int // 1 à 5
  comment     String?
  isVerified  Boolean   @default(false)
  response    String? // Réponse du prestataire
  respondedAt DateTime?
  providerId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  booking  Booking?  @relation(fields: [bookingId], references: [id])
  client   Client?   @relation(fields: [clientId], references: [id])
  provider Provider? @relation("ProviderReviews", fields: [providerId], references: [id])

  @@index([rating])
  @@index([isVerified])
  @@index([providerId])
  @@index([clientId])
}

model GlobalAvailability {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime // Date spécifique
  startTime String // "09:00"
  endTime   String // "18:00"
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
}

model Analytics {
  id       String   @id @default(cuid())
  type     String // "DELIVERY", "BOOKING", "PAYMENT"
  entity   String // "CLIENT", "DELIVERER", "PROVIDER"
  entityId String
  action   String // "CREATED", "COMPLETED", "CANCELLED"
  metadata Json? // Données spécifiques
  value    Float? // Valeur monétaire si applicable
  date     DateTime @default(now())
  period   String // "DAILY", "WEEKLY", "MONTHLY"

  @@index([type])
  @@index([entity])
  @@index([date])
  @@index([period])
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json // Valeur flexible
  description String?
  isActive    Boolean  @default(true)
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@index([isActive])
}

model ActivityLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String // "LOGIN", "CREATE_DELIVERY", etc.
  entityType String? // "DELIVERY", "BOOKING", etc.
  entityId   String?
  metadata   Json? // Détails de l'action
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model SystemNotification {
  id         String    @id @default(cuid())
  type       String // "MAINTENANCE", "UPDATE", "ALERT"
  title      String
  message    String
  priority   String    @default("LOW") // LOW, MEDIUM, HIGH, CRITICAL
  targetRole UserRole? // Si spécifique à un rôle
  isActive   Boolean   @default(true)
  startDate  DateTime?
  endDate    DateTime?
  createdBy  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([type])
  @@index([priority])
  @@index([isActive])
  @@index([targetRole])
}

model Availability {
  id           String    @id @default(cuid())
  providerId   String?
  delivererId  String?
  dayOfWeek    Int // 0-6 (Dimanche-Samedi)
  startTime    String // HH:MM
  endTime      String // HH:MM
  isRecurring  Boolean   @default(true)
  specificDate DateTime? // Pour disponibilités ponctuelles
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  provider  Provider?  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  deliverer Deliverer? @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([delivererId])
  @@index([dayOfWeek])
}

model Contract {
  id             String    @id @default(cuid())
  merchantId     String    @unique
  contractNumber String    @unique
  type           String // "STANDARD", "PREMIUM", "CUSTOM"
  terms          Json // Conditions du contrat
  commissionRate Float
  startDate      DateTime
  endDate        DateTime?
  status         String    @default("ACTIVE") // "DRAFT", "ACTIVE", "SUSPENDED", "TERMINATED"
  signedAt       DateTime?
  signedBy       String?
  pdfUrl         String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  merchant Merchant @relation(fields: [merchantId], references: [id])

  @@index([contractNumber])
  @@index([status])
}

model Order {
  id              String   @id @default(cuid())
  merchantId      String
  orderNumber     String   @unique
  clientName      String
  clientEmail     String?
  clientPhone     String?
  deliveryAddress Json // {address, city, postalCode, lat, lng}
  deliveryDate    DateTime
  deliverySlot    String // HH:MM-HH:MM
  items           Json[] // [{name, quantity, price}]
  subtotal        Float
  deliveryFee     Float
  total           Float
  status          String   @default("PENDING") // PENDING, CONFIRMED, DELIVERED, CANCELLED
  isCartDrop      Boolean  @default(false)
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  merchant Merchant @relation(fields: [merchantId], references: [id])

  @@index([merchantId])
  @@index([orderNumber])
  @@index([status])
}
