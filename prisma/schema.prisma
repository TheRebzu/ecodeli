generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                        @id @default(cuid())
  name                     String
  email                    String                        @unique
  emailVerified            DateTime?
  password                 String
  image                    String?
  role                     UserRole
  status                   UserStatus                    @default(PENDING_VERIFICATION)
  createdAt                DateTime                      @default(now())
  updatedAt                DateTime                      @updatedAt
  phoneNumber              String?
  lastLoginAt              DateTime?
  twoFactorEnabled         Boolean                       @default(false)
  twoFactorSecret          String?
  locale                   String?
  preferences              Json?
  isVerified               Boolean                       @default(false)
  lastPasswordChange       DateTime?
  lockedUntil              DateTime?
  loginAttempts            Int                           @default(0)
  notes                    String?
  hasCompletedOnboarding   Boolean                       @default(false)
  lastOnboardingStep       Int                           @default(0)
  onboardingCompletionDate DateTime?
  notifications            Notification[]
  accounts                 Account[]
  admin                    Admin?
  announcements            Announcement[]
  deliveryAnnouncements    Announcement[]                @relation("AnnouncementDeliverer")
  performedAuditLogs       AuditLog[]                    @relation("AuditLogPerformer")
  boxes                    Box[]
  client                   Client?
  deliverer                Deliverer?
  deliveryApplications     DeliveryApplication[]
  financialTasks           FinancialTask[]
  reviewedDocuments        Document[]                    @relation("DocumentReviewer")
  documents                Document[]
  merchant                 Merchant?
  provider                 Provider?
  reservations             Reservation[]
  sessions                 Session[]
  activityLogs             UserActivityLog[]
  verificationHistory      VerificationHistory[]
  verifiedHistories        VerificationHistory[]         @relation("VerifierRelation")
  submittedVerifications   Verification[]                @relation("SubmitterRelation")
  verifications            Verification[]                @relation("VerifierRelation")
  providedServices         Service[]
  providerAvailability     ProviderAvailability[]
  clientBookings           ServiceBooking[]              @relation("ClientBookings")
  providerBookings         ServiceBooking[]              @relation("ProviderBookings")
  isProvider               Boolean                       @default(false)
  providerBio              String?
  providerLocationLat      Float?
  providerLocationLng      Float?
  providerAddress          String?
  providerZipCode          String?
  providerCity             String?
  providerVerified         Boolean                       @default(false)
  favorites                DelivererFavorite[] // Relation avec les favoris
  clientDeliveries         Delivery[]                    @relation("ClientDeliveries")
  delivererDeliveries      Delivery[]                    @relation("DelivererDeliveries")
  boxUsageHistory          BoxUsageHistory[] // Historique d'utilisation des box par le client
  boxSubscriptions         BoxAvailabilitySubscription[] // Abonnements aux notifications de disponibilité
  payments                 Payment[]
  wallet                   Wallet?
  paymentMethods           PaymentMethod[]
  subscriptions            Subscription[]
  invoices                 Invoice[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime
  type       TokenType @default(EMAIL_VERIFICATION)
  used       Boolean   @default(false)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Client {
  id                String    @id @default(cuid())
  userId            String    @unique
  address           String?
  phone             String?
  preferences       Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  city              String?
  state             String?
  postalCode        String?
  country           String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveryAddresses Address[] // Adresses de livraison multiples
  preferredLanguage String? // Langue préférée
  newsletterOptIn   Boolean   @default(false) // Opt-in pour la newsletter
  notificationPrefs Json? // Préférences de notification spécifiques au client
  avatarUrl         String? // URL de l'avatar personnalisé

  @@map("clients")
}

model Deliverer {
  id                  String    @id @default(cuid())
  userId              String    @unique
  address             String?
  phone               String
  vehicleType         String?
  licensePlate        String?
  isVerified          Boolean   @default(false)
  availableHours      Json?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  verificationDate    DateTime?
  maxCapacity         Float?
  currentLocation     String?
  isActive            Boolean   @default(false)
  rating              Float?
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceZones        Json? // Zones de livraison préférées (format GeoJSON)
  bio                 String? // Description personnelle
  yearsOfExperience   Int? // Années d'expérience
  preferredVehicle    String? // Type de véhicule préféré
  maxWeightCapacity   Float? // Capacité de poids maximale en kg
  availableDays       String[] // Jours disponibles
  bankInfo            Json? // Informations bancaires (cryptées)
  taxIdentifier       String? // Identifiant fiscal
  deliveryPreferences Json? // Préférences de livraison

  @@map("deliverers")
}

model Merchant {
  id               String     @id @default(cuid())
  userId           String     @unique
  companyName      String
  address          String
  phone            String
  businessType     String?
  vatNumber        String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  businessName     String?
  businessAddress  String?
  businessCity     String?
  businessState    String?
  businessPostal   String?
  businessCountry  String?
  taxId            String?
  websiteUrl       String?
  isVerified       Boolean    @default(false)
  verificationDate DateTime?
  contracts        Contract[]
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  logoUrl          String? // URL du logo de l'entreprise
  coverPhotoUrl    String? // URL de la photo de couverture
  openingHours     Json? // Heures d'ouverture
  description      String? // Description de l'entreprise
  socialLinks      Json? // Liens sociaux
  paymentMethods   String[] // Méthodes de paiement acceptées
  deliveryOptions  String[] // Options de livraison proposées
  certifications   String[] // Certifications professionnelles
  foundingYear     Int? // Année de fondation
  employeeCount    Int? // Nombre d'employés

  @@map("merchants")
}

model Provider {
  id                 String    @id @default(cuid())
  userId             String    @unique
  companyName        String?
  address            String
  phone              String
  services           String[]
  isVerified         Boolean   @default(false)
  rating             Float?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  serviceType        String?
  description        String?
  availability       String?
  verificationDate   DateTime?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills             Skill[]
  professionalBio    String? // Biographie professionnelle
  serviceRadius      Int? // Rayon de service en km
  portfolioUrls      String[] // URLs du portfolio
  qualifications     String[] // Qualifications professionnelles
  yearsInBusiness    Int? // Années d'activité
  insuranceInfo      Json? // Informations d'assurance
  workSchedule       Json? // Horaires de travail détaillés
  serviceFees        Json? // Structure des frais
  cancellationPolicy String? // Politique d'annulation
  languages          String[] // Langues parlées

  @@map("providers")
}

model Admin {
  id               String   @id @default(cuid())
  userId           String   @unique
  permissions      String[]
  department       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Document {
  id                  String                @id @default(cuid())
  type                DocumentType
  userId              String
  filename            String
  fileUrl             String
  mimeType            String
  fileSize            Int
  uploadedAt          DateTime              @default(now())
  expiryDate          DateTime?
  notes               String?
  isVerified          Boolean               @default(false)
  verificationStatus  VerificationStatus    @default(PENDING)
  rejectionReason     String?
  reviewerId          String?
  reviewer            User?                 @relation("DocumentReviewer", fields: [reviewerId], references: [id])
  user                User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  verificationHistory VerificationHistory[]
  verifications       Verification[]

  @@index([userId])
  @@index([type])
  @@index([verificationStatus])
  @@map("documents")
}

model Verification {
  id              String             @id @default(cuid())
  status          VerificationStatus @default(PENDING)
  requestedAt     DateTime           @default(now())
  verifiedAt      DateTime?
  documentId      String
  submitterId     String
  verifierId      String?
  notes           String?
  rejectionReason String?
  document        Document           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  submitter       User               @relation("SubmitterRelation", fields: [submitterId], references: [id])
  verifier        User?              @relation("VerifierRelation", fields: [verifierId], references: [id])

  @@index([documentId])
  @@index([submitterId])
  @@index([verifierId])
  @@index([status])
  @@map("verifications")
}

model Contract {
  id         String         @id @default(cuid())
  merchantId String
  title      String
  content    String
  status     ContractStatus @default(DRAFT)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  signedAt   DateTime?
  expiresAt  DateTime?
  fileUrl    String?
  merchant   Merchant       @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@index([merchantId])
  @@index([status])
  @@map("contracts")
}

model Skill {
  id          String   @id @default(cuid())
  providerId  String
  name        String
  description String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  provider    Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@map("skills")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  link      String?
  data      String?
  read      Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
}

model VerificationHistory {
  id            String             @id @default(cuid())
  status        VerificationStatus
  comment       String?
  createdAt     DateTime           @default(now())
  documentId    String?
  userId        String
  verifiedById  String
  reason        String?
  internalNotes String?
  document      Document?          @relation(fields: [documentId], references: [id])
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifiedBy    User               @relation("VerifierRelation", fields: [verifiedById], references: [id])

  @@index([documentId])
  @@index([userId])
  @@index([verifiedById])
  @@map("verification_history")
}

model Warehouse {
  id             String   @id @default(cuid())
  name           String
  location       String
  address        String
  capacity       Float
  occupied       Float    @default(0)
  description    String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  latitude       Float?
  longitude      Float?
  openingHours   Json? // Structure: {day: {open: "08:00", close: "18:00"}}
  contactPhone   String?
  contactEmail   String?
  imageUrl       String?
  boxes          Box[]
  availableBoxes Int      @default(0)
  reservedBoxes  Int      @default(0)

  @@map("warehouses")
}

model Box {
  id                  String                        @id @default(cuid())
  warehouseId         String
  name                String
  size                Float
  boxType             BoxType                       @default(STANDARD)
  isOccupied          Boolean                       @default(false)
  clientId            String?
  pricePerDay         Float
  description         String?
  locationDescription String? // Description de l'emplacement dans l'entrepôt
  floorLevel          Int                           @default(0)
  maxWeight           Float? // Poids maximum supporté (en kg)
  dimensions          Json? // {width: Float, height: Float, depth: Float}
  features            String[] // ["climate-controlled", "secure", "24h-access"]
  status              BoxStatus                     @default(AVAILABLE)
  lastInspectedAt     DateTime?
  createdAt           DateTime                      @default(now())
  updatedAt           DateTime                      @updatedAt
  client              User?                         @relation(fields: [clientId], references: [id])
  warehouse           Warehouse                     @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  reservations        Reservation[]
  usageHistory        BoxUsageHistory[]
  subscriptions       BoxAvailabilitySubscription[]

  @@index([warehouseId])
  @@index([clientId])
  @@index([status])
  @@map("boxes")
}

model Reservation {
  id              String            @id @default(cuid())
  boxId           String
  clientId        String
  startDate       DateTime
  endDate         DateTime
  status          ReservationStatus @default(ACTIVE)
  totalPrice      Float
  paymentStatus   PaymentStatus     @default(PENDING)
  paymentId       String?
  accessCode      String? // Code d'accès temporaire
  lastAccessed    DateTime? // Dernière fois que la box a été accédée
  notes           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  cancelledAt     DateTime?
  cancelReason    String?
  extendedCount   Int               @default(0)
  originalEndDate DateTime? // Date de fin originale avant extension
  usageHistory    BoxUsageHistory[]
  box             Box               @relation(fields: [boxId], references: [id], onDelete: Cascade)
  client          User              @relation(fields: [clientId], references: [id])

  @@index([boxId])
  @@index([clientId])
  @@index([status])
  @@map("reservations")
}

model BoxUsageHistory {
  id            String        @id @default(cuid())
  boxId         String
  reservationId String?
  clientId      String
  actionType    BoxActionType
  actionTime    DateTime      @default(now())
  details       String?
  ipAddress     String?
  deviceInfo    String?
  box           Box           @relation(fields: [boxId], references: [id], onDelete: Cascade)
  reservation   Reservation?  @relation(fields: [reservationId], references: [id])
  client        User          @relation(fields: [clientId], references: [id])

  @@index([boxId])
  @@index([reservationId])
  @@index([clientId])
  @@map("box_usage_history")
}

model BoxAvailabilitySubscription {
  id                      String    @id @default(cuid())
  boxId                   String
  clientId                String
  startDate               DateTime?
  endDate                 DateTime?
  minSize                 Float?
  maxPrice                Float?
  boxType                 BoxType?
  warehouseId             String?
  isActive                Boolean   @default(true)
  notificationPreferences Json? // {email: Boolean, sms: Boolean, push: Boolean}
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  lastNotified            DateTime?
  box                     Box       @relation(fields: [boxId], references: [id], onDelete: Cascade)
  client                  User      @relation(fields: [clientId], references: [id])

  @@index([boxId])
  @@index([clientId])
  @@map("box_availability_subscriptions")
}

model UserActivityLog {
  id           String       @id @default(cuid())
  userId       String
  activityType ActivityType
  details      String?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activity_logs")
}

model AuditLog {
  id            String   @id @default(cuid())
  entityType    String
  entityId      String
  action        String
  performedById String
  changes       Json?
  createdAt     DateTime @default(now())
  performedBy   User     @relation("AuditLogPerformer", fields: [performedById], references: [id])

  @@map("audit_logs")
}

model Announcement {
  id                  String                @id @default(cuid())
  title               String
  description         String
  type                AnnouncementType
  status              AnnouncementStatus    @default(PENDING)
  priority            AnnouncementPriority  @default(MEDIUM)
  pickupAddress       String
  pickupLongitude     Float?
  pickupLatitude      Float?
  deliveryAddress     String
  deliveryLongitude   Float?
  deliveryLatitude    Float?
  weight              Float?
  width               Float?
  height              Float?
  length              Float?
  isFragile           Boolean               @default(false)
  needsCooling        Boolean               @default(false)
  pickupDate          DateTime?
  pickupTimeWindow    String?
  deliveryDate        DateTime?
  deliveryTimeWindow  String?
  isFlexible          Boolean               @default(false)
  suggestedPrice      Float?
  finalPrice          Float?
  isNegotiable        Boolean               @default(true)
  paymentStatus       String?
  clientId            String
  delivererId         String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  viewCount           Int                   @default(0)
  applicationsCount   Int                   @default(0)
  cancelReason        String?
  notes               String?
  tags                String[]
  photos              String[]              @default([])
  estimatedDistance   Float? // Distance estimée en km
  estimatedDuration   Int? // Durée estimée en minutes
  requiresSignature   Boolean               @default(false)
  requiresId          Boolean               @default(false)
  specialInstructions String? // Instructions spéciales pour le livreur
  isFavorite          Boolean               @default(false) // Pour marquer comme favoris par les livreurs
  client              User                  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  deliverer           User?                 @relation("AnnouncementDeliverer", fields: [delivererId], references: [id])
  applications        DeliveryApplication[]
  favorites           DelivererFavorite[] // Relation avec les favoris

  @@map("announcements")
}

model DeliveryApplication {
  id                    String       @id @default(cuid())
  announcementId        String
  delivererId           String
  proposedPrice         Float?
  message               String?
  status                String       @default("PENDING")
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  estimatedPickupTime   DateTime? // Heure estimée de ramassage
  estimatedDeliveryTime DateTime? // Heure estimée de livraison
  isPreferred           Boolean      @default(false) // Marqué comme préféré par le client
  notes                 String? // Notes supplémentaires
  announcement          Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  deliverer             User         @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  @@map("delivery_applications")
}

model Service {
  id          String           @id @default(cuid())
  name        String
  description String
  price       Decimal
  duration    Int // Durée en minutes
  categoryId  String
  category    ServiceCategory  @relation(fields: [categoryId], references: [id])
  providerId  String
  provider    User             @relation(fields: [providerId], references: [id])
  bookings    ServiceBooking[]
  payments    Payment[]
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([providerId])
  @@index([categoryId])
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  services    Service[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProviderAvailability {
  id         String   @id @default(cuid())
  providerId String
  provider   User     @relation(fields: [providerId], references: [id])
  dayOfWeek  Int // 0-6 pour lundi-dimanche
  startTime  DateTime // Heure de début
  endTime    DateTime // Heure de fin
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([providerId])
}

model ServiceBooking {
  id         String         @id @default(cuid())
  clientId   String
  client     User           @relation("ClientBookings", fields: [clientId], references: [id])
  providerId String
  provider   User           @relation("ProviderBookings", fields: [providerId], references: [id])
  serviceId  String
  service    Service        @relation(fields: [serviceId], references: [id])
  startTime  DateTime
  endTime    DateTime
  status     BookingStatus  @default(PENDING)
  totalPrice Decimal
  paymentId  String?
  payment    Payment?       @relation(fields: [paymentId], references: [id])
  notes      String?
  review     ServiceReview?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@index([clientId])
  @@index([providerId])
  @@index([serviceId])
  @@index([paymentId])
}

model ServiceReview {
  id        String         @id @default(cuid())
  bookingId String         @unique
  booking   ServiceBooking @relation(fields: [bookingId], references: [id])
  rating    Int // 1-5 étoiles
  comment   String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Payment {
  id                 String         @id @default(cuid())
  amount             Decimal
  currency           String
  status             PaymentStatus
  description        String?
  userId             String
  isEscrow           Boolean        @default(false)
  escrowReleaseCode  String?
  escrowReleaseDate  DateTime?
  escrowReleasedAt   DateTime?
  stripePaymentId    String?
  paymentIntentId    String?
  deliveryId         String?        @unique
  serviceId          String?
  subscriptionId     String?
  invoiceId          String?
  commissionAmount   Decimal?
  commissionId       String?
  refundId           String?
  refundedAmount     Decimal?
  refundedAt         DateTime?
  disputeId          String?
  disputeStatus      String?
  metadata           Json?
  capturedAt         DateTime?
  paymentMethodType  String?
  paymentMethodId    String?
  receiptUrl         String?
  errorMessage       String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  source             String?        // DELIVERY, SERVICE, SUBSCRIPTION, MERCHANT_FEE
  notes              String?
  paymentProvider    String         @default("STRIPE")
  isRecurring        Boolean        @default(false)
  recurringFrequency String?        // MONTHLY, ANNUAL
  processingFee      Decimal?       // Frais de traitement
  taxAmount          Decimal?       // Montant de la TVA
  taxRate            Decimal?       // Taux de TVA
  paymentReference   String?        // Référence externe du paiement
  ipAddress          String?        // Adresse IP pour détection de fraude
  user               User           @relation(fields: [userId], references: [id])
  invoice            Invoice?       @relation(fields: [invoiceId], references: [id])
  delivery           Delivery?      @relation("PaymentToDelivery", fields: [deliveryId], references: [id])
  service            Service?       @relation(fields: [serviceId], references: [id])
  subscription       Subscription?  @relation(fields: [subscriptionId], references: [id])
  commission         Commission?    @relation(fields: [commissionId], references: [id])
  bookings           ServiceBooking[]

  @@index([userId])
  @@index([deliveryId])
  @@index([serviceId])
  @@index([subscriptionId])
  @@index([invoiceId])
  @@index([commissionId])
  @@map("payments")
}

model DelivererFavorite {
  id             String   @id @default(cuid())
  delivererId    String
  announcementId String
  createdAt      DateTime @default(now())

  // Relations
  announcement Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  deliverer    User         @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  // Index unique pour éviter les doublons
  @@unique([delivererId, announcementId])
  @@map("deliverer_favorites")
}

model Wallet {
  id                     String              @id @default(cuid())
  userId                 String              @unique
  balance                Decimal             @default(0)
  currency               String              @default("EUR")
  transactions           WalletTransaction[]
  withdrawalRequests     WithdrawalRequest[]
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  isActive               Boolean             @default(true)
  totalEarned            Decimal?
  totalWithdrawn         Decimal?
  lastTransactionAt      DateTime?
  stripeConnectAccountId String?
  stripeCustomerId       String?
  automaticWithdrawal    Boolean             @default(false)
  withdrawalThreshold    Decimal?
  withdrawalDay          Int?
  minimumWithdrawalAmount Decimal            @default(10)
  accountType            String?             // express, standard
  accountVerified        Boolean             @default(false)
  user                   User                @relation(fields: [userId], references: [id])
  encryptedBankInfo      String?             // IBAN et informations bancaires chiffrées
  notificationThreshold  Decimal?            // Seuil pour déclenchement notifications solde
  notificationsEnabled   Boolean             @default(true)
  lastWithdrawalAt       DateTime?
  earningsThisMonth      Decimal?            // Gains du mois en cours
  earningsLastMonth      Decimal?            // Gains du mois précédent
  taxReportingEnabled    Boolean             @default(false)
  fiscalCategory         String?             // Catégorie fiscale (auto-entrepreneur, etc.)
  taxIdentifier          String?             // Numéro fiscal

  @@map("wallets")
}

model WalletTransaction {
  id                String             @id @default(cuid())
  walletId          String
  amount            Decimal
  currency          String
  type              TransactionType
  status            TransactionStatus  @default(PENDING)
  reference         String?
  description       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  completedAt       DateTime?
  failedAt          DateTime?
  failureReason     String?
  stripeTransferId  String?
  paymentId         String?
  withdrawalId      String?
  metadata          Json?
  wallet            Wallet             @relation(fields: [walletId], references: [id])
  deliveryId        String?            // ID de la livraison liée
  serviceId         String?            // ID du service lié
  commissionRate    Decimal?           // Taux de commission appliqué
  balanceAfter      Decimal?           // Solde après la transaction
  previousBalance   Decimal?           // Solde avant la transaction
  sourceTransaction String?            // Transaction à l'origine
  taxAmount         Decimal?           // Montant de taxe
  taxRate           Decimal?           // Taux de taxe
  reportingCategory String?            // Catégorie pour rapports financiers
  isSystemGenerated Boolean            @default(false) // Transaction générée par le système

  @@index([walletId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@map("wallet_transactions")
}

model BankTransfer {
  id                    String             @id @default(cuid())
  withdrawalRequestId   String?            @unique
  amount                Decimal
  currency              String
  status                TransactionStatus
  reference             String?
  senderName            String?
  senderIban            String?
  recipientName         String
  recipientIban         String
  recipientBic          String?
  bankName              String?
  initiatedAt           DateTime
  estimatedArrivalDate  DateTime?
  completedAt           DateTime?
  failedAt              DateTime?
  failureReason         String?
  transferReference     String?
  externalReference     String?
  withdrawalRequest     WithdrawalRequest? @relation(fields: [withdrawalRequestId], references: [id])
  metadata              Json?
  transferMethod        String             @default("SEPA") // SEPA, SWIFT, etc.
  platformTransactionId String?            // ID de transaction externe
  transferFee           Decimal?           // Frais de transfert
  isRecipientVerified   Boolean            @default(false)
  isSenderVerified      Boolean            @default(true)
  notes                 String?
  createdBy             String?            // ID de l'administrateur qui a initié le transfert
  endorsedBy            String?            // ID de l'administrateur qui a validé le transfert
  transferProofUrl      String?            // URL de la preuve de transfert

  @@map("bank_transfers")
}

model WithdrawalRequest {
  id                 String           @id @default(cuid())
  walletId           String
  amount             Decimal
  currency           String
  status             WithdrawalStatus @default(PENDING)
  requestedAt        DateTime         @default(now())
  processedAt        DateTime?
  preferredMethod    String?          // BANK_TRANSFER, STRIPE_CONNECT
  reference          String?
  wallet             Wallet           @relation(fields: [walletId], references: [id])
  bankTransfer       BankTransfer?
  rejectionReason    String?
  processorId        String?          // ID de l'administrateur qui a traité la demande
  processorComments  String?
  supportingDocuments String[]        // URLs des documents justificatifs
  priority           Int              @default(0)
  reviewRequired     Boolean          @default(false)
  lastNotificationAt DateTime?
  estimatedFee       Decimal?         // Frais estimés
  estimatedArrival   DateTime?        // Date d'arrivée estimée
  taxWithheld        Decimal?         // Montant de taxe retenu à la source
  expedited          Boolean          @default(false) // Demande prioritaire
  accountVerified    Boolean          @default(true)  // Compte vérifié 

  @@index([walletId])
  @@index([status])
  @@index([requestedAt])
  @@map("withdrawal_requests")
}

model Subscription {
  id                    String               @id @default(cuid())
  userId                String
  planType              PlanType
  status                SubscriptionStatus
  startDate             DateTime
  endDate               DateTime?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  cancelledAt           DateTime?
  autoRenew             Boolean              @default(true)
  stripeSubscriptionId  String?
  cancelAtPeriodEnd     Boolean              @default(false)
  currentPeriodStart    DateTime?
  currentPeriodEnd      DateTime?
  price                 Decimal?
  currency              String               @default("EUR")
  metadata              Json?
  user                  User                 @relation(fields: [userId], references: [id])
  payments              Payment[]
  billingCycleAnchor    Int?                 // Jour du mois pour facturation
  nextInvoiceDate       DateTime?            // Date prévue prochaine facture
  previousPlanType      PlanType?            // Plan précédent
  upgradedAt            DateTime?            // Date de passage à un plan supérieur
  downgradedAt          DateTime?            // Date de passage à un plan inférieur
  trialEnd              DateTime?            // Fin de période d'essai
  trialStart            DateTime?            // Début de période d'essai
  couponApplied         String?              // Code promo appliqué
  discountAmount        Decimal?             // Montant de la remise
  discountPercent       Decimal?             // Pourcentage de remise
  discountDuration      String?              // Durée de la remise (ONCE, FOREVER, REPEATING)
  discountDurationMonths Int?                // Nombre de mois pour remise REPEATING
  paymentFailureCount   Int                  @default(0)
  lastPaymentFailure    DateTime?            // Dernière tentative de paiement échouée
  gracePeriodEnd        DateTime?            // Fin de période de grâce
  pausedAt              DateTime?            // Date de mise en pause
  resumeAt              DateTime?            // Date de reprise prévue
  customPlanFeatures    Json?                // Caractéristiques personnalisées du plan

  @@index([userId])
  @@index([status])
  @@map("subscriptions")
}

model PaymentMethod {
  id               String   @id @default(cuid())
  userId           String
  type             String   // CARD, BANK_ACCOUNT
  provider         String   @default("STRIPE")
  token            String
  expiryMonth      Int?
  expiryYear       Int?
  last4            String?
  brand            String?
  isDefault        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  billingEmail     String?
  billingName      String?
  billingAddress   String?
  billingCity      String?
  billingState     String?
  billingPostal    String?
  billingCountry   String?
  user             User     @relation(fields: [userId], references: [id])
  isDeleted        Boolean  @default(false)
  deletedAt        DateTime?
  fingerprint      String?  // Empreinte unique pour détecter les doublons
  mandateId        String?  // ID du mandat SEPA
  mandateStatus    String?  // Statut du mandat SEPA
  mandateCreatedAt DateTime? // Date de création du mandat SEPA

  @@index([userId])
  @@index([isDefault])
  @@map("payment_methods")
}

model Invoice {
  id                 String         @id @default(cuid())
  invoiceNumber      String         @unique
  userId             String
  merchantId         String?
  providerId         String?
  status             InvoiceStatus
  issueDate          DateTime
  dueDate            DateTime
  paidDate           DateTime?
  amount             Decimal
  taxAmount          Decimal?
  totalAmount        Decimal
  currency           String         @default("EUR")
  pdfUrl             String?
  description        String?
  serviceDescription String?
  items              InvoiceItem[]
  payments           Payment[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  user               User           @relation(fields: [userId], references: [id])
  billingPeriodStart DateTime?      // Début de période de facturation
  billingPeriodEnd   DateTime?      // Fin de période de facturation
  billingName        String?
  billingAddress     String?
  billingCity        String?
  billingState       String?
  billingPostal      String?
  billingCountry     String?
  companyName        String?
  taxId              String?        // Numéro de TVA
  taxRate            Decimal?       // Taux de TVA
  notes              String?        // Notes additionnelles
  termsAndConditions String?
  invoiceType        String         @default("SERVICE") // SERVICE, SUBSCRIPTION, MERCHANT_FEE
  paymentTerms       String?
  remoteStorageUrl   String?        // URL de stockage externe pour archivage légal
  isCreditNote       Boolean        @default(false)
  originalInvoiceId  String?        // En cas de note de crédit
  refundReason       String?        // Raison du remboursement si note de crédit
  emailSentAt        DateTime?      // Date d'envoi par email
  reminderSentAt     DateTime?      // Date d'envoi de rappel
  locale             String         @default("fr")      // Langue de la facture

  @@index([userId])
  @@index([status])
  @@index([issueDate])
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  description String
  quantity    Decimal
  unitPrice   Decimal
  amount      Decimal
  taxRate     Decimal?
  taxAmount   Decimal?
  discount    Decimal?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  serviceId   String?  // ID du service associé
  deliveryId  String?  // ID de la livraison associée
  itemCode    String?  // Code d'article pour la comptabilité
  periodStart DateTime? // Début de période pour facturation récurrente
  periodEnd   DateTime? // Fin de période pour facturation récurrente
  metadata    Json?     // Métadonnées additionnelles

  @@index([invoiceId])
  @@map("invoice_items")
}

model PromotionRecord {
  id          String   @id @default(cuid())
  type        String // COMMISSION, DISCOUNT, etc.
  serviceType String? // DELIVERY, SERVICE, null pour global
  rate        Decimal // Taux de la promotion
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  description String?
  createdAt   DateTime @default(now())

  @@map("promotion_records")
}

model Commission {
  id                String   @id @default(cuid())
  serviceType       String
  rate              Decimal
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  minimumAmount     Decimal?
  maximumAmount     Decimal?
  flatFee           Decimal?
  payments          Payment[] // Paiements avec cette commission
  description       String?
  applicableRoles   String[]  // Rôles auxquels s'applique cette commission
  startDate         DateTime?
  endDate           DateTime?
  tierThresholds    Json?     // Paliers pour commissions progressives
  currency          String    @default("EUR")
  calculationType   String    @default("PERCENTAGE") // PERCENTAGE, FIXED, TIERED
  payoutSchedule    String?   @default("IMMEDIATE") // IMMEDIATE, DAILY, WEEKLY, MONTHLY
  promotionId       String?   // ID de la promotion associée si commission spéciale
  countryCode       String?   // Code pays si commission spécifique par pays
  productCategory   String?   // Catégorie de produit si spécifique

  @@index([serviceType])
  @@index([isActive])
  @@map("commissions")
}

model BillingCycle {
  id               String    @id @default(cuid())
  merchantId       String?
  providerId       String?
  periodStart      DateTime
  periodEnd        DateTime
  status           String    @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  invoiceId        String?   // ID de la facture générée
  totalAmount      Decimal?
  serviceFees      Decimal?
  commissionFees   Decimal?
  processingFees   Decimal?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  scheduledRunDate DateTime  // Date prévue de la prochaine facturation
  serviceSummary   Json?     // Résumé des services facturés
  lastRunAt        DateTime? // Dernière exécution
  errorMessage     String?   // Message d'erreur
  retryCount       Int       @default(0)

  @@index([periodStart, periodEnd])
  @@index([status])
  @@map("billing_cycles")
}

model FinancialAccount {
  id                 String   @id @default(cuid())
  name               String
  accountType        String   // OPERATIONAL, ESCROW, REVENUE, TAX
  balance            Decimal  @default(0)
  currency           String   @default("EUR")
  description        String?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  reconciliationDate DateTime? // Date de dernière réconciliation
  bankAccount        String?  // Compte bancaire associé
  accountNumber      String?  // Numéro de compte
  notes              String?

  @@map("financial_accounts")
}

model TaxRate {
  id          String   @id @default(cuid())
  name        String
  rate        Decimal
  countryCode String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  taxType     String   @default("VAT") // VAT, GST, SALES_TAX
  region      String?  // Région ou état
  startDate   DateTime?
  endDate     DateTime?

  @@index([countryCode])
  @@index([isActive])
  @@map("tax_rates")
}

model FinancialReport {
  id               String   @id @default(cuid())
  reportType       String   // MONTHLY, QUARTERLY, ANNUAL, CUSTOM
  periodStart      DateTime
  periodEnd        DateTime
  generatedAt      DateTime @default(now())
  totalRevenue     Decimal?
  totalCommissions Decimal?
  totalFees        Decimal?
  netRevenue       Decimal?
  fileUrl          String?
  status           String   @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  generatedBy      String?  // ID de l'administrateur
  data             Json?    // Données complètes du rapport
  notes            String?

  @@index([reportType])
  @@index([periodStart, periodEnd])
  @@map("financial_reports")
}

model FinancialTask {
  id          String             @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean            @default(false)
  completedAt DateTime?
  priority    FinancialTaskPriority
  category    FinancialTaskCategory
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  userId      String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([priority])
  @@index([category])
  @@index([completed])
  @@map("financial_tasks")
}

enum UserRole {
  CLIENT
  DELIVERER
  MERCHANT
  PROVIDER
  ADMIN
}

enum UserStatus {
  PENDING_VERIFICATION
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocumentType {
  ID_CARD
  DRIVING_LICENSE
  VEHICLE_REGISTRATION
  INSURANCE
  QUALIFICATION_CERTIFICATE
  PROOF_OF_ADDRESS
  BUSINESS_REGISTRATION
  OTHER
}

enum ContractStatus {
  DRAFT
  PENDING_SIGNATURE
  ACTIVE
  TERMINATED
  EXPIRED
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR_AUTH
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum ActivityType {
  LOGIN
  LOGOUT
  PROFILE_UPDATE
  PASSWORD_CHANGE
  STATUS_CHANGE
  ROLE_CHANGE
  VERIFICATION_SUBMIT
  VERIFICATION_REVIEW
  DOCUMENT_UPLOAD
  ACCOUNT_CREATION
  OTHER
}

enum AnnouncementStatus {
  DRAFT
  PENDING
  PUBLISHED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AnnouncementType {
  PACKAGE
  GROCERIES
  DOCUMENTS
  MEAL
  FURNITURE
  OTHER
}

enum AnnouncementPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum BookingStatus {
  PENDING // En attente de confirmation
  CONFIRMED // Confirmé par le prestataire
  COMPLETED // Service effectué
  CANCELLED // Annulé
  RESCHEDULED // Reprogrammé
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PENDING_CAPTURE
  AUTHORIZED
  CAPTURED
  DISPUTED
  CANCELLED
  PARTIAL_REFUND
  PROCESSING
  REQUIRES_ACTION
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  CONFIRMED
  CANCELLED
  DISPUTED
}

model Delivery {
  id        String         @id @default(cuid())
  status    DeliveryStatus @default(PENDING)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  pickupAddress   String
  deliveryAddress String
  pickupDate      DateTime
  deliveryDate    DateTime?

  currentLat         Float?
  currentLng         Float?
  lastLocationUpdate DateTime?

  estimatedArrival DateTime?
  confirmationCode String?

  clientId    String
  client      User    @relation("ClientDeliveries", fields: [clientId], references: [id])
  delivererId String?
  deliverer   User?   @relation("DelivererDeliveries", fields: [delivererId], references: [id])

  logs        DeliveryLog[]
  coordinates DeliveryCoordinates[]
  rating      DeliveryRating?
  proofs      DeliveryProof[]
  payment     Payment?      @relation("PaymentToDelivery")

  @@index([clientId])
  @@index([delivererId])
}

model DeliveryLog {
  id         String         @id @default(cuid())
  deliveryId String
  delivery   Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  status     DeliveryStatus
  timestamp  DateTime       @default(now())
  note       String?
  latitude   Float?
  longitude  Float?

  @@index([deliveryId])
}

model DeliveryCoordinates {
  id         String   @id @default(cuid())
  deliveryId String
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  latitude   Float
  longitude  Float
  timestamp  DateTime @default(now())

  @@index([deliveryId])
}

model DeliveryProof {
  id          String   @id @default(cuid())
  deliveryId  String
  delivery    Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  type        String // PHOTO, SIGNATURE, CODE
  url         String?
  confirmedBy String? // User ID who confirmed
  confirmedAt DateTime @default(now())

  @@index([deliveryId])
}

model DeliveryRating {
  id         String   @id @default(cuid())
  deliveryId String   @unique
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  rating     Int // 1-5 stars
  comment    String?
  createdAt  DateTime @default(now())
}

enum BoxType {
  STANDARD
  CLIMATE_CONTROLLED
  SECURE
  EXTRA_LARGE
  REFRIGERATED
  FRAGILE
}

enum BoxStatus {
  AVAILABLE
  RESERVED
  OCCUPIED
  MAINTENANCE
  DAMAGED
  INACTIVE
}

enum BoxActionType {
  RESERVATION_CREATED
  RESERVATION_UPDATED
  RESERVATION_CANCELLED
  BOX_ACCESSED
  BOX_CLOSED
  PAYMENT_PROCESSED
  EXTENDED_RENTAL
  INSPECTION_COMPLETED
}

enum ReservationStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  OVERDUE
  EXTENDED
}

model Address {
  id         String  @id @default(cuid())
  label      String // Ex: "Domicile", "Travail"
  street     String
  city       String
  state      String?
  postalCode String
  country    String
  isDefault  Boolean @default(false)
  clientId   String
  client     Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  EARNING
  REFUND
  PLATFORM_FEE
  COMMISSION
  BONUS
  ADJUSTMENT
  TAX
  SERVICE_FEE
  DELIVERY_PAYOUT
  SERVICE_PAYOUT
  SUBSCRIPTION_PAYMENT
  MONTHLY_FEE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  DISPUTED
  REFUNDED
  PROCESSING
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REJECTED
  SCHEDULED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PAUSED
  PAST_DUE
  PENDING
  TRIALING
  INCOMPLETE
  UNPAID
}

enum PlanType {
  FREE
  STARTER
  PREMIUM
  CUSTOM
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  SENT
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
  PARTIALLY_PAID
}

enum FinancialTaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum FinancialTaskCategory {
  PAYMENT
  INVOICE
  WITHDRAWAL
  OTHER
}
