generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                  @id @default(cuid())
  email                    String                  @unique
  password                 String?                 // Ajout du champ password pour NextAuth
  emailVerified            Boolean                 @default(false)
  emailVerifiedAt          DateTime?
  name                     String?
  image                    String?
  role                     UserRole                @default(CLIENT)
  isActive                 Boolean                 @default(false)
  validationStatus         ValidationStatus        @default(PENDING)
  language                 String                  @default("fr")
  lastLoginAt              DateTime?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  accounts                 Account[]
  activityLogs             ActivityLog[]
  admin                    Admin?
  announcements            Announcement[]
  assignedAnnouncements    Announcement[]          @relation("AnnouncementDeliverer")
  auctionBids              AuctionBid[]
  bookings                 Booking[]
  ClaimAssessment          ClaimAssessment[]
  client                   Client?
  tutorialProgress         ClientTutorialProgress?
  deliverer                Deliverer?
  delivererRoutes          DelivererRoute[]        @relation("DelivererRoutes")
  clientDeliveries         Delivery[]              @relation("ClientDeliveries")
  delivererDeliveries      Delivery[]              @relation("DelivererDeliveries")
  deliveryGroups           DeliveryGroup[]
  clientDeliveryWarranties DeliveryWarranty[]      @relation("ClientDeliveryWarranties")
  delivererWarranties      DeliveryWarranty[]      @relation("DelivererWarranties")
  disputesReceived         Dispute[]               @relation("DisputeReported")
  disputesReported         Dispute[]               @relation("DisputeReporter")
  documents                Document[]
  documentGenerations      DocumentGeneration[]
  globalAvailabilities     GlobalAvailability[]
  groupingProposals        GroupingProposal[]
  influencerProgram        InfluencerProgram?
  InsuranceClaim           InsuranceClaim[]
  merchant                 Merchant?
  notifications            Notification[]
  clientOrders             Order[]                 @relation("ClientOrders")
  payments                 Payment[]               @relation("UserPayments")
  profile                  Profile?
  provider                 Provider?
  asReferee                Referral[]              @relation("UserAsReferee")
  asReferrer               Referral[]              @relation("UserAsReferrer")
  referrerCodes            ReferralCode[]          @relation("ReferrerCodes")
  referralRewards          ReferralReward[]
  referralStats            ReferralStats[]
  routeMatches             RouteMatch[]            @relation("RouteMatches")
  serviceWarranties        ServiceWarranty[]       @relation("ClientServiceWarranties")
  sessions                 Session[]
  storageBoxRentals        StorageBoxRental[]
  knowledgeBaseEntries     SupportKnowledgeBase[]
  supportTemplates         SupportTemplate[]
  assignedTickets          SupportTicket[]         @relation("TicketAssignee")
  authoredTickets          SupportTicket[]         @relation("TicketAuthor")
  ticketAttachments        TicketAttachment[]
  escalatedFromTickets     TicketEscalation[]      @relation("EscalationFrom")
  escalatedToTickets       TicketEscalation[]      @relation("EscalationTo")
  ticketMessages           TicketMessage[]
  wallet                   Wallet?
  walletOperations         WalletOperation[]
  warrantyClaims           WarrantyClaim[]

  @@index([email])
  @@index([role])
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  firstName   String?
  lastName    String?
  phone       String?
  avatar      String?
  dateOfBirth DateTime?
  address     String?
  city        String?
  postalCode  String?
  country     String    @default("FR")
  isVerified  Boolean   @default(false)
  verifiedAt  DateTime?
  language    String    @default("fr")
  timezone    String    @default("Europe/Paris")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         String   @id
  identifier String
  token      String   @unique
  expires    DateTime
  type       String
  createdAt  DateTime @default(now())

  @@index([expires])
  @@index([identifier])
  @@index([token])
  @@index([type])
}

model PasswordReset {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([token])
  @@index([email])
  @@index([expiresAt])
}

model Client {
  id                  String             @id @default(cuid())
  userId              String             @unique
  subscriptionPlan    SubscriptionPlan   @default(FREE)
  subscriptionStart   DateTime           @default(now())
  subscriptionEnd     DateTime?
  tutorialCompleted   Boolean            @default(false)
  tutorialCompletedAt DateTime?
  termsAcceptedAt     DateTime           @default(now())
  emailNotifications  Boolean            @default(true)
  pushNotifications   Boolean            @default(true)
  smsNotifications    Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  announcements       Announcement[]
  bookings            Booking[]
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments            Payment[]          @relation("ClientPayments")
  reviews             Review[]
  storageBoxes        StorageBoxRental[]

  @@index([userId])
  @@index([subscriptionPlan])
}

model Deliverer {
  id                      String                   @id @default(cuid())
  userId                  String                   @unique
  validationStatus        ValidationStatus         @default(PENDING)
  vehicleType             String?
  licensePlate            String?
  maxWeight               Float?
  maxVolume               Float?
  averageRating           Float?                   @default(0)
  totalDeliveries         Int                      @default(0)
  isActive                Boolean                  @default(true)
  nfcCardId               String?                  @unique
  activatedAt             DateTime?
  lastActiveAt            DateTime?
  coordinates             Json?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  Availability            Availability[]
  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  delivererAvailabilities DelivererAvailability[]
  DelivererCertification  DelivererCertification[]
  currentLocation         DelivererLocation?
  routes                  DeliveryRoute[]
  NFCCard                 NFCCard?
  trackingSessions        TrackingSession[]

  @@index([userId])
  @@index([isActive])
  @@index([averageRating])
}

model DeliveryRoute {
  id                String    @id @default(cuid())
  delivererId       String
  name              String
  fromAddress       String
  toAddress         String
  fromCoordinates   Json
  toCoordinates     Json
  schedule          Json
  isActive          Boolean   @default(true)
  maxCapacity       Int       @default(1)
  estimatedDuration Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  deliverer         Deliverer @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  @@index([delivererId])
  @@index([isActive])
}

model DelivererAvailability {
  id          String    @id @default(cuid())
  delivererId String
  dayOfWeek   Int
  startTime   String
  endTime     String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deliverer   Deliverer @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  @@index([delivererId])
  @@index([dayOfWeek])
}

model NFCCard {
  id          String    @id @default(cuid())
  delivererId String    @unique
  cardNumber  String    @unique
  isActive    Boolean   @default(true)
  issuedAt    DateTime  @default(now())
  lastUsedAt  DateTime?
  deliverer   Deliverer @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  @@index([cardNumber])
}

model Merchant {
  id                String            @id @default(cuid())
  userId            String            @unique
  companyName       String
  siret             String            @unique
  vatNumber         String?
  contractStatus    String            @default("PENDING")
  contractStartDate DateTime?
  contractEndDate   DateTime?
  commissionRate    Float             @default(0.15)
  rating            Float             @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  announcements     Announcement[]
  cartDropConfig    CartDropConfig?
  contract          Contract?
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  MerchantBilling   MerchantBilling[]
  orders            Order[]
  payments          Payment[]         @relation("MerchantPayments")

  @@index([userId])
  @@index([siret])
}

model CartDropConfig {
  id               String   @id @default(cuid())
  merchantId       String   @unique
  isActive         Boolean  @default(false)
  deliveryZones    Json[]
  timeSlots        Json[]
  maxOrdersPerSlot Int      @default(10)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  merchant         Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)
}

model Order {
  id                String           @id @default(cuid())
  merchantId        String
  clientId          String
  announcementId    String?          @unique
  orderNumber       String           @unique
  status            OrderStatus      @default(PENDING)
  totalAmount       Float
  deliveryFee       Float            @default(0)
  notes             String?
  deliveryAddress   String
  scheduledDate     DateTime?
  completedAt       DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  paymentId         String?
  merchantBillingId String?
  announcement      Announcement?    @relation(fields: [announcementId], references: [id])
  client            User             @relation("ClientOrders", fields: [clientId], references: [id])
  MerchantBilling   MerchantBilling? @relation(fields: [merchantBillingId], references: [id])
  merchant          Merchant         @relation(fields: [merchantId], references: [id])
  payment           Payment?         @relation(fields: [paymentId], references: [id])
  items             OrderItem[]

  @@index([merchantId])
  @@index([clientId])
  @@index([orderNumber])
  @@index([status])
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  name       String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Provider {
  id                    String                      @id @default(cuid())
  userId                String                      @unique
  validationStatus      ValidationStatus            @default(PENDING)
  businessName          String?
  siret                 String?                     @unique
  specialties           String[]
  hourlyRate            Float?
  description           String?
  averageRating         Float?                      @default(0)
  totalBookings         Int                         @default(0)
  isActive              Boolean                     @default(true)
  monthlyInvoiceDay     Int                         @default(30)
  activatedAt           DateTime?
  lastActiveAt          DateTime?
  zone                  Json?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  Availability          Availability[]
  bookings              Booking[]
  certifications        Certification[]
  interventions         Intervention[]
  user                  User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  availability          ProviderAvailability[]
  availabilityBlocks    ProviderAvailabilityBlock[]
  ProviderCertification ProviderCertification[]
  monthlyInvoices       ProviderMonthlyInvoice[]
  rates                 ProviderRate[]
  timeSlots             ProviderTimeSlot[]
  reviews               Review[]                    @relation("ProviderReviews")
  services              Service[]
  ServiceWarranty       ServiceWarranty[]

  @@index([userId])
}

model Service {
  id                 String      @id @default(cuid())
  providerId         String
  name               String
  description        String
  type               ServiceType
  basePrice          Float
  priceUnit          String      @default("HOUR")
  duration           Int?
  isActive           Boolean     @default(true)
  minAdvanceBooking  Int         @default(24)
  maxAdvanceBooking  Int         @default(720)
  cancellationPolicy String?
  requirements       String[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  bookings           Booking[]
  provider           Provider    @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([type])
  @@index([isActive])
}

model ProviderAvailability {
  id         String   @id @default(cuid())
  providerId String
  dayOfWeek  Int
  startTime  String
  endTime    String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([dayOfWeek])
}

model ProviderRate {
  id            String      @id @default(cuid())
  providerId    String
  serviceType   ServiceType
  baseRate      Float
  unitType      String      @default("HOUR")
  minimumCharge Float?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  provider      Provider    @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([serviceType])
}

model ProviderTimeSlot {
  id          String   @id @default(cuid())
  providerId  String
  date        DateTime
  startTime   String
  endTime     String
  isAvailable Boolean  @default(true)
  isRecurring Boolean  @default(false)
  bookingId   String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  booking     Booking? @relation(fields: [bookingId], references: [id])
  provider    Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([providerId, date, startTime])
  @@index([providerId])
  @@index([date])
}

model ProviderAvailabilityBlock {
  id         String   @id @default(cuid())
  providerId String
  startDate  DateTime
  endDate    DateTime
  reason     String?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([startDate, endDate])
}

model ProviderMonthlyInvoice {
  id               String                        @id @default(cuid())
  providerId       String
  month            Int
  year             Int
  totalHours       Float                         @default(0)
  totalAmount      Float                         @default(0)
  commissionRate   Float                         @default(0.15)
  commissionAmount Float                         @default(0)
  netAmount        Float                         @default(0)
  status           String                        @default("PENDING")
  invoiceNumber    String                        @unique
  invoiceUrl       String?
  sentAt           DateTime?
  paidAt           DateTime?
  dueDate          DateTime
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt
  interventions    ProviderInvoiceIntervention[]
  provider         Provider                      @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([providerId, month, year])
  @@index([providerId])
  @@index([month, year])
}

model ProviderInvoiceIntervention {
  id             String                 @id @default(cuid())
  invoiceId      String
  interventionId String
  hours          Float
  rate           Float
  amount         Float
  createdAt      DateTime               @default(now())
  intervention   Intervention           @relation(fields: [interventionId], references: [id])
  invoice        ProviderMonthlyInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@unique([invoiceId, interventionId])
  @@index([invoiceId])
  @@index([interventionId])
}

model Admin {
  id          String   @id @default(cuid())
  userId      String   @unique
  permissions String[] @default([])
  department  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Announcement {
  id                    String                     @id @default(cuid())
  title                 String
  description           String
  type                  AnnouncementType
  status                AnnouncementStatus         @default(DRAFT)
  authorId              String
  delivererId           String?
  pickupAddress         String
  pickupLatitude        Float?
  pickupLongitude       Float?
  deliveryAddress       String
  deliveryLatitude      Float?
  deliveryLongitude     Float?
  distance              Float?
  pickupDate            DateTime?
  deliveryDate          DateTime?
  isFlexibleDate        Boolean                    @default(false)
  preferredTimeSlot     String?
  isUrgent              Boolean                    @default(false)
  basePrice             Float
  finalPrice            Float?
  currency              String                     @default("EUR")
  isPriceNegotiable     Boolean                    @default(false)
  urgencyFee            Float?
  insuranceFee          Float?
  platformFee           Float?
  packageDetails        Json?
  personDetails         Json?
  shoppingDetails       Json?
  petDetails            Json?
  serviceDetails        Json?
  requiresValidation    Boolean                    @default(true)
  requiresInsurance     Boolean                    @default(false)
  allowsPartialDelivery Boolean                    @default(false)
  maxDeliverers         Int                        @default(1)
  recurringConfig       Json?
  estimatedDuration     Int?
  weight                Float?
  volume                Float?
  specialInstructions   String?
  customerNotes         String?
  internalNotes         String?
  viewCount             Int                        @default(0)
  matchCount            Int                        @default(0)
  expiresAt             DateTime?
  publishedAt           DateTime?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  clientId              String?
  merchantId            String?
  author                User                       @relation(fields: [authorId], references: [id])
  Client                Client?                    @relation(fields: [clientId], references: [id])
  deliverer             User?                      @relation("AnnouncementDeliverer", fields: [delivererId], references: [id])
  Merchant              Merchant?                  @relation(fields: [merchantId], references: [id])
  attachments           AnnouncementAttachment[]
  AnnouncementGroup     AnnouncementGroup[]
  notifications         AnnouncementNotification[]
  tracking              AnnouncementTracking[]
  delivery              Delivery?
  Dispute               Dispute[]
  GroupingProposal      GroupingProposal[]
  Order                 Order?
  PackageAnnouncement   PackageAnnouncement?
  payment               Payment?
  ReverseAuction        ReverseAuction?
  reviews               Review[]
  matches               RouteMatch[]
  ServiceAnnouncement   ServiceAnnouncement?

  @@index([authorId])
  @@index([delivererId])
  @@index([type])
  @@index([status])
  @@index([pickupLatitude, pickupLongitude])
  @@index([deliveryLatitude, deliveryLongitude])
  @@index([pickupDate])
  @@index([createdAt])
  @@index([isUrgent])
}

model PackageAnnouncement {
  id                  String       @id @default(cuid())
  announcementId      String       @unique
  weight              Float
  length              Float
  width               Float
  height              Float
  fragile             Boolean      @default(false)
  requiresInsurance   Boolean      @default(false)
  insuredValue        Float?
  specialInstructions String?
  announcement        Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
}

model ServiceAnnouncement {
  id                  String       @id @default(cuid())
  announcementId      String       @unique
  serviceType         ServiceType
  numberOfPeople      Int?
  duration            Int?
  recurringService    Boolean      @default(false)
  recurringPattern    String?
  specialRequirements String?
  preferredProviderId String?
  announcement        Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
}

model DelivererRoute {
  id               String             @id @default(cuid())
  delivererId      String
  title            String?
  description      String?
  startAddress     String
  startLatitude    Float
  startLongitude   Float
  endAddress       String
  endLatitude      Float
  endLongitude     Float
  waypoints        Json?
  startDate        DateTime
  endDate          DateTime
  isRecurring      Boolean            @default(false)
  recurringPattern String?
  maxPackages      Int                @default(5)
  maxWeight        Float?
  maxVolume        Float?
  vehicleType      String?
  isActive         Boolean            @default(true)
  autoAccept       Boolean            @default(false)
  maxDetour        Float              @default(5.0)
  acceptedTypes    AnnouncementType[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deliverer        User               @relation("DelivererRoutes", fields: [delivererId], references: [id])
  matches          RouteMatch[]

  @@index([delivererId])
  @@index([startDate])
  @@index([endDate])
  @@index([startLatitude, startLongitude])
  @@index([endLatitude, endLongitude])
  @@index([isActive])
}

model RouteMatch {
  id                String         @id @default(cuid())
  announcementId    String
  routeId           String
  delivererId       String
  distanceScore     Float
  timeScore         Float
  capacityScore     Float
  typeScore         Float
  globalScore       Float
  pickupDetour      Float
  deliveryDetour    Float
  estimatedDuration Int
  status            String         @default("PENDING")
  notifiedAt        DateTime?
  respondedAt       DateTime?
  expiresAt         DateTime
  createdAt         DateTime       @default(now())
  announcement      Announcement   @relation(fields: [announcementId], references: [id])
  deliverer         User           @relation("RouteMatches", fields: [delivererId], references: [id])
  route             DelivererRoute @relation(fields: [routeId], references: [id])

  @@unique([announcementId, routeId])
  @@index([delivererId])
  @@index([status])
  @@index([globalScore])
  @@index([expiresAt])
  @@index([createdAt])
}

model AnnouncementTracking {
  id             String             @id @default(cuid())
  announcementId String
  status         AnnouncementStatus
  message        String
  metadata       Json?
  createdBy      String?
  isPublic       Boolean            @default(true)
  createdAt      DateTime           @default(now())
  announcement   Announcement       @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@index([announcementId])
  @@index([status])
  @@index([createdAt])
}

model AnnouncementAttachment {
  id             String       @id @default(cuid())
  announcementId String
  filename       String
  originalName   String
  mimeType       String
  size           Int
  url            String
  uploadedBy     String
  createdAt      DateTime     @default(now())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@index([announcementId])
}

model AnnouncementNotification {
  id             String       @id @default(cuid())
  announcementId String
  userId         String
  type           String
  title          String
  message        String
  metadata       Json?
  sentAt         DateTime?
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  @@index([announcementId])
  @@index([userId])
  @@index([sentAt])
}

model Delivery {
  id                    String                  @id @default(cuid())
  announcementId        String                  @unique
  clientId              String
  delivererId           String
  status                DeliveryStatus          @default(PENDING)
  trackingNumber        String                  @unique @default(cuid())
  validationCode        String?
  pickupDate            DateTime?
  deliveryDate          DateTime?
  actualDeliveryDate    DateTime?
  isPartial             Boolean                 @default(false)
  currentLocation       Json?
  price                 Float
  delivererFee          Float
  platformFee           Float
  insuranceFee          Float?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  announcement          Announcement            @relation(fields: [announcementId], references: [id])
  client                User                    @relation("ClientDeliveries", fields: [clientId], references: [id])
  deliverer             User                    @relation("DelivererDeliveries", fields: [delivererId], references: [id])
  history               DeliveryHistory[]
  DeliveryStatusHistory DeliveryStatusHistory[]
  validations           DeliveryValidation[]
  DeliveryWarranty      DeliveryWarranty?
  Handover              Handover[]
  payment               Payment?
  ProofOfDelivery       ProofOfDelivery?
  SupportTicket         SupportTicket[]
  trackingSessions      TrackingSession[]
  tracking              TrackingUpdate[]

  @@index([clientId])
  @@index([delivererId])
  @@index([status])
  @@index([trackingNumber])
  @@index([createdAt])
}

model TrackingUpdate {
  id          String         @id @default(cuid())
  deliveryId  String
  status      DeliveryStatus
  message     String
  location    String?
  coordinates Json?
  timestamp   DateTime       @default(now())
  isAutomatic Boolean        @default(false)
  delivery    Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@index([timestamp])
}

model DeliveryHistory {
  id          String   @id @default(cuid())
  deliveryId  String
  action      String
  description String
  metadata    Json?
  createdAt   DateTime @default(now())
  createdBy   String?
  delivery    Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@index([createdAt])
}

model DeliveryStatusHistory {
  id         String         @id @default(cuid())
  deliveryId String
  status     DeliveryStatus
  comment    String?
  location   Json?
  createdBy  String
  createdAt  DateTime       @default(now())
  delivery   Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
}

model Handover {
  id              String    @id @default(cuid())
  deliveryId      String
  fromDelivererId String
  toDelivererId   String?
  locationId      String
  handoverDate    DateTime
  handoverCode    String
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  delivery        Delivery  @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  location        Location  @relation(fields: [locationId], references: [id])

  @@index([deliveryId])
  @@index([handoverCode])
}

model ProofOfDelivery {
  id                 String   @id @default(cuid())
  deliveryId         String   @unique
  recipientName      String?
  recipientSignature String?
  photos             String[]
  notes              String?
  validatedWithCode  Boolean  @default(false)
  validatedWithNFC   Boolean  @default(false)
  createdAt          DateTime @default(now())
  delivery           Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
}

model Booking {
  id            String            @id @default(cuid())
  clientId      String
  providerId    String
  serviceId     String
  status        String            @default("PENDING")
  scheduledDate DateTime
  scheduledTime String
  duration      Int
  address       Json
  totalPrice    Float
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  userId        String?
  client        Client            @relation(fields: [clientId], references: [id])
  provider      Provider          @relation(fields: [providerId], references: [id])
  service       Service           @relation(fields: [serviceId], references: [id])
  User          User?             @relation(fields: [userId], references: [id])
  intervention  Intervention?
  payment       Payment?
  timeSlot      ProviderTimeSlot?
  review        Review?

  @@index([clientId])
  @@index([providerId])
  @@index([scheduledDate])
  @@index([status])
}

model Intervention {
  id              String                        @id @default(cuid())
  bookingId       String                        @unique
  providerId      String
  startTime       DateTime?
  endTime         DateTime?
  actualDuration  Int?
  report          String?
  photos          String[]
  clientSignature String?
  isCompleted     Boolean                       @default(false)
  completedAt     DateTime?
  createdAt       DateTime                      @default(now())
  updatedAt       DateTime                      @updatedAt
  booking         Booking                       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  provider        Provider                      @relation(fields: [providerId], references: [id])
  invoiceItems    ProviderInvoiceIntervention[]

  @@index([providerId])
}

model DeliveryValidation {
  id         String    @id @default(cuid())
  deliveryId String
  code       String    @unique
  isUsed     Boolean   @default(false)
  usedAt     DateTime?
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  delivery   Delivery  @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@index([code])
  @@index([expiresAt])
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  announcementId  String?       @unique
  deliveryId      String?       @unique
  bookingId       String?       @unique
  clientId        String?
  merchantId      String?
  amount          Float
  currency        String        @default("EUR")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String
  stripePaymentId String?       @unique
  stripeSessionId String?
  metadata        Json?
  paidAt          DateTime?
  failedAt        DateTime?
  refundedAt      DateTime?
  refundAmount    Float?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Order           Order[]
  announcement    Announcement? @relation(fields: [announcementId], references: [id])
  booking         Booking?      @relation(fields: [bookingId], references: [id])
  client          Client?       @relation("ClientPayments", fields: [clientId], references: [id])
  delivery        Delivery?     @relation(fields: [deliveryId], references: [id])
  merchant        Merchant?     @relation("MerchantPayments", fields: [merchantId], references: [id])
  user            User          @relation("UserPayments", fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([paymentMethod])
  @@index([createdAt])
}

model Wallet {
  id              String            @id @default(cuid())
  userId          String            @unique
  balance         Float             @default(0)
  currency        String            @default("EUR")
  stripeAccountId String?           @unique
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id])
  operations      WalletOperation[]

  @@index([userId])
  @@index([isActive])
}

model WalletOperation {
  id          String              @id @default(cuid())
  walletId    String
  userId      String
  type        WalletOperationType
  amount      Float
  description String
  reference   String?
  status      OperationStatus     @default(PENDING)
  executedAt  DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  user        User                @relation(fields: [userId], references: [id])
  wallet      Wallet              @relation(fields: [walletId], references: [id])

  @@index([walletId])
  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

model Invoice {
  id                 String        @id @default(cuid())
  invoiceNumber      String        @unique
  type               String
  status             String        @default("DRAFT")
  providerId         String?
  merchantId         String?
  clientId           String?
  billingPeriodStart DateTime?
  billingPeriodEnd   DateTime?
  subtotal           Float
  tax                Float
  total              Float
  currency           String        @default("EUR")
  dueDate            DateTime
  paidAt             DateTime?
  pdfUrl             String?
  metadata           Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  items              InvoiceItem[]

  @@index([invoiceNumber])
  @@index([type])
  @@index([status])
  @@index([providerId])
}

model InvoiceItem {
  id            String   @id @default(cuid())
  invoiceId     String
  description   String
  quantity      Float    @default(1)
  unitPrice     Float
  total         Float
  referenceType String?
  referenceId   String?
  metadata      Json?
  createdAt     DateTime @default(now())
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

model Location {
  id           String       @id @default(cuid())
  name         String
  type         String
  address      String
  city         String
  postalCode   String
  country      String       @default("FR")
  lat          Float
  lng          Float
  phone        String?
  email        String?
  openingHours Json?
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  handovers    Handover[]
  storageBoxes StorageBox[]
  warehouses   Warehouse?

  @@index([type])
  @@index([city])
}

model Warehouse {
  id               String   @id @default(cuid())
  locationId       String   @unique
  capacity         Int
  currentOccupancy Int      @default(0)
  managerName      String?
  managerEmail     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  location         Location @relation(fields: [locationId], references: [id])
}

model StorageBox {
  id          String             @id @default(cuid())
  locationId  String
  boxNumber   String
  size        String
  pricePerDay Float
  isAvailable Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  location    Location           @relation(fields: [locationId], references: [id])
  rentals     StorageBoxRental[]

  @@unique([locationId, boxNumber])
  @@index([locationId])
  @@index([isAvailable])
}

model StorageBoxRental {
  id           String     @id @default(cuid())
  clientId     String
  storageBoxId String
  startDate    DateTime
  endDate      DateTime?
  accessCode   String
  totalPrice   Float?
  isPaid       Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String?
  client       Client     @relation(fields: [clientId], references: [id])
  storageBox   StorageBox @relation(fields: [storageBoxId], references: [id])
  User         User?      @relation(fields: [userId], references: [id])

  @@index([clientId])
  @@index([storageBoxId])
  @@index([startDate])
}

model Document {
  id               String           @id @default(cuid())
  userId           String
  type             DocumentType
  filename         String
  originalName     String
  mimeType         String
  validationStatus ValidationStatus @default(PENDING)
  size             Int
  url              String
  validatedAt      DateTime?
  validatedBy      String?
  rejectionReason  String?
  expirationDate   DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([validationStatus])
}

model DocumentGeneration {
  id           String           @id @default(cuid())
  userId       String
  documentType String
  entityId     String
  fileName     String
  fileUrl      String
  status       GenerationStatus @default(SUCCESS)
  metadata     Json?
  createdAt    DateTime         @default(now())
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([documentType])
  @@index([entityId])
  @@index([createdAt])
}

model Notification {
  id         String    @id @default(cuid())
  userId     String
  type       String
  title      String
  message    String
  data       Json?
  isRead     Boolean   @default(false)
  readAt     DateTime?
  isPush     Boolean   @default(false)
  pushSentAt DateTime?
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([type])
}

model NotificationPreference {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  announcementMatch  Boolean  @default(true)
  deliveryUpdates    Boolean  @default(true)
  paymentUpdates     Boolean  @default(true)
  marketingEmails    Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId])
}

model Review {
  id             String        @id @default(cuid())
  bookingId      String?       @unique
  clientId       String?
  rating         Int
  comment        String?
  isVerified     Boolean       @default(false)
  response       String?
  respondedAt    DateTime?
  providerId     String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  announcementId String?
  Announcement   Announcement? @relation(fields: [announcementId], references: [id])
  booking        Booking?      @relation(fields: [bookingId], references: [id])
  client         Client?       @relation(fields: [clientId], references: [id])
  provider       Provider?     @relation("ProviderReviews", fields: [providerId], references: [id])

  @@index([rating])
  @@index([isVerified])
  @@index([providerId])
  @@index([clientId])
}

model GlobalAvailability {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  startTime String
  endTime   String
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
}

model Analytics {
  id       String   @id @default(cuid())
  type     String
  entity   String
  entityId String
  action   String
  metadata Json?
  value    Float?
  date     DateTime @default(now())
  period   String

  @@index([type])
  @@index([entity])
  @@index([date])
  @@index([period])
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       Json
  description String?
  isActive    Boolean  @default(true)
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@index([isActive])
}

model ActivityLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String?
  entityId   String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
}

model SystemNotification {
  id         String    @id @default(cuid())
  type       String
  title      String
  message    String
  priority   String    @default("LOW")
  targetRole UserRole?
  isActive   Boolean   @default(true)
  startDate  DateTime?
  endDate    DateTime?
  createdBy  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([type])
  @@index([priority])
  @@index([isActive])
  @@index([targetRole])
}

model Availability {
  id           String     @id @default(cuid())
  providerId   String?
  delivererId  String?
  dayOfWeek    Int
  startTime    String
  endTime      String
  isRecurring  Boolean    @default(true)
  specificDate DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deliverer    Deliverer? @relation(fields: [delivererId], references: [id], onDelete: Cascade)
  provider     Provider?  @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@index([delivererId])
  @@index([dayOfWeek])
}

model Contract {
  id                  String              @id @default(cuid())
  merchantId          String              @unique
  type                ContractType        @default(STANDARD)
  status              ContractStatus      @default(DRAFT)
  version             String              @default("1.0")
  title               String
  description         String?
  commissionRate      Float
  minCommissionAmount Float?
  setupFee            Float               @default(0)
  monthlyFee          Float               @default(0)
  validFrom           DateTime
  validUntil          DateTime?
  autoRenewal         Boolean             @default(true)
  renewalPeriod       Int                 @default(12)
  maxOrdersPerMonth   Int?
  maxOrderValue       Float?
  deliveryZones       Json[]
  allowedServices     String[]
  merchantSignedAt    DateTime?
  merchantSignature   String?
  adminSignedAt       DateTime?
  adminSignedBy       String?
  adminSignature      String?
  templatePath        String?
  signedDocumentPath  String?
  notes               String?
  tags                String[]            @default([])
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  merchant            Merchant            @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  amendments          ContractAmendment[]
  billingCycles       MerchantBilling[]

  @@index([merchantId])
  @@index([status])
  @@index([validFrom])
}

model ContractAmendment {
  id               String    @id @default(cuid())
  contractId       String
  version          String
  title            String
  description      String
  changes          Json
  effectiveDate    DateTime
  merchantSignedAt DateTime?
  adminSignedAt    DateTime?
  adminSignedBy    String?
  createdAt        DateTime  @default(now())
  contract         Contract  @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@index([contractId])
}

model MerchantBilling {
  id               String    @id @default(cuid())
  merchantId       String
  contractId       String?
  periodStart      DateTime
  periodEnd        DateTime
  status           String    @default("PENDING")
  totalOrders      Int       @default(0)
  totalRevenue     Float     @default(0)
  commissionAmount Float     @default(0)
  monthlyFee       Float     @default(0)
  additionalFees   Float     @default(0)
  totalAmount      Float     @default(0)
  invoiceNumber    String?
  invoicePath      String?
  dueDate          DateTime?
  paidAt           DateTime?
  paymentMethod    String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  contract         Contract? @relation(fields: [contractId], references: [id])
  merchant         Merchant  @relation(fields: [merchantId], references: [id])
  orders           Order[]

  @@unique([merchantId, periodStart])
  @@index([merchantId])
  @@index([status])
  @@index([dueDate])
}

model ClientTutorialProgress {
  id             String            @id @default(cuid())
  userId         String            @unique
  isCompleted    Boolean           @default(false)
  startedAt      DateTime          @default(now())
  completedAt    DateTime?
  totalTimeSpent Int               @default(0)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  feedback       TutorialFeedback?
  steps          TutorialStep[]

  @@index([userId])
  @@index([isCompleted])
}

model TutorialStep {
  id          String                 @id @default(cuid())
  userId      String
  stepId      Int
  isCompleted Boolean                @default(false)
  isSkipped   Boolean                @default(false)
  timeSpent   Int                    @default(0)
  completedAt DateTime?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  progress    ClientTutorialProgress @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, stepId])
  @@index([userId])
  @@index([stepId])
  @@index([isCompleted])
}

model TutorialFeedback {
  id             String                 @id @default(cuid())
  userId         String                 @unique
  feedback       String?
  rating         Int?
  stepsCompleted Int                    @default(0)
  completionTime Int                    @default(0)
  createdAt      DateTime               @default(now())
  progress       ClientTutorialProgress @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([rating])
}

model TrackingSession {
  id              String           @id @default(cuid())
  deliveryId      String
  delivererId     String
  startTime       DateTime         @default(now())
  endTime         DateTime?
  isActive        Boolean          @default(true)
  totalDistance   Float            @default(0)
  averageSpeed    Float            @default(0)
  maxSpeed        Float            @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  geofenceEntries GeofenceEntry[]
  locationUpdates LocationUpdate[]
  deliverer       Deliverer        @relation(fields: [delivererId], references: [id], onDelete: Cascade)
  delivery        Delivery         @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@unique([deliveryId, delivererId, startTime])
  @@index([deliveryId])
  @@index([delivererId])
  @@index([isActive])
}

model LocationUpdate {
  id                String          @id @default(cuid())
  trackingSessionId String
  latitude          Float
  longitude         Float
  accuracy          Float
  speed             Float?
  heading           Float?
  altitude          Float?
  timestamp         DateTime
  createdAt         DateTime        @default(now())
  trackingSession   TrackingSession @relation(fields: [trackingSessionId], references: [id], onDelete: Cascade)

  @@index([trackingSessionId])
  @@index([timestamp])
}

model Geofence {
  id        String          @id @default(cuid())
  name      String
  type      String
  latitude  Float
  longitude Float
  radius    Float
  isActive  Boolean         @default(true)
  metadata  Json?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  entries   GeofenceEntry[]

  @@index([type])
  @@index([isActive])
}

model GeofenceEntry {
  id                String          @id @default(cuid())
  trackingSessionId String
  geofenceId        String
  isInside          Boolean
  latitude          Float
  longitude         Float
  timestamp         DateTime
  createdAt         DateTime        @default(now())
  geofence          Geofence        @relation(fields: [geofenceId], references: [id], onDelete: Cascade)
  trackingSession   TrackingSession @relation(fields: [trackingSessionId], references: [id], onDelete: Cascade)

  @@index([trackingSessionId])
  @@index([geofenceId])
  @@index([timestamp])
}

model DelivererLocation {
  id           String    @id @default(cuid())
  delivererId  String    @unique
  latitude     Float
  longitude    Float
  accuracy     Float
  speed        Float?
  heading      Float?
  isOnline     Boolean   @default(true)
  lastUpdateAt DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deliverer    Deliverer @relation(fields: [delivererId], references: [id], onDelete: Cascade)

  @@index([delivererId])
  @@index([isOnline])
  @@index([lastUpdateAt])
}

model SupportTicket {
  id                  String              @id @default(cuid())
  ticketNumber        String              @unique
  authorId            String
  assignedToId        String?
  title               String
  description         String
  category            TicketCategory
  priority            TicketPriority      @default(MEDIUM)
  status              TicketStatus        @default(OPEN)
  deliveryId          String?
  orderId             String?
  isUrgent            Boolean             @default(false)
  estimatedResolution DateTime?
  resolvedAt          DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  assignedTo          User?               @relation("TicketAssignee", fields: [assignedToId], references: [id])
  author              User                @relation("TicketAuthor", fields: [authorId], references: [id])
  delivery            Delivery?           @relation(fields: [deliveryId], references: [id])
  attachments         TicketAttachment[]
  escalations         TicketEscalation[]
  messages            TicketMessage[]
  satisfactionSurvey  TicketSatisfaction?

  @@index([authorId])
  @@index([assignedToId])
  @@index([status])
  @@index([category])
  @@index([priority])
  @@index([createdAt])
}

model TicketMessage {
  id              String              @id @default(cuid())
  ticketId        String
  authorId        String
  content         String
  isInternal      Boolean             @default(false)
  isSystemMessage Boolean             @default(false)
  createdAt       DateTime            @default(now())
  attachments     MessageAttachment[]
  author          User                @relation(fields: [authorId], references: [id])
  ticket          SupportTicket       @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([authorId])
  @@index([createdAt])
}

model TicketAttachment {
  id           String        @id @default(cuid())
  ticketId     String
  uploadedById String
  fileName     String
  originalName String
  mimeType     String
  fileSize     Int
  filePath     String
  createdAt    DateTime      @default(now())
  ticket       SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  uploadedBy   User          @relation(fields: [uploadedById], references: [id])

  @@index([ticketId])
}

model MessageAttachment {
  id           String        @id @default(cuid())
  messageId    String
  fileName     String
  originalName String
  mimeType     String
  fileSize     Int
  filePath     String
  createdAt    DateTime      @default(now())
  message      TicketMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model TicketEscalation {
  id          String        @id @default(cuid())
  ticketId    String
  fromUserId  String?
  toUserId    String
  reason      String
  escalatedAt DateTime      @default(now())
  resolvedAt  DateTime?
  fromUser    User?         @relation("EscalationFrom", fields: [fromUserId], references: [id])
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  toUser      User          @relation("EscalationTo", fields: [toUserId], references: [id])

  @@index([ticketId])
  @@index([escalatedAt])
}

model TicketSatisfaction {
  id                String        @id @default(cuid())
  ticketId          String        @unique
  rating            Int
  feedback          String?
  wouldRecommend    Boolean?
  responseTime      Int?
  resolutionQuality Int?
  agentHelpfulness  Int?
  submittedAt       DateTime      @default(now())
  ticket            SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([rating])
  @@index([submittedAt])
}

model SupportKnowledgeBase {
  id           String   @id @default(cuid())
  title        String
  content      String
  category     String
  tags         String[]
  isPublic     Boolean  @default(true)
  isActive     Boolean  @default(true)
  viewCount    Int      @default(0)
  helpfulCount Int      @default(0)
  createdById  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    User     @relation(fields: [createdById], references: [id])

  @@index([category])
  @@index([isPublic])
  @@index([isActive])
}

model SupportTemplate {
  id          String         @id @default(cuid())
  name        String
  subject     String
  content     String
  category    TicketCategory
  isActive    Boolean        @default(true)
  usageCount  Int            @default(0)
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdBy   User           @relation(fields: [createdById], references: [id])

  @@index([category])
  @@index([isActive])
}

model SupportMetrics {
  id                     String   @id @default(cuid())
  date                   DateTime @unique @db.Date
  totalTickets           Int      @default(0)
  openTickets            Int      @default(0)
  resolvedTickets        Int      @default(0)
  avgResponseTime        Float    @default(0)
  avgResolutionTime      Float    @default(0)
  customerSatisfaction   Float    @default(0)
  firstContactResolution Float    @default(0)
  createdAt              DateTime @default(now())

  @@index([date])
}

model Certification {
  id                       String                     @id @default(cuid())
  name                     String
  description              String
  category                 CertificationCategory
  level                    CertificationLevel         @default(BASIC)
  isRequired               Boolean                    @default(false)
  validityDuration         Int?
  price                    Float?
  requirements             Json
  maxAttempts              Int                        @default(3)
  passScore                Float                      @default(80)
  isActive                 Boolean                    @default(true)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  providerId               String?
  Provider                 Provider?                  @relation(fields: [providerId], references: [id])
  modules                  CertificationModule[]
  delivererCertifications  DelivererCertification[]
  examSessions             ExamSession[]
  providerCertifications   ProviderCertification[]
  QualificationRequirement QualificationRequirement[]

  @@index([category])
  @@index([isRequired])
  @@index([isActive])
}

model CertificationModule {
  id                String           @id @default(cuid())
  certificationId   String
  title             String
  description       String
  content           String
  orderIndex        Int
  estimatedDuration Int
  isRequired        Boolean          @default(true)
  resources         Json[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  certification     Certification    @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  progress          ModuleProgress[]

  @@index([certificationId])
  @@index([orderIndex])
}

model ProviderCertification {
  id              String              @id @default(cuid())
  providerId      String
  certificationId String
  status          CertificationStatus @default(NOT_STARTED)
  enrolledAt      DateTime            @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  expiresAt       DateTime?
  score           Float?
  attempts        Int                 @default(0)
  certificateUrl  String?
  isValid         Boolean             @default(false)
  renewalNotified Boolean             @default(false)
  notes           String?
  examSessions    ExamSession[]
  moduleProgress  ModuleProgress[]
  certification   Certification       @relation(fields: [certificationId], references: [id])
  provider        Provider            @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@unique([providerId, certificationId])
  @@index([providerId])
  @@index([status])
  @@index([expiresAt])
}

model DelivererCertification {
  id              String              @id @default(cuid())
  delivererId     String
  certificationId String
  status          CertificationStatus @default(NOT_STARTED)
  enrolledAt      DateTime            @default(now())
  startedAt       DateTime?
  completedAt     DateTime?
  expiresAt       DateTime?
  score           Float?
  attempts        Int                 @default(0)
  certificateUrl  String?
  isValid         Boolean             @default(false)
  renewalNotified Boolean             @default(false)
  notes           String?
  certification   Certification       @relation(fields: [certificationId], references: [id])
  deliverer       Deliverer           @relation(fields: [delivererId], references: [id], onDelete: Cascade)
  examSessions    ExamSession[]
  moduleProgress  ModuleProgress[]

  @@unique([delivererId, certificationId])
  @@index([delivererId])
  @@index([status])
  @@index([expiresAt])
}

model ModuleProgress {
  id                       String                  @id @default(cuid())
  moduleId                 String
  providerCertificationId  String?
  delivererCertificationId String?
  status                   ModuleStatus            @default(NOT_STARTED)
  startedAt                DateTime?
  completedAt              DateTime?
  timeSpent                Int                     @default(0)
  score                    Float?
  attempts                 Int                     @default(0)
  delivererCertification   DelivererCertification? @relation(fields: [delivererCertificationId], references: [id], onDelete: Cascade)
  module                   CertificationModule     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  providerCertification    ProviderCertification?  @relation(fields: [providerCertificationId], references: [id], onDelete: Cascade)

  @@index([moduleId])
  @@index([providerCertificationId])
  @@index([delivererCertificationId])
}

model ExamSession {
  id                       String                  @id @default(cuid())
  certificationId          String
  providerCertificationId  String?
  delivererCertificationId String?
  sessionNumber            Int
  startedAt                DateTime                @default(now())
  completedAt              DateTime?
  timeLimit                Int
  score                    Float?
  isPassed                 Boolean                 @default(false)
  answers                  Json
  questions                Json
  metadata                 Json?
  certification            Certification           @relation(fields: [certificationId], references: [id])
  delivererCertification   DelivererCertification? @relation(fields: [delivererCertificationId], references: [id], onDelete: Cascade)
  providerCertification    ProviderCertification?  @relation(fields: [providerCertificationId], references: [id], onDelete: Cascade)

  @@index([certificationId])
  @@index([providerCertificationId])
  @@index([delivererCertificationId])
  @@index([startedAt])
}

model CertificationTemplate {
  id        String   @id @default(cuid())
  name      String
  template  String
  variables Json
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isDefault])
  @@index([isActive])
}

model QualificationRequirement {
  id              String             @id @default(cuid())
  serviceType     String
  certificationId String
  isRequired      Boolean            @default(true)
  minimumLevel    CertificationLevel @default(BASIC)
  description     String?
  createdAt       DateTime           @default(now())
  certification   Certification      @relation(fields: [certificationId], references: [id])

  @@unique([serviceType, certificationId])
  @@index([serviceType])
}

model CertificationAudit {
  id              String               @id @default(cuid())
  entityType      String
  entityId        String
  certificationId String
  action          String
  oldStatus       CertificationStatus?
  newStatus       CertificationStatus
  performedBy     String?
  reason          String?
  metadata        Json?
  timestamp       DateTime             @default(now())

  @@index([entityType, entityId])
  @@index([certificationId])
  @@index([timestamp])
}

model InsurancePolicy {
  id              String              @id @default(cuid())
  name            String
  description     String
  category        InsuranceCategory
  provider        String
  policyNumber    String              @unique
  coverageAmount  Float
  deductible      Float
  premiumAmount   Float
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean             @default(true)
  terms           Json
  coverageDetails Json
  exclusions      Json[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  claims          InsuranceClaim[]
  coverages       InsuranceCoverage[]

  @@index([category])
  @@index([isActive])
  @@index([endDate])
}

model InsuranceCoverage {
  id           String           @id @default(cuid())
  policyId     String
  entityType   String
  entityId     String?
  coverageType CoverageType
  isActive     Boolean          @default(true)
  startDate    DateTime         @default(now())
  endDate      DateTime?
  maxCoverage  Float
  currentUsage Float            @default(0)
  metadata     Json?
  claims       InsuranceClaim[]
  policy       InsurancePolicy  @relation(fields: [policyId], references: [id])

  @@index([policyId])
  @@index([entityType, entityId])
  @@index([coverageType])
  @@index([isActive])
}

model InsuranceClaim {
  id                 String            @id @default(cuid())
  claimNumber        String            @unique
  policyId           String
  coverageId         String
  claimantId         String
  incidentDate       DateTime
  reportedDate       DateTime          @default(now())
  claimType          ClaimType
  status             ClaimStatus       @default(REPORTED)
  amount             Float
  approvedAmount     Float?
  description        String
  circumstances      String
  evidences          Json[]
  investigationNotes String?
  processingNotes    String?
  rejectionReason    String?
  settledAt          DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  assessments        ClaimAssessment[]
  payments           ClaimPayment[]
  claimant           User              @relation(fields: [claimantId], references: [id])
  coverage           InsuranceCoverage @relation(fields: [coverageId], references: [id])
  policy             InsurancePolicy   @relation(fields: [policyId], references: [id])

  @@index([policyId])
  @@index([coverageId])
  @@index([claimantId])
  @@index([status])
  @@index([incidentDate])
}

model ClaimAssessment {
  id                String           @id @default(cuid())
  claimId           String
  assessorId        String
  assessmentDate    DateTime         @default(now())
  findings          String
  recommendedAmount Float?
  photos            String[]
  report            String?
  status            AssessmentStatus @default(PENDING)
  createdAt         DateTime         @default(now())
  assessor          User             @relation(fields: [assessorId], references: [id])
  claim             InsuranceClaim   @relation(fields: [claimId], references: [id], onDelete: Cascade)

  @@index([claimId])
  @@index([assessorId])
}

model ClaimPayment {
  id            String         @id @default(cuid())
  claimId       String
  amount        Float
  paymentDate   DateTime       @default(now())
  paymentMethod String
  reference     String?
  status        PaymentStatus  @default(PENDING)
  notes         String?
  claim         InsuranceClaim @relation(fields: [claimId], references: [id], onDelete: Cascade)

  @@index([claimId])
  @@index([paymentDate])
}

model Warranty {
  id                 String             @id @default(cuid())
  name               String
  description        String
  warrantyType       WarrantyType
  duration           Int
  scope              Json
  conditions         Json
  exclusions         Json[]
  isActive           Boolean            @default(true)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  deliveryWarranties DeliveryWarranty[]
  serviceWarranties  ServiceWarranty[]

  @@index([warrantyType])
  @@index([isActive])
}

model ServiceWarranty {
  id                 String          @id @default(cuid())
  warrantyId         String
  serviceId          String
  providerId         String
  clientId           String
  startDate          DateTime        @default(now())
  endDate            DateTime
  isActive           Boolean         @default(true)
  claimsCount        Int             @default(0)
  maxClaims          Int             @default(3)
  totalClaimedAmount Float           @default(0)
  maxClaimAmount     Float           @default(1000)
  client             User            @relation("ClientServiceWarranties", fields: [clientId], references: [id])
  provider           Provider        @relation(fields: [providerId], references: [id])
  warranty           Warranty        @relation(fields: [warrantyId], references: [id])
  claims             WarrantyClaim[]

  @@index([warrantyId])
  @@index([serviceId])
  @@index([providerId])
  @@index([clientId])
  @@index([endDate])
}

model DeliveryWarranty {
  id             String          @id @default(cuid())
  warrantyId     String
  deliveryId     String          @unique
  delivererId    String
  clientId       String
  startDate      DateTime        @default(now())
  endDate        DateTime
  isActive       Boolean         @default(true)
  maxClaimAmount Float           @default(500)
  claimsCount    Int             @default(0)
  client         User            @relation("ClientDeliveryWarranties", fields: [clientId], references: [id])
  deliverer      User            @relation("DelivererWarranties", fields: [delivererId], references: [id])
  delivery       Delivery        @relation(fields: [deliveryId], references: [id])
  warranty       Warranty        @relation(fields: [warrantyId], references: [id])
  claims         WarrantyClaim[]

  @@index([warrantyId])
  @@index([deliveryId])
  @@index([delivererId])
  @@index([clientId])
  @@index([endDate])
}

model WarrantyClaim {
  id                 String            @id @default(cuid())
  claimNumber        String            @unique
  serviceWarrantyId  String?
  deliveryWarrantyId String?
  claimantId         String
  claimType          WarrantyClaimType
  description        String
  requestedAmount    Float
  approvedAmount     Float?
  status             ClaimStatus       @default(REPORTED)
  evidences          Json[]
  processingNotes    String?
  resolution         String?
  claimedAt          DateTime          @default(now())
  processedAt        DateTime?
  resolvedAt         DateTime?
  claimant           User              @relation(fields: [claimantId], references: [id])
  deliveryWarranty   DeliveryWarranty? @relation(fields: [deliveryWarrantyId], references: [id])
  serviceWarranty    ServiceWarranty?  @relation(fields: [serviceWarrantyId], references: [id])

  @@index([serviceWarrantyId])
  @@index([deliveryWarrantyId])
  @@index([claimantId])
  @@index([status])
  @@index([claimedAt])
}

model RiskAssessment {
  id              String    @id @default(cuid())
  entityType      String
  entityId        String
  riskLevel       RiskLevel @default(LOW)
  riskFactors     Json[]
  score           Float
  recommendations Json[]
  lastAssessment  DateTime  @default(now())
  nextAssessment  DateTime?
  isActive        Boolean   @default(true)

  @@unique([entityType, entityId])
  @@index([riskLevel])
  @@index([lastAssessment])
}

model InsuranceAudit {
  id          String   @id @default(cuid())
  entityType  String
  entityId    String
  action      String
  details     Json
  performedBy String?
  timestamp   DateTime @default(now())

  @@index([entityType, entityId])
  @@index([timestamp])
}

model ReferralProgram {
  id                  String            @id @default(cuid())
  name                String
  description         String
  programType         ReferralType
  isActive            Boolean           @default(true)
  startDate           DateTime          @default(now())
  endDate             DateTime?
  maxParticipants     Int?
  currentParticipants Int               @default(0)
  eligibilityRules    Json
  minimumAge          Int?
  requiredRole        UserRole?
  requiredStatus      ValidationStatus?
  referrerReward      Json
  refereeReward       Json
  bonusConditions     Json?
  maxReferralsPerUser Int               @default(10)
  maxRewardPerUser    Float?
  rewardValidityDays  Int               @default(30)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  referrals           Referral[]
  codes               ReferralCode[]
  ReferralStats       ReferralStats[]

  @@index([programType])
  @@index([isActive])
  @@index([startDate])
}

model ReferralCode {
  id         String          @id @default(cuid())
  programId  String
  referrerId String
  code       String          @unique
  isActive   Boolean         @default(true)
  usageLimit Int             @default(1)
  usageCount Int             @default(0)
  expiresAt  DateTime?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  referrals  Referral[]
  program    ReferralProgram @relation(fields: [programId], references: [id])
  referrer   User            @relation("ReferrerCodes", fields: [referrerId], references: [id])

  @@index([programId])
  @@index([referrerId])
  @@index([code])
  @@index([isActive])
}

model Referral {
  id                   String             @id @default(cuid())
  programId            String
  codeId               String?
  referrerId           String
  refereeId            String
  status               ReferralStatus     @default(PENDING)
  referralMethod       ReferralMethod
  conditionsMet        Json
  completedAt          DateTime?
  referrerRewardStatus RewardStatus       @default(PENDING)
  refereeRewardStatus  RewardStatus       @default(PENDING)
  referrerRewardAmount Float?
  refereeRewardAmount  Float?
  referrerRewardDate   DateTime?
  refereeRewardDate    DateTime?
  metadata             Json?
  notes                String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  code                 ReferralCode?      @relation(fields: [codeId], references: [id])
  program              ReferralProgram    @relation(fields: [programId], references: [id])
  referee              User               @relation("UserAsReferee", fields: [refereeId], references: [id])
  referrer             User               @relation("UserAsReferrer", fields: [referrerId], references: [id])
  activities           ReferralActivity[]
  ReferralReward       ReferralReward[]

  @@unique([referrerId, refereeId, programId])
  @@index([programId])
  @@index([referrerId])
  @@index([refereeId])
  @@index([status])
  @@index([createdAt])
}

model ReferralActivity {
  id           String       @id @default(cuid())
  referralId   String
  activityType ActivityType
  description  String
  value        Float?
  metadata     Json?
  occurredAt   DateTime     @default(now())
  referral     Referral     @relation(fields: [referralId], references: [id], onDelete: Cascade)

  @@index([referralId])
  @@index([activityType])
  @@index([occurredAt])
}

model ReferralReward {
  id               String       @id @default(cuid())
  userId           String
  referralId       String
  rewardType       RewardType
  amount           Float
  currency         String       @default("EUR")
  status           RewardStatus @default(PENDING)
  description      String
  expiresAt        DateTime?
  claimedAt        DateTime?
  processedAt      DateTime?
  paymentReference String?
  metadata         Json?
  createdAt        DateTime     @default(now())
  referral         Referral     @relation(fields: [referralId], references: [id])
  user             User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([referralId])
  @@index([status])
  @@index([rewardType])
  @@index([expiresAt])
}

model ReferralStats {
  id                  String          @id @default(cuid())
  userId              String
  programId           String
  totalReferrals      Int             @default(0)
  successfulReferrals Int             @default(0)
  totalRewards        Float           @default(0)
  pendingRewards      Float           @default(0)
  lastReferralDate    DateTime?
  ranking             Int?
  level               String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  program             ReferralProgram @relation(fields: [programId], references: [id])
  user                User            @relation(fields: [userId], references: [id])

  @@unique([userId, programId])
  @@index([userId])
  @@index([programId])
  @@index([totalReferrals])
  @@index([ranking])
}

model InfluencerProgram {
  id                  String               @id @default(cuid())
  influencerId        String               @unique
  programName         String
  description         String
  status              InfluencerStatus     @default(PENDING)
  minimumFollowers    Int?
  requiredPlatforms   String[]
  contentRequirements Json
  commissionRate      Float
  fixedReward         Float?
  bonusThresholds     Json
  totalClicks         Int                  @default(0)
  totalConversions    Int                  @default(0)
  totalEarnings       Float                @default(0)
  conversionRate      Float                @default(0)
  startDate           DateTime?
  endDate             DateTime?
  approvedAt          DateTime?
  approvedBy          String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  campaigns           InfluencerCampaign[]
  links               InfluencerLink[]
  influencer          User                 @relation(fields: [influencerId], references: [id])

  @@index([influencerId])
  @@index([status])
  @@index([approvedAt])
}

model InfluencerCampaign {
  id                   String            @id @default(cuid())
  programId            String
  name                 String
  description          String
  type                 CampaignType
  targetAudience       Json
  expectedReach        Int?
  targetConversions    Int?
  budget               Float?
  costPerClick         Float?
  costPerConversion    Float?
  contentGuidelines    Json
  requiredHashtags     String[]
  brandingRequirements Json
  startDate            DateTime
  endDate              DateTime
  postingSchedule      Json?
  actualReach          Int               @default(0)
  actualClicks         Int               @default(0)
  actualConversions    Int               @default(0)
  actualCost           Float             @default(0)
  status               CampaignStatus    @default(DRAFT)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  program              InfluencerProgram @relation(fields: [programId], references: [id])
  posts                InfluencerPost[]

  @@index([programId])
  @@index([status])
  @@index([startDate])
}

model InfluencerLink {
  id          String            @id @default(cuid())
  programId   String
  url         String            @unique
  shortCode   String            @unique
  description String?
  clicks      Int               @default(0)
  conversions Int               @default(0)
  revenue     Float             @default(0)
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  isActive    Boolean           @default(true)
  expiresAt   DateTime?
  createdAt   DateTime          @default(now())
  program     InfluencerProgram @relation(fields: [programId], references: [id])
  analytics   LinkAnalytics[]

  @@index([programId])
  @@index([shortCode])
  @@index([isActive])
}

model InfluencerPost {
  id              String             @id @default(cuid())
  campaignId      String
  platform        String
  postUrl         String?
  postId          String?
  content         String
  hashtags        String[]
  likes           Int                @default(0)
  comments        Int                @default(0)
  shares          Int                @default(0)
  views           Int                @default(0)
  reach           Int                @default(0)
  engagement      Float              @default(0)
  isApproved      Boolean            @default(false)
  approvedAt      DateTime?
  approvedBy      String?
  rejectionReason String?
  publishedAt     DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  campaign        InfluencerCampaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@index([platform])
  @@index([publishedAt])
}

model LinkAnalytics {
  id           String         @id @default(cuid())
  linkId       String
  date         DateTime       @db.Date
  clicks       Int            @default(0)
  uniqueClicks Int            @default(0)
  conversions  Int            @default(0)
  revenue      Float          @default(0)
  countries    Json
  devices      Json
  referrers    Json
  createdAt    DateTime       @default(now())
  link         InfluencerLink @relation(fields: [linkId], references: [id])

  @@unique([linkId, date])
  @@index([linkId])
  @@index([date])
}

model Dispute {
  id                      String             @id @default(cuid())
  announcementId          String
  reporterId              String
  reportedUserId          String
  category                DisputeCategory
  reason                  String
  description             String
  evidenceFiles           String[]
  priority                DisputePriority
  status                  DisputeStatus      @default(OPEN)
  ticketNumber            String             @unique
  resolution              DisputeResolution?
  adminNotes              String?
  compensationAmount      Float?
  penaltyAmount           Float?
  actionTaken             String[]
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  estimatedResolutionDate DateTime
  resolvedAt              DateTime?
  escalatedAt             DateTime?
  lastUpdatedBy           String?
  resolvedBy              String?
  escalatedBy             String?
  escalationReason        String?
  announcement            Announcement       @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  reportedUser            User               @relation("DisputeReported", fields: [reportedUserId], references: [id])
  reporter                User               @relation("DisputeReporter", fields: [reporterId], references: [id])

  @@index([announcementId])
  @@index([status])
  @@index([priority])
  @@index([category])
  @@index([createdAt])
}

model ReverseAuction {
  id                  String        @id @default(cuid())
  announcementId      String        @unique
  initialPrice        Float
  minimumPrice        Float
  currentBestPrice    Float
  auctionDuration     Float
  autoAcceptThreshold Float?
  maxBidders          Int           @default(10)
  totalBids           Int           @default(0)
  status              AuctionStatus @default(ACTIVE)
  winningBidId        String?       @unique
  createdAt           DateTime      @default(now())
  expiresAt           DateTime
  completedAt         DateTime?
  cancelledAt         DateTime?
  cancellationReason  String?
  bids                AuctionBid[]
  announcement        Announcement  @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  winningBid          AuctionBid?   @relation("WinningBid", fields: [winningBidId], references: [id])

  @@index([status])
  @@index([expiresAt])
}

model AuctionBid {
  id                    String          @id @default(cuid())
  auctionId             String
  bidderId              String
  proposedPrice         Float
  estimatedDeliveryTime Int
  additionalNotes       String?
  validUntil            DateTime
  delivererRating       Float           @default(0)
  compositeScore        Float           @default(0)
  status                BidStatus       @default(PENDING)
  createdAt             DateTime        @default(now())
  acceptedAt            DateTime?
  auction               ReverseAuction  @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder                User            @relation(fields: [bidderId], references: [id])
  winningAuction        ReverseAuction? @relation("WinningBid")

  @@index([auctionId])
  @@index([compositeScore])
  @@index([status])
}

model DeliveryGroup {
  id                 String              @id @default(cuid())
  delivererId        String
  status             GroupStatus         @default(PROPOSED)
  totalAnnouncements Int
  originalTotalPrice Float
  groupedPrice       Float
  savingsAmount      Float
  delivererBonus     Float
  estimatedDuration  Int
  createdAt          DateTime            @default(now())
  validUntil         DateTime
  activatedAt        DateTime?
  completedAt        DateTime?
  cancelledAt        DateTime?
  cancellationReason String?
  announcements      AnnouncementGroup[]
  deliverer          User                @relation(fields: [delivererId], references: [id])
  proposals          GroupingProposal[]

  @@index([delivererId])
  @@index([status])
  @@index([createdAt])
}

model AnnouncementGroup {
  id              String        @id @default(cuid())
  announcementId  String
  deliveryGroupId String
  originalPrice   Float
  groupedPrice    Float
  savings         Float
  position        Int           @default(1)
  announcement    Announcement  @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  deliveryGroup   DeliveryGroup @relation(fields: [deliveryGroupId], references: [id], onDelete: Cascade)

  @@unique([announcementId, deliveryGroupId])
  @@index([deliveryGroupId])
}

model GroupingProposal {
  id              String         @id @default(cuid())
  deliveryGroupId String
  clientId        String
  announcementId  String
  originalPrice   Float
  proposedPrice   Float
  savings         Float
  status          ProposalStatus @default(PENDING)
  validUntil      DateTime
  responseAt      DateTime?
  declineReason   String?
  createdAt       DateTime       @default(now())
  announcement    Announcement   @relation(fields: [announcementId], references: [id])
  client          User           @relation(fields: [clientId], references: [id])
  deliveryGroup   DeliveryGroup  @relation(fields: [deliveryGroupId], references: [id], onDelete: Cascade)

  @@index([deliveryGroupId])
  @@index([clientId])
  @@index([status])
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@unique([identifier, value])
}

enum UserRole {
  CLIENT
  DELIVERER
  MERCHANT
  PROVIDER
  ADMIN
}

enum ValidationStatus {
  PENDING
  PENDING_DOCUMENTS
  PENDING_VALIDATION
  APPROVED
  VALIDATED
  REJECTED
  SUSPENDED
}

enum DocumentType {
  IDENTITY
  DRIVING_LICENSE
  INSURANCE
  VEHICLE_REGISTRATION
  CERTIFICATION
  CONTRACT
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ServiceType {
  PERSON_TRANSPORT
  AIRPORT_TRANSFER
  SHOPPING
  INTERNATIONAL_PURCHASE
  PET_CARE
  HOME_SERVICE
  CART_DROP
  OTHER
}

enum AnnouncementType {
  PACKAGE_DELIVERY
  PERSON_TRANSPORT
  AIRPORT_TRANSFER
  SHOPPING
  INTERNATIONAL_PURCHASE
  PET_SITTING
  HOME_SERVICE
  CART_DROP
}

enum AnnouncementStatus {
  DRAFT
  ACTIVE
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  CANCELLED
  FAILED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum SubscriptionPlan {
  FREE
  STARTER
  PREMIUM
}

enum SubscriptionType {
  FREE
  STARTER
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}

enum NotificationType {
  SYSTEM
  DELIVERY
  BOOKING
  PAYMENT
  ANNOUNCEMENT
  VALIDATION
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum ServiceCategory {
  TRANSPORT
  HOME_CLEANING
  GARDENING
  HANDYMAN
  TUTORING
  HEALTHCARE
  BEAUTY
  PET_CARE
  OTHER
}

enum WalletOperationType {
  CREDIT
  DEBIT
  WITHDRAWAL
  REFUND
  FEE
}

enum OperationStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum BoxSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum BoxStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum ContractType {
  STANDARD
  PREMIUM
  ENTERPRISE
  CUSTOM
}

enum ContractStatus {
  DRAFT
  PENDING
  ACTIVE
  SUSPENDED
  TERMINATED
}

enum GenerationStatus {
  SUCCESS
  FAILED
  IN_PROGRESS
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  IN_TRANSIT
  DELIVERED
  CANCELLED
  REFUNDED
}

enum TicketCategory {
  DELIVERY_ISSUE
  PAYMENT_PROBLEM
  ACCOUNT_ACCESS
  TECHNICAL_SUPPORT
  BILLING_INQUIRY
  FEATURE_REQUEST
  COMPLAINT
  PARTNERSHIP
  GENERAL_INQUIRY
  BUG_REPORT
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  ESCALATED
  RESOLVED
  CLOSED
  REOPENED
}

enum CertificationCategory {
  SAFETY
  QUALITY
  TECHNICAL
  ENVIRONMENTAL
  COMPLIANCE
  CUSTOMER_SERVICE
  SPECIALIZED
}

enum CertificationLevel {
  BASIC
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum CertificationStatus {
  NOT_STARTED
  ENROLLED
  IN_PROGRESS
  COMPLETED
  FAILED
  EXPIRED
  SUSPENDED
  RENEWED
}

enum ModuleStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum InsuranceCategory {
  PROFESSIONAL_LIABILITY
  GOODS_TRANSPORT
  STORAGE_COVERAGE
  PERSONAL_ACCIDENT
  CYBER_LIABILITY
  GENERAL_LIABILITY
}

enum CoverageType {
  DAMAGE_COVERAGE
  THEFT_COVERAGE
  LOSS_COVERAGE
  DELAY_COVERAGE
  LIABILITY_COVERAGE
  PERSONAL_INJURY
}

enum ClaimType {
  DAMAGE
  THEFT
  LOSS
  DELAY
  PERSONAL_INJURY
  LIABILITY
  OTHER
}

enum ClaimStatus {
  REPORTED
  UNDER_INVESTIGATION
  BEING_ASSESSED
  APPROVED
  REJECTED
  SETTLED
  CLOSED
}

enum AssessmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum WarrantyType {
  SERVICE_QUALITY
  DELIVERY_GUARANTEE
  SATISFACTION_GUARANTEE
  DAMAGE_PROTECTION
  TIME_GUARANTEE
}

enum WarrantyClaimType {
  SERVICE_DEFECT
  LATE_DELIVERY
  DAMAGED_GOODS
  INCOMPLETE_SERVICE
  UNSATISFACTORY_QUALITY
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReferralType {
  USER_REFERRAL
  SERVICE_REFERRAL
  MERCHANT_REFERRAL
  DELIVERER_REFERRAL
  PROVIDER_REFERRAL
}

enum ReferralStatus {
  PENDING
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELLED
}

enum ReferralMethod {
  CODE
  LINK
  EMAIL
  SOCIAL_MEDIA
  WORD_OF_MOUTH
  OTHER
}

enum RewardStatus {
  PENDING
  APPROVED
  PAID
  EXPIRED
  CANCELLED
}

enum RewardType {
  CASH
  CREDIT
  DISCOUNT
  POINTS
  FREE_SERVICE
  PREMIUM_ACCESS
}

enum ActivityType {
  REGISTRATION
  FIRST_ORDER
  FIRST_DELIVERY
  MONTHLY_ACTIVITY
  SPENDING_THRESHOLD
  REFERRAL_CHAIN
}

enum InfluencerStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  SUSPENDED
  TERMINATED
}

enum CampaignType {
  AWARENESS
  CONVERSION
  ENGAGEMENT
  BRAND_PARTNERSHIP
  PRODUCT_LAUNCH
}

enum CampaignStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum DisputeCategory {
  DELIVERY_NOT_RECEIVED
  DAMAGED_PACKAGE
  WRONG_ADDRESS
  LATE_DELIVERY
  PAYMENT_ISSUE
  INAPPROPRIATE_BEHAVIOR
  FRAUD_ATTEMPT
  SERVICE_NOT_RENDERED
  QUALITY_ISSUE
  OTHER
}

enum DisputePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DisputeStatus {
  OPEN
  INVESTIGATING
  WAITING_EVIDENCE
  MEDIATION
  RESOLVED
  CLOSED
  ESCALATED
}

enum DisputeResolution {
  FAVOR_REPORTER
  FAVOR_REPORTED
  PARTIAL_REFUND
  NO_ACTION
  MEDIATION
}

enum AuctionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum BidStatus {
  PENDING
  ACCEPTED
  LOST
  CANCELLED
}

enum GroupStatus {
  PROPOSED
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum ProposalStatus {
  PENDING
  ACCEPT
  DECLINE
  EXPIRED
  CANCELLED
}

model DeliveryValidationAttempt {
  id            String   @id @default(cuid())
  deliveryId    String
  attemptedCode String
  success       Boolean
  attemptedAt   DateTime
  attemptedBy   String
}
