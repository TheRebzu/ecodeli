// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// -------- AUTH MODELS --------

enum UserRole {
  CLIENT
  DELIVERER
  MERCHANT
  PROVIDER
  ADMIN
}

enum UserStatus {
  PENDING_VERIFICATION
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocumentType {
  ID_CARD
  DRIVING_LICENSE
  VEHICLE_REGISTRATION
  INSURANCE
  QUALIFICATION_CERTIFICATE
  PROOF_OF_ADDRESS
  BUSINESS_REGISTRATION
  OTHER
}

enum ContractStatus {
  DRAFT
  PENDING_SIGNATURE
  ACTIVE
  TERMINATED
  EXPIRED
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR_AUTH
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          UserRole
  status        UserStatus @default(PENDING_VERIFICATION)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // NextAuth.js relations
  accounts Account[]
  sessions Session[]

  // Role specific relations
  client    Client?
  deliverer Deliverer?
  merchant  Merchant?
  provider  Provider?
  admin     Admin?

  // Additional fields
  phoneNumber      String?
  lastLoginAt      DateTime?
  twoFactorEnabled Boolean   @default(false)
  twoFactorSecret  String?

  // Document relations
  documents         Document[]
  reviewedDocuments Document[] @relation("DocumentReviewer")

  // Verification relations
  verifications          Verification[] @relation("VerifierRelation")
  submittedVerifications Verification[] @relation("SubmitterRelation")

  // Notification relations
  notifications Notification[]

  // Locale préférée de l'utilisateur
  locale String?

  // Préférences utilisateur (stockées en JSON)
  preferences Json?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime
  type       TokenType @default(EMAIL_VERIFICATION)
  used       Boolean   @default(false)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// -------- ROLE SPECIFIC MODELS --------

model Client {
  id          String   @id @default(cuid())
  userId      String   @unique
  address     String?
  phone       String?
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Client specific fields
  city       String?
  state      String?
  postalCode String?
  country    String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("clients")
}

model Deliverer {
  id             String   @id @default(cuid())
  userId         String   @unique
  address        String?
  phone          String
  vehicleType    String?
  licensePlate   String?
  isVerified     Boolean  @default(false)
  availableHours Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Deliverer specific fields
  verificationDate DateTime?
  maxCapacity      Float?
  currentLocation  String?
  isActive         Boolean   @default(false)
  rating           Float?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deliverers")
}

model Merchant {
  id           String   @id @default(cuid())
  userId       String   @unique
  companyName  String
  address      String
  phone        String
  businessType String?
  vatNumber    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Merchant specific fields
  businessName     String?
  businessAddress  String?
  businessCity     String?
  businessState    String?
  businessPostal   String?
  businessCountry  String?
  taxId            String?
  websiteUrl       String?
  isVerified       Boolean   @default(false)
  verificationDate DateTime?

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  contracts Contract[]

  @@map("merchants")
}

model Provider {
  id          String   @id @default(cuid())
  userId      String   @unique
  companyName String?
  address     String
  phone       String
  services    String[]
  isVerified  Boolean  @default(false)
  rating      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Provider specific fields
  serviceType      String?
  description      String?
  availability     String? // JSON string of availability
  verificationDate DateTime?

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills Skill[]

  @@map("providers")
}

model Admin {
  id          String   @id @default(cuid())
  userId      String   @unique
  permissions String[]
  department  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Admin specific fields
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Document {
  id                 String             @id @default(cuid())
  type               DocumentType
  userId             String
  filename           String
  fileUrl            String
  mimeType           String
  fileSize           Int
  uploadedAt         DateTime           @default(now())
  expiryDate         DateTime?
  notes              String?
  isVerified         Boolean            @default(false)
  verificationStatus VerificationStatus @default(PENDING)
  rejectionReason    String?

  // Relations
  verifications Verification[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewer      User?          @relation("DocumentReviewer", fields: [reviewerId], references: [id])
  reviewerId    String?

  @@index([userId])
  @@index([type])
  @@index([verificationStatus])
  @@map("documents")
}

model Verification {
  id              String             @id @default(cuid())
  status          VerificationStatus @default(PENDING)
  requestedAt     DateTime           @default(now())
  verifiedAt      DateTime?
  documentId      String
  submitterId     String
  verifierId      String?
  notes           String?
  rejectionReason String?

  // Relations
  document  Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  submitter User     @relation("SubmitterRelation", fields: [submitterId], references: [id])
  verifier  User?    @relation("VerifierRelation", fields: [verifierId], references: [id])

  @@index([documentId])
  @@index([submitterId])
  @@index([verifierId])
  @@index([status])
  @@map("verifications")
}

model Contract {
  id         String         @id @default(cuid())
  merchantId String
  title      String
  content    String         @db.Text
  status     ContractStatus @default(DRAFT)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  signedAt   DateTime?
  expiresAt  DateTime?
  fileUrl    String?

  // Relations
  merchant Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@index([merchantId])
  @@index([status])
  @@map("contracts")
}

model Skill {
  id          String   @id @default(cuid())
  providerId  String
  name        String
  description String?
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  provider Provider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  @@index([providerId])
  @@map("skills")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  link      String?
  data      String?
  read      Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
}
