// This is your Prisma schema file for EcoDeli
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle de base pour les utilisateurs
model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String?
  name               String?
  phone              String?
  image              String?
  emailVerified      DateTime?
  city               String?
  postalCode         String?
  country            String?
  profileImage       String?
  isVerified         Boolean   @default(false)
  verificationToken  String?
  resetPasswordToken String?
  mfaSecret          String?   // Secret for TOTP MFA
  mfaEnabled         Boolean   @default(false)
  mfaBackupCodes     String[]  @default([])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastLogin          DateTime?
  role               UserRole  @default(ADMIN)
  status             UserStatus @default(PENDING)
  language           String    @default("fr")
  tutorialProgress   Json?     // Store tutorial progress
  deletedAt          DateTime? // Soft delete
  rating             Float?    // User's average rating

  // Profile relationships
  clientProfile    ClientProfile?
  courierProfile   CourierProfile?
  merchantProfile  MerchantProfile?
  providerProfile  ProviderProfile?

  // Relations based on role
  customer        Customer?
  deliveryPerson  DeliveryPerson?
  merchant        Merchant?
  serviceProvider ServiceProvider?
  admin           Admin?

  // Common relations
  notifications   Notification[]
  documents       Document[]
  reviews         Review[]        @relation("ReviewAuthor")
  reviewsReceived Review[]        @relation("ReviewTarget")
  auditLogs       AuditLog[]
  supportTickets  SupportTicket[]
  interests       Interest[]      // User's interests in announcements

  // Auth related
  accounts         Account[]
  sessions         Session[]
  sentMessages     Message[] @relation("SenderMessages")
  receivedMessages Message[] @relation("ReceiverMessages")

  // Add todos relation to User
  todos            Todo[]

  // Add address relation
  userAddress      Address?

  // Add settings relation
  userSettings     UserSettings?

  // Add announcement relations
  createdAnnouncements        Announcement[]         @relation("CustomerAnnouncements")
  deliveredAnnouncements      Announcement[]         @relation("CourierAnnouncements")
  bids                        Bid[]

  @@index([email])
  @@index([role, status])
  @@index([deletedAt])
}

// Client profile
model ClientProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionPlan String   @default("FREE") // FREE, STARTER, PREMIUM
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

// Courier (Livreur) profile
model CourierProfile {
  id                String    @id @default(cuid())
  name              String
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String
  phone             String?
  address           String?
  city              String?
  postalCode        String?
  country           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  role              Role      @default(CLIENT)
  status            Status    @default(PENDING)
  
  // Relations avec les autres modèles en fonction du rôle
  client            Client?
  merchant          Merchant?
  courier           Courier?
  provider          Provider?
  
  // Authentification
  accounts          Account[]
  sessions          Session[]
  
  // Alertes
  alertRules        AlertRule[]
  alerts            Alert[]
}

// Modèle pour l'authentification avec NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Énumération des rôles possibles
enum Role {
  ADMIN
  CLIENT
  MERCHANT
  COURIER
  PROVIDER
}

// Énumération des statuts des utilisateurs
enum Status {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

// Client (Particulier)
model Client {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String?
  name               String?
  phone              String?
  image              String?
  emailVerified      DateTime?
  city               String?
  postalCode         String?
  country            String?
  profileImage       String?
  isVerified         Boolean   @default(false)
  verificationToken  String?
  resetPasswordToken String?
  mfaSecret          String?   // Secret for TOTP MFA
  mfaEnabled         Boolean   @default(false)
  mfaBackupCodes     String[]  @default([])
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastLogin          DateTime?
  role               UserRole  @default(ADMIN)
  status             UserStatus @default(PENDING)
  language           String    @default("fr")
  tutorialProgress   Json?     // Store tutorial progress
  deletedAt          DateTime? // Soft delete
  rating             Float?    // User's average rating

  // Profile relationships
  clientProfile    ClientProfile?
  courierProfile   CourierProfile?
  merchantProfile  MerchantProfile?
  providerProfile  ProviderProfile?

  // Relations based on role
  customer        Customer?
  deliveryPerson  DeliveryPerson?
  merchant        Merchant?
  serviceProvider ServiceProvider?
  admin           Admin?

  // Common relations
  notifications   Notification[]
  documents       Document[]
  reviews         Review[]        @relation("ReviewAuthor")
  reviewsReceived Review[]        @relation("ReviewTarget")
  auditLogs       AuditLog[]
  supportTickets  SupportTicket[]
  interests       Interest[]      // User's interests in announcements

  // Auth related
  accounts         Account[]
  sessions         Session[]
  sentMessages     Message[] @relation("SenderMessages")
  receivedMessages Message[] @relation("ReceiverMessages")

  // Add todos relation to User
  todos            Todo[]

  // Add address relation
  userAddress      Address?

  // Add settings relation
  userSettings     UserSettings?

  // Add announcement relations
  createdAnnouncements        Announcement[]         @relation("CustomerAnnouncements")
  deliveredAnnouncements      Announcement[]         @relation("CourierAnnouncements")
  bids                        Bid[]

  @@index([email])
  @@index([role, status])
  @@index([deletedAt])
}

model DeliveryPerson {
  id                     String                   @id @default(cuid())
  userId                 String                   @unique
  vehicleType            VehicleType?
  additionalVehicles     VehicleType[]
  licensePlate           String?
  idCardNumber           String?
  drivingLicenseNumber   String?
  idCardVerified         Boolean                  @default(false)
  drivingLicenseVerified Boolean                  @default(false)
  isAvailable            Boolean                  @default(true)
  radius                 Int                      @default(30)        // in kilometers
  specializations        DeliverySpecialization[]
  skills                 String[]
  isDeleted              Boolean                  @default(false)

  // Relations
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveries     Delivery[]           @relation("DeliveryPersonDelivery")
  plannedRoutes  PlannedRoute[]
  wallet         Wallet?
  payments       Payment[]            @relation("DeliveryPersonPayment")
  deliveryTeams  DeliveryTeamMember[]
  nfcCards       NFCCard[]
  workingHours   WorkingHour[]
  serviceAreas   ServiceArea[]
  driverAds      DriverAdvertisement[] // Driver advertisements

  @@index([isAvailable])
  @@index([vehicleType])
  @@index([specializations])
  @@index([isDeleted])
}

model WorkingHour {
  id               String         @id @default(cuid())
  deliveryPersonId String
  dayOfWeek        Int            // 0-6, 0 is Sunday
  startTime        String         // Format "HH:MM"
  endTime          String         // Format "HH:MM"
  isRecurring      Boolean        @default(true)
  specificDate     DateTime?      // For non-recurring hours
  
  // Relations
  deliveryPerson   DeliveryPerson @relation(fields: [deliveryPersonId], references: [id], onDelete: Cascade)

  @@index([deliveryPersonId, dayOfWeek])
  @@index([specificDate])
}

model ServiceArea {
  id               String         @id @default(cuid())
  deliveryPersonId String
  city             String
  postalCode       String
  country          String         @default("France")
  isDefault        Boolean        @default(false)
  
  // Relations
  deliveryPerson   DeliveryPerson @relation(fields: [deliveryPersonId], references: [id], onDelete: Cascade)

  @@index([deliveryPersonId])
  @@index([postalCode, country])
}

model Merchant {
  id                 String             @id @default(cuid())
  userId             String             @unique
  businessName       String
  businessAddress    String
  businessCity       String
  businessPostalCode String
  businessCountry    String
  vatNumber          String?
  siretNumber        String?
  contractStartDate  DateTime           @default(now())
  contractEndDate    DateTime?
  contractStatus     ContractStatus     @default(PENDING)
  storeFrontImage    String?
  businessType       String?
  commissionRate     Float              @default(0.1) // 10% default commission
  isDeleted          Boolean            @default(false)
  categories         MerchantCategory[]

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcements Announcement[] @relation("MerchantAnnouncement")
  deliveries    Delivery[]     @relation("MerchantDelivery")
  cartDrops     CartDrop[]
  payments      Payment[]      @relation("MerchantPayment")
  products      Product[]
  inventory     Inventory[]
  contracts     Contract[]
  openingHours  OpeningHour[]

  @@index([businessCity])
  @@index([businessPostalCode])
  @@index([contractStatus])
  @@index([categories])
  @@index([isDeleted])
}

model OpeningHour {
  id          String    @id @default(cuid())
  merchantId  String
  dayOfWeek   Int       // 0-6, 0 is Sunday
  openTime    String    // Format "HH:MM"
  closeTime   String    // Format "HH:MM"
  isClosed    Boolean   @default(false)
  
  // Relations
  merchant    Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@index([merchantId, dayOfWeek])
}

model ServiceProvider {
  id                String        @id @default(cuid())
  userId            String        @unique
  professionalId    String?
  insuranceNumber   String?
  serviceTypes      ServiceType[]
  isVerified        Boolean       @default(false)
  backgroundChecked Boolean       @default(false)
  experienceYears   Int           @default(0)
  specialities      String[]      // Array of specialities
  workRadius        Int           @default(20) // in kilometers
  isDeleted         Boolean       @default(false)

  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  services       Service[]
  availabilities Availability[]
  payments       Payment[]      @relation("ServiceProviderPayment")

  @@index([serviceTypes])
  @@index([isVerified])
  @@index([isDeleted])
}

model Admin {
  id            String          @id @default(cuid())
  userId        String          @unique
  accessLevel   AccessLevel     @default(STANDARD)
  managedRegion String?         // Region this admin manages
  department    AdminDepartment @default(GENERAL)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([accessLevel])
  @@index([department])
}

// Delivery-related models
model Announcement {
  id                     String             @id @default(uuid())
  
  // Informations générales
  title                  String
  description            String?
  
  // Informations sur le paquet
  packageType            PackageType
  weight                 Float
  width                  Float?
  height                 Float?
  length                 Float?
  isFragile              Boolean            @default(false)
  requiresRefrigeration  Boolean            @default(false)
  
  // Adresse de ramassage
  pickupAddress          String
  pickupCity             String
  pickupPostalCode       String
  pickupCountry          String
  pickupCoordinates      Json               // { lat: number, lng: number }
  
  // Adresse de livraison
  deliveryAddress        String
  deliveryCity           String
  deliveryPostalCode     String
  deliveryCountry        String
  deliveryCoordinates    Json               // { lat: number, lng: number }
  
  // Informations temporelles
  pickupDate             DateTime
  deliveryDeadline       DateTime
  
  // Informations sur le prix
  price                  Float
  isNegotiable           Boolean            @default(false)
  
  // Assurance
  insuranceOption        InsuranceOption    @default(NONE)
  insuranceAmount        Float?
  
  // Images du colis
  packageImages          String[]           @default([])
  
  // État de l'annonce
  status                 AnnouncementStatus @default(PENDING)
  
  // Relations
  customerId             String
  customer               Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  deliveryPersonId       String?
  deliveryPerson         DeliveryPerson?    @relation(fields: [deliveryPersonId], references: [id])
  bids                   Bid[]
  
  // Dates
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  deletedAt              DateTime?

  @@index([customerId])
  @@index([deliveryPersonId])
  @@index([status])
  @@index([pickupCity])
  @@index([deliveryCity])
}

model Delivery {
  id                String         @id @default(cuid())
  trackingNumber    String         @unique
  status            DeliveryStatus @default(PENDING)
  pickupDate        DateTime?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  distance          Float?         // in km
  price             Float
  insuranceIncluded Boolean        @default(false)
  insuranceAmount   Float?
  notes             String?
  proofOfDelivery   String?
  proofOfPickup     String?
  recipientName     String?
  recipientContact  String?
  signatureRequired Boolean        @default(false)
  deliveryCode      String?        // Confirmation code for delivery
  feedback          String?
  isDeleted         Boolean        @default(false)
  
  // Relations
  announcementId      String?            @unique
  announcement        Announcement?      @relation(fields: [announcementId], references: [id])
  customerId          String
  customer            Customer           @relation("CustomerDelivery", fields: [customerId], references: [id])
  deliveryPersonId    String?
  deliveryPerson      DeliveryPerson?    @relation("DeliveryPersonDelivery", fields: [deliveryPersonId], references: [id])
  merchantId          String?
  merchant            Merchant?          @relation("MerchantDelivery", fields: [merchantId], references: [id])
  storageBoxes        StorageBox[]
  trackingUpdates     TrackingUpdate[]
  payment             Payment?           @relation("DeliveryPayment")
  cartDrop            CartDrop?
  deliveryTeamId      String?
  deliveryTeam        DeliveryTeam?      @relation(fields: [deliveryTeamId], references: [id])
  recurringDeliveryId String?
  recurringDelivery   RecurringDelivery? @relation(fields: [recurringDeliveryId], references: [id])
  issues              DeliveryIssue[]
  reviews             Review[]
  history             DeliveryHistory[]

  @@index([status, pickupDate])
  @@index([status, estimatedDelivery])
  @@index([customerId])
  @@index([deliveryPersonId])
  @@index([merchantId])
  @@index([deliveryTeamId])
  @@index([trackingNumber])
  @@index([isDeleted])
}

model DeliveryHistory {
  id          String       @id @default(cuid())
  deliveryId  String
  field       String       // Field that changed
  oldValue    String?
  newValue    String?
  changedBy   String       // User ID
  changeReason String?
  timestamp   DateTime     @default(now())

  // Relations
  delivery    Delivery     @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId, field])
  @@index([timestamp])
}

model DeliveryIssue {
  id           String            @id @default(cuid())
  deliveryId   String
  delivery     Delivery          @relation(fields: [deliveryId], references: [id])
  reportedById String            // User ID who reported the issue
  issueType    DeliveryIssueType
  description  String
  status       IssueStatus       @default(OPEN)
  reportedAt   DateTime          @default(now())
  resolvedAt   DateTime?
  resolution   String?
  assignedToId String?           // Admin/staff user ID

  @@index([deliveryId])
  @@index([status])
  @@index([reportedAt])
}

model DeliveryTeam {
  id        String   @id @default(cuid())
  name      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  members    DeliveryTeamMember[]
  deliveries Delivery[]

  @@index([isActive])
}

model DeliveryTeamMember {
  id               String         @id @default(cuid())
  deliveryTeamId   String
  deliveryPersonId String
  role             TeamMemberRole @default(MEMBER)
  joinedAt         DateTime       @default(now())

  // Relations
  team           DeliveryTeam   @relation(fields: [deliveryTeamId], references: [id], onDelete: Cascade)
  deliveryPerson DeliveryPerson @relation(fields: [deliveryPersonId], references: [id], onDelete: Cascade)

  @@unique([deliveryTeamId, deliveryPersonId])
  @@index([deliveryTeamId])
  @@index([deliveryPersonId])
}

model RecurringDelivery {
  id                 String             @id @default(cuid())
  customerId         String
  frequency          RecurringFrequency
  dayOfWeek          Int?               // 0-6 for weekly deliveries
  dayOfMonth         Int?               // 1-31 for monthly deliveries
  startDate          DateTime
  endDate            DateTime?
  isActive           Boolean            @default(true)
  origin             String
  destination        String
  packageSize        PackageSize
  packageDescription String?

  // Relations
  customer   Customer   @relation(fields: [customerId], references: [id])
  deliveries Delivery[]

  @@index([customerId, isActive])
  @@index([frequency])
  @@index([startDate, endDate])
}

model TrackingUpdate {
  id          String         @id @default(cuid())
  deliveryId  String
  status      DeliveryStatus
  location    String?
  coordinates Json?          // {lat: number, lng: number}
  message     String?
  timestamp   DateTime       @default(now())
  updatedBy   String?        // ID of user who made the update
  isPublic    Boolean        @default(true) // Whether visible to customer

  // Relations
  delivery Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@index([status])
  @@index([timestamp])
}

model PlannedRoute {
  id                String      @id @default(cuid())
  userId            String      @unique
  subscriptionPlan  String?     @default("FREE") // FREE, STARTER, PREMIUM
  subscriptionEnd   DateTime?
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  shipments         Shipment[]  // Expéditions demandées par le client
  serviceRequests   Service[]   // Services demandés par le client
  announcements     Announcement[] // Annonces publiées par le client
}

// Commerçant
model Merchant {
  id                String      @id @default(cuid())
  userId            String      @unique
  companyName       String
  siret             String      @unique
  contractType      String
  contractStart     DateTime
  contractEnd       DateTime?
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcements     Announcement[] // Annonces publiées par le commerçant
  products          Product[]   // Produits proposés par le commerçant
}

// Produit offert par un commerçant
model Product {
  id          String    @id @default(cuid())
  merchantId  String
  name        String
  description String?
  price       Float
  weight      Float?
  dimensions  String?   // Format: LxlxH en cm
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  merchant    Merchant  @relation(fields: [merchantId], references: [id], onDelete: Cascade)
}

// Livreur
model Courier {
  id                String      @id @default(cuid())
  userId            String      @unique
  vehicleType       String?
  licenseNumber     String?
  licensePlate      String?
  verifiedDocuments Boolean     @default(false)
  rating            Float?
  nfcCardId         String?     @unique // Identifiant de la carte NFC
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  shipments         ShipmentCourier[] // Livraisons effectuées
  availabilities    Availability[] // Disponibilités
  announcements     Announcement[] // Trajets annoncés
}

// Disponibilité du livreur
model Availability {
  id          String    @id @default(cuid())
  courierId   String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  fromAddress String?
  toAddress   String?
  
  courier     Courier   @relation(fields: [courierId], references: [id], onDelete: Cascade)
}

// Prestataire de services à la personne
model Provider {
  id                String      @id @default(cuid())
  userId            String      @unique
  serviceTypes      String[]    // Types de services proposés
  qualifications    String?
  certifications    String?
  rating            Float?
  
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  services          Service[]   // Services fournis
  availabilities    ProviderAvailability[] // Disponibilités
}

// Disponibilité du prestataire
model ProviderAvailability {
  id          String    @id @default(cuid())
  providerId  String
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  
  provider    Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

// Annonce (livraison ou service)
model Announcement {
  id            String          @id @default(cuid())
  title         String
  description   String
  fromAddress   String
  toAddress     String
  packageSize   PackageSize?    // Taille du colis (si applicable)
  weight        Float?          // Poids en kg (si applicable)
  price         Float
  deliveryDate  DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  status        AnnouncementStatus @default(OPEN)
  type          AnnouncementType
  
  // Relations
  clientId      String?
  merchantId    String?
  courierId     String?         // Si un livreur propose un trajet
  
  client        Client?         @relation(fields: [clientId], references: [id])
  merchant      Merchant?       @relation(fields: [merchantId], references: [id])
  courier       Courier?        @relation(fields: [courierId], references: [id])
  shipment      Shipment?
}

enum AnnouncementStatus {
  OPEN
  ASSIGNED
  COMPLETED
  CANCELLED
}

enum AnnouncementType {
  DELIVERY_REQUEST     // Demande de livraison
  JOURNEY_OFFER        // Offre de trajet par un livreur
  SERVICE_REQUEST      // Demande de service
}

enum PackageSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

// Expédition
model Shipment {
  id                String      @id @default(cuid())
  trackingNumber    String      @unique
  fromAddress       String
  toAddress         String
  packageSize       PackageSize
  weight            Float
  price             Float
  insuranceAmount   Float?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  deliveryDate      DateTime?
  deliveryStatus    DeliveryStatus @default(PENDING)
  
  // Codes de validation
  validationCode    String?
  validated         Boolean     @default(false)
  
  // Relations
  clientId          String
  announcementId    String?     @unique
  
  client            Client      @relation(fields: [clientId], references: [id])
  announcement      Announcement? @relation(fields: [announcementId], references: [id])
  couriers          ShipmentCourier[] // Plusieurs livreurs peuvent participer à une livraison
  storageFacility   StorageFacility?  @relation(fields: [storageFacilityId], references: [id])
  storageFacilityId String?
}

// Relation entre livraison et livreur (permet d'avoir plusieurs livreurs par livraison)
model ShipmentCourier {
  id          String    @id @default(cuid())
  shipmentId  String
  courierId   String
  startPoint  String
  endPoint    String
  status      DeliveryStatus @default(PENDING)
  startTime   DateTime?
  endTime     DateTime?
  
  shipment    Shipment  @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  courier     Courier   @relation(fields: [courierId], references: [id], onDelete: Cascade)
  
  @@unique([shipmentId, courierId])
}

// Statut de livraison
enum DeliveryStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  STORED
  DELIVERED
  CANCELLED
  FAILED
}

// Service à la personne
model Service {
  id              String        @id @default(cuid())
  type            ServiceType
  description     String
  address         String?
  price           Float
  date            DateTime
  startTime       DateTime
  endTime         DateTime?
  status          ServiceStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  clientId        String
  providerId      String?
  
  client          Client        @relation(fields: [clientId], references: [id])
  provider        Provider?     @relation(fields: [providerId], references: [id])
}

// Types de services
enum ServiceType {
  PERSONAL_TRANSPORT     // Transport de personnes
  AIRPORT_TRANSFER       // Transfert aéroport
  SHOPPING               // Courses
  FOREIGN_PURCHASE       // Achat à l'étranger
  PET_SITTING            // Garde d'animaux
  HOUSEKEEPING           // Ménage
  GARDENING              // Jardinage
  OTHER                  // Autre
}

// Statut du service
enum ServiceStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Entrepôts de stockage
model StorageFacility {
  id        String      @id @default(cuid())
  name      String
  address   String
  city      String
  capacity  Int
  
  shipments Shipment[]
}

// Factures
model Invoice {
  id            String      @id @default(cuid())
  invoiceNumber String      @unique
  amount        Float
  description   String?
  status        InvoiceStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  dueDate       DateTime
  paidAt        DateTime?
  
  // Le type d'entité à qui est destinée la facture (client, commerçant, livreur, prestataire)
  entityType    String
  entityId      String
}

// Modèles pour le système de tutoriel
model TutorialStep {
  id             String   @id @default(cuid())
  title          String
  content        String
  targetElementId String?
  featureId      String?
  position       String?
  order          Int
  isCompleted    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model UserTutorialProgress {
  userId         String   @id
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentStepId  String?
  completedSteps String[]
  isCompleted    Boolean  @default(false)
  lastUpdated    DateTime @default(now())
}

model FeatureTutorialProgress {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  featureId      String
  currentStepId  String?
  completedSteps String[]
  isCompleted    Boolean  @default(false)
  lastUpdated    DateTime @default(now())
  
  @@unique([userId, featureId])
}
