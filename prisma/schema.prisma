generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums essentiels
enum UserRole {
  CLIENT
  DELIVERER
  MERCHANT
  PROVIDER
  ADMIN
}

enum AnnouncementType {
  PACKAGE_DELIVERY
  PERSON_TRANSPORT
  AIRPORT_TRANSFER
  SHOPPING
  INTERNATIONAL_PURCHASE
  PET_SITTING
  HOME_SERVICE
  CART_DROP
}

enum AnnouncementStatus {
  DRAFT
  ACTIVE
  IN_PROGRESS
  COMPLETED
  CANCELLED
  EXPIRED
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  IN_TRANSIT
  DELIVERED
  CANCELLED
  FAILED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum SubscriptionPlan {
  FREE
  STARTER
  PREMIUM
}

enum DocumentType {
  IDENTITY
  DRIVING_LICENSE
  INSURANCE
  CERTIFICATION
  CONTRACT
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ServiceCategory {
  TRANSPORT
  HOME_CLEANING
  GARDENING
  HANDYMAN
  TUTORING
  HEALTHCARE
  BEAUTY
  PET_CARE
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

// Modèle User principal
model User {
  id                String              @id @default(cuid())
  email             String              @unique
  emailVerified     Boolean             @default(false)
  emailVerifiedAt   DateTime?
  password          String
  role              UserRole
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  profile           Profile?
  sessions          Session[]
  accounts          Account[]
  announcements     Announcement[]
  clientDeliveries  Delivery[]          @relation("ClientDeliveries")
  delivererDeliveries Delivery[]        @relation("DelivererDeliveries")
  bookings          Booking[]
  payments          Payment[]
  wallet            Wallet?
  notifications     Notification[]
  reviews           Review[]
  activityLogs      ActivityLog[]
  services          Service[]
  storageBoxRentals StorageBoxRental[]

  @@map("users")
}

// Profil utilisateur
model Profile {
  id          String  @id @default(cuid())
  userId      String  @unique
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String?
  lastName    String?
  phone       String?
  address     String?
  city        String?
  postalCode  String?
  country     String?
  avatar      String?
  verified    Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  documents   Document[]

  @@map("profiles")
}

// Sessions et authentification
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Annonces
model Announcement {
  id            String             @id @default(cuid())
  title         String
  description   String
  type          AnnouncementType
  status        AnnouncementStatus @default(ACTIVE)
  price         Decimal
  authorId      String
  author        User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  startLocation Json?
  endLocation   Json?
  scheduledAt   DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  // Relations
  deliveries    Delivery[]

  @@map("announcements")
}

// Livraisons
model Delivery {
  id               String         @id @default(cuid())
  announcementId   String
  announcement     Announcement   @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  clientId         String
  client           User           @relation("ClientDeliveries", fields: [clientId], references: [id], onDelete: Cascade)
  delivererId      String?
  deliverer        User?          @relation("DelivererDeliveries", fields: [delivererId], references: [id], onDelete: SetNull)
  status           DeliveryStatus @default(PENDING)
  validationCode   String?        @unique
  currentLocation  Json?
  pickupAddress    String
  deliveryAddress  String
  scheduledAt      DateTime
  completedAt      DateTime?
  price            Decimal
  commission       Decimal        @default(0)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  tracking         TrackingUpdate[]
  payments         Payment[]
  bookings         Booking[]

  @@map("deliveries")
}

// Suivi des livraisons
model TrackingUpdate {
  id         String   @id @default(cuid())
  deliveryId String
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  status     String
  message    String
  location   String?
  timestamp  DateTime @default(now())

  @@map("tracking_updates")
}

// Réservations
model Booking {
  id          String        @id @default(cuid())
  serviceId   String?
  service     Service?      @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  clientId    String
  client      User          @relation(fields: [clientId], references: [id], onDelete: Cascade)
  deliveryId  String?
  delivery    Delivery?     @relation(fields: [deliveryId], references: [id], onDelete: SetNull)
  scheduledAt DateTime
  status      BookingStatus @default(PENDING)
  notes       String?
  rating      Int?
  review      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("bookings")
}

// Services
model Service {
  id          String          @id @default(cuid())
  providerId  String
  provider    User            @relation(fields: [providerId], references: [id], onDelete: Cascade)
  name        String
  description String
  category    ServiceCategory
  price       Decimal
  duration    Int             // en minutes
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  bookings    Booking[]

  @@map("services")
}

// Paiements
model Payment {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveryId    String?       @unique
  delivery      Delivery?     @relation(fields: [deliveryId], references: [id], onDelete: SetNull)
  amount        Decimal
  currency      String        @default("EUR")
  status        PaymentStatus @default(PENDING)
  stripePaymentId String?
  type          String        // DELIVERY, SUBSCRIPTION, SERVICE
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

// Portefeuille
model Wallet {
  id      String @id @default(cuid())
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance Decimal @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  operations WalletOperation[]
  
  @@map("wallets")
}

model WalletOperation {
  id        String   @id @default(cuid())
  walletId  String
  wallet    Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  type      String   // CREDIT, DEBIT, WITHDRAWAL, REFUND, FEE
  amount    Decimal
  description String
  status    String   @default("COMPLETED")
  createdAt DateTime @default(now())

  @@map("wallet_operations")
}

// Documents
model Document {
  id         String         @id @default(cuid())
  profileId  String
  profile    Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  type       DocumentType
  filename   String
  url        String
  status     DocumentStatus @default(PENDING)
  validatedBy String?
  validatedAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@map("documents")
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notifications")
}

// Avis
model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  @@map("reviews")
}

// Logs d'activité
model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  action    String
  details   Json?
  createdAt DateTime @default(now())

  @@map("activity_logs")
}

// Localisations et entrepôts
model Location {
  id          String   @id @default(cuid())
  name        String
  type        String   // WAREHOUSE, OFFICE, PICKUP_POINT
  address     String
  city        String
  postalCode  String
  country     String   @default("FR")
  lat         Float?
  lng         Float?
  phone       String?
  email       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  warehouse   Warehouse?
  storageBoxes StorageBox[]

  @@map("locations")
}

model Warehouse {
  id                String   @id @default(cuid())
  locationId        String   @unique
  location          Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  capacity          Int
  currentOccupancy  Int      @default(0)
  managerName       String?
  managerEmail      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("warehouses")
}

model StorageBox {
  id          String   @id @default(cuid())
  locationId  String
  location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  boxNumber   String
  size        String   // SMALL, MEDIUM, LARGE, EXTRA_LARGE
  pricePerDay Decimal
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rentals     StorageBoxRental[]

  @@map("storage_boxes")
}

model StorageBoxRental {
  id                String   @id @default(cuid())
  clientId          String
  storageBoxId      String
  startDate         DateTime
  endDate           DateTime?
  accessCode        String   // Code d'accès au box
  totalPrice        Decimal?
  isPaid            Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  client            User     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  storageBox        StorageBox @relation(fields: [storageBoxId], references: [id], onDelete: Cascade)

  @@map("storage_box_rentals")
} 