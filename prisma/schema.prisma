generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  DELIVERER
  MERCHANT
  PROVIDER
  ADMIN
}

enum AnnouncementType {
  PACKAGE_DELIVERY
  PERSON_TRANSPORT
  AIRPORT_TRANSFER
  SHOPPING
  INTERNATIONAL_PURCHASE
  PET_SITTING
  HOME_SERVICE
  CART_DROP
}

enum AnnouncementStatus {
  ACTIVE
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentType {
  DELIVERY
  SUBSCRIPTION
  SERVICE
}

enum SubscriptionPlan {
  FREE
  STARTER
  PREMIUM
}

enum DocumentType {
  IDENTITY
  DRIVING_LICENSE
  INSURANCE
  CERTIFICATION
  CONTRACT
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id              String              @id @default(cuid())
  email           String              @unique
  password        String
  role            UserRole
  profile         Profile?
  announcements   Announcement[]
  deliveries      Delivery[]         @relation("DelivererDeliveries")
  clientDeliveries Delivery[]        @relation("ClientDeliveries")
  bookings        Booking[]
  services        Service[]
  payments        Payment[]
  documents       Document[]
  notifications   Notification[]
  sessions        Session[]
  subscription    Subscription?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([email])
  @@index([role])
}

model Profile {
  id          String      @id @default(cuid())
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String?
  lastName    String?
  phone       String?
  address     String?
  city        String?
  postalCode  String?
  country     String?
  avatar      String?
  verified    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Session {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  token       String      @unique
  expiresAt   DateTime
  createdAt   DateTime    @default(now())
  
  @@index([token])
  @@index([userId])
}

model Announcement {
  id              String              @id @default(cuid())
  title           String
  description     String
  type            AnnouncementType
  status          AnnouncementStatus  @default(ACTIVE)
  price           Decimal
  pickupAddress   String
  deliveryAddress String
  scheduledAt     DateTime
  authorId        String
  author          User                @relation(fields: [authorId], references: [id])
  deliveries      Delivery[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@index([authorId])
  @@index([type])
  @@index([status])
  @@index([scheduledAt])
}

model Delivery {
  id               String         @id @default(cuid())
  announcementId   String
  announcement     Announcement   @relation(fields: [announcementId], references: [id])
  delivererId      String
  deliverer        User           @relation("DelivererDeliveries", fields: [delivererId], references: [id])
  clientId         String
  client           User           @relation("ClientDeliveries", fields: [clientId], references: [id])
  status           DeliveryStatus @default(PENDING)
  validationCode   String?        @unique
  pickupAddress    String
  deliveryAddress  String
  scheduledAt      DateTime
  completedAt      DateTime?
  payment          Payment?
  tracking         TrackingUpdate[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([delivererId])
  @@index([clientId])
  @@index([validationCode])
}

model TrackingUpdate {
  id         String   @id @default(cuid())
  deliveryId String
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  status     String
  message    String
  location   String?
  createdAt  DateTime @default(now())
  
  @@index([deliveryId])
}

model Service {
  id          String    @id @default(cuid())
  providerId  String
  provider    User      @relation(fields: [providerId], references: [id])
  name        String
  description String
  price       Decimal
  duration    Int
  isActive    Boolean   @default(true)
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([providerId])
}

model Booking {
  id          String        @id @default(cuid())
  serviceId   String
  service     Service       @relation(fields: [serviceId], references: [id])
  clientId    String
  client      User          @relation(fields: [clientId], references: [id])
  scheduledAt DateTime
  status      BookingStatus @default(PENDING)
  notes       String?
  rating      Int?
  review      String?
  payment     Payment?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([clientId])
  @@index([serviceId])
}

model Payment {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  deliveryId    String?       @unique
  delivery      Delivery?     @relation(fields: [deliveryId], references: [id])
  bookingId     String?       @unique
  booking       Booking?      @relation(fields: [bookingId], references: [id])
  amount        Decimal
  currency      String        @default("EUR")
  status        PaymentStatus @default(PENDING)
  stripePaymentId String?
  type          PaymentType
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
  @@index([status])
}

model Subscription {
  id        String           @id @default(cuid())
  userId    String           @unique
  user      User             @relation(fields: [userId], references: [id])
  plan      SubscriptionPlan
  status    String           @default("active")
  startDate DateTime         @default(now())
  endDate   DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([plan])
}

model Document {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       DocumentType
  filename   String
  url        String
  status     DocumentStatus @default(PENDING)
  validatedBy String?
  validatedAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  
  @@index([userId])
  @@index([type])
  @@index([status])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([isRead])
}
