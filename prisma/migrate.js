// prisma/migrate.js - Script pour appliquer manuellement les migrations

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * Script pour ajouter les champs de v√©rification et de r√©initialisation √† la table User
 */
async function main() {
  try {
    console.log('üîÑ Application des migrations manuelles...');

    // V√©rifier si la colonne verificationToken existe d√©j√†
    const hasVerificationToken = await checkIfColumnExists('users', 'verificationToken');

    if (!hasVerificationToken) {
      console.log('‚ûï Ajout des colonnes de v√©rification et r√©initialisation...');

      // Ajouter les colonnes manquantes
      await prisma.$executeRaw`
        ALTER TABLE "users" 
        ADD COLUMN IF NOT EXISTS "verificationToken" TEXT,
        ADD COLUMN IF NOT EXISTS "verificationTokenExpires" TIMESTAMP(3),
        ADD COLUMN IF NOT EXISTS "resetToken" TEXT,
        ADD COLUMN IF NOT EXISTS "resetTokenExpires" TIMESTAMP(3)
      `;

      console.log('‚úÖ Colonnes ajout√©es avec succ√®s!');
    } else {
      console.log('‚ÑπÔ∏è Les colonnes existent d√©j√†.');
    }

    console.log('‚úÖ Migrations termin√©es avec succ√®s!');
  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * V√©rifie si une colonne existe dans une table
 */
async function checkIfColumnExists(tableName, columnName) {
  try {
    const result = await prisma.$queryRaw`
      SELECT EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_name = ${tableName}
        AND column_name = ${columnName}
      );
    `;

    return result[0].exists;
  } catch (error) {
    console.error(`Erreur lors de la v√©rification de la colonne ${columnName}:`, error);
    return false;
  }
}

main();
