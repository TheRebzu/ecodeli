// ===== MODÈLES DE LIVRAISONS =====
// Ce fichier contient les modèles pour les livraisons, leur suivi et évaluations.

/// Livraison assignée à un livreur
model Delivery {
  id                 String          @id @default(cuid())
  announcementId     String
  delivererId        String
  clientId           String
  status             DeliveryStatus  @default(PENDING)
  startTime          DateTime?
  completionTime     DateTime?
  actualPickupTime   DateTime?
  actualDeliveryTime DateTime?
  notes              String?
  trackingCode       String          @unique
  price              Float
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  
  // Relations avec Announcement et User
  announcement       Announcement    @relation(fields: [announcementId], references: [id])
  deliverer          User            @relation("DelivererDeliveries", fields: [delivererId], references: [id])
  client             User            @relation("ClientDeliveries", fields: [clientId], references: [id])
  
  // Relations avec d'autres modèles
  logs               DeliveryLog[]
  coordinates        DeliveryCoordinates[]
  proofs             DeliveryProof[]
  ratings            DeliveryRating[]
  payments           Payment[]       @relation("PaymentToDelivery")
  
  // Nouvelles relations pour le cahier des charges
  validationCode     DeliveryValidationCode? @relation("DeliveryValidationCodeToDelivery")
  nfcTransactions    NFCCardTransaction[]    @relation("NFCTransactionToDelivery")

  @@index([announcementId])
  @@index([delivererId])
  @@index([clientId])
  @@index([status])
  @@index([trackingCode])
  @@map("deliveries")
}

/// Journaux d'événements pour une livraison
model DeliveryLog {
  id         String         @id @default(cuid())
  deliveryId String
  status     DeliveryStatusEnum
  message    String
  createdAt  DateTime       @default(now())
  location   String?
  
  // Relation avec Delivery
  delivery   Delivery       @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@index([status])
  @@map("delivery_logs")
}

/// Coordonnées GPS enregistrées pendant la livraison
model DeliveryCoordinates {
  id         String    @id @default(cuid())
  deliveryId String
  latitude   Float
  longitude  Float
  timestamp  DateTime  @default(now())
  accuracy   Float?
  speed      Float?
  
  // Relation avec Delivery
  delivery   Delivery  @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@map("delivery_coordinates")
}

/// Preuves de livraison (photos, signatures)
model DeliveryProof {
  id           String   @id @default(cuid())
  deliveryId   String
  type         String   // "signature", "photo", "document"
  fileUrl      String
  mimeType     String?
  uploadedAt   DateTime @default(now())
  notes        String?
  
  // Relation avec Delivery
  delivery     Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@index([type])
  @@map("delivery_proofs")
}

/// Évaluations des livraisons
model DeliveryRating {
  id         String   @id @default(cuid())
  deliveryId String
  ratedById  String   // ID de l'utilisateur qui a donné l'évaluation
  targetId   String   // ID de l'utilisateur qui est évalué
  rating     Int      // 1-5
  comment    String?  // Commentaire en texte libre, pas un type Int
  createdAt  DateTime @default(now())
  
  // Relations avec Delivery et User
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  ratedBy    User     @relation("RatingGiver", fields: [ratedById], references: [id])
  target     User     @relation("RatingReceiver", fields: [targetId], references: [id])

  @@index([deliveryId])
  @@index([ratedById])
  @@index([targetId])
  @@map("delivery_ratings")
}

/// Planning et disponibilité des livreurs
model DelivererSchedule {
  id           String    @id @default(cuid())
  delivererId  String
  dayOfWeek    Int       // 0=Dimanche, 1=Lundi, etc.
  startTime    String    // Format HH:MM
  endTime      String    // Format HH:MM
  isAvailable  Boolean   @default(true)
  maxDeliveries Int      @default(3)
  
  // Extensions pour planning intelligent
  isRecurring  Boolean   @default(true)   // Planning récurrent ou ponctuel
  breakStart   String?   // Début de pause (HH:MM)
  breakEnd     String?   // Fin de pause (HH:MM)
  timeSlots    Int       @default(4)      // Nombre de créneaux par jour
  preferredZones String[]               // Zones géographiques préférées
  
  // Gestion des exceptions
  exceptions   ScheduleException[]
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relation avec User
  deliverer    User      @relation("DelivererSchedules", fields: [delivererId], references: [id], onDelete: Cascade)

  @@unique([delivererId, dayOfWeek])
  @@index([delivererId])
  @@index([dayOfWeek])
  @@index([isAvailable])
  @@map("deliverer_schedules")
}

/// Exceptions au planning habituel
model ScheduleException {
  id          String    @id @default(cuid())
  scheduleId  String
  date        DateTime  // Date spécifique de l'exception
  isAvailable Boolean   @default(false)
  startTime   String?   // Nouvelle heure de début si disponible
  endTime     String?   // Nouvelle heure de fin si disponible
  reason      String?   // Raison de l'exception
  createdAt   DateTime  @default(now())
  
  // Relation avec DelivererSchedule
  schedule    DelivererSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@unique([scheduleId, date])
  @@index([scheduleId])
  @@index([date])
  @@map("schedule_exceptions")
}

/// Routes habituelles des livreurs - zones de service
model DelivererServiceRoute {
  id               String     @id @default(cuid())
  delivererId      String
  name             String     // Nom donné par le livreur (ex: "Secteur Centre-ville")
  description      String?
  isActive         Boolean    @default(true)
  priority         Int        @default(1) // 1=haute, 2=moyenne, 3=basse
  
  // Extensions pour optimisation intelligente
  estimatedDuration Int?      // Durée moyenne en minutes
  averageEarnings  Float?     // Gains moyens par trajet
  completedDeliveries Int     @default(0)
  successRate      Float?     // Taux de réussite (0-100)
  lastUsed         DateTime?  // Dernière utilisation de cette route
  
  // Paramètres d'optimisation
  maxDeliveries    Int        @default(5)     // Nombre max de livraisons simultanées
  vehicleType      String?    // Type de véhicule requis
  trafficFactor    Float      @default(1.0)   // Facteur de trafic (1.0 = normal)
  weatherSensitive Boolean    @default(false) // Sensible à la météo
  
  // Horaires préférés
  preferredTimeSlots String[] // Créneaux horaires préférés (JSON)
  dayPreferences   Int[]      // Jours de la semaine préférés (0-6)
  
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  // Relation avec User et zones
  deliverer        User       @relation("DelivererServiceRoutes", fields: [delivererId], references: [id], onDelete: Cascade)
  zones            DeliveryZone[]
  statistics       RouteStatistics[]
  
  @@index([delivererId])
  @@index([isActive])
  @@index([priority])
  @@index([successRate])
  @@map("deliverer_service_routes")
}

/// Zones géographiques couvertes par les routes
model DeliveryZone {
  id               String         @id @default(cuid())
  routeId          String
  centerLatitude   Float          // Centre de la zone
  centerLongitude  Float
  radiusKm         Float          // Rayon en kilomètres
  cityName         String?        // Nom de la ville/quartier
  postalCodes      String[]       // Codes postaux couverts
  isPreferred      Boolean        @default(false) // Zone préférée du livreur
  
  // Extensions pour analyse de performance
  deliveryCount    Int            @default(0)     // Nombre de livraisons effectuées
  averageTime      Float?         // Temps moyen de livraison (minutes)
  trafficLevel     String         @default("NORMAL") // LOW, NORMAL, HIGH
  parkingDifficulty String        @default("EASY")   // EASY, MEDIUM, HARD
  accessNotes      String?        // Notes d'accès spécifiques
  
  // Restrictions et préférences
  timeRestrictions String[]       // Restrictions horaires
  vehicleRestrictions String[]    // Restrictions de véhicule
  weatherSensitive Boolean        @default(false)
  
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // Relation avec DelivererServiceRoute
  route            DelivererServiceRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)
  
  @@index([routeId])
  @@index([centerLatitude, centerLongitude])
  @@index([cityName])
  @@index([trafficLevel])
  @@map("delivery_zones")
}

/// Statistiques détaillées des routes
model RouteStatistics {
  id                String         @id @default(cuid())
  routeId           String
  date              DateTime       // Date de la statistique
  
  // Métriques de performance
  totalDeliveries   Int            @default(0)
  completedDeliveries Int          @default(0)
  failedDeliveries  Int            @default(0)
  averageTime       Float?         // Temps moyen en minutes
  totalDistance     Float?         // Distance totale en km
  totalEarnings     Float          @default(0)
  
  // Métriques d'efficacité
  fuelConsumption   Float?         // Consommation estimée
  customerSatisfaction Float?      // Note moyenne des clients
  onTimeRate        Float?         // Taux de ponctualité (0-100)
  
  // Conditions contextuelles
  weatherCondition  String?        // Conditions météo
  trafficCondition  String?        // Conditions de trafic
  dayOfWeek         Int            // Jour de la semaine (0-6)
  
  createdAt         DateTime       @default(now())
  
  // Relation avec DelivererServiceRoute
  route             DelivererServiceRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)
  
  @@unique([routeId, date])
  @@index([routeId])
  @@index([date])
  @@map("route_statistics")
}

/// Disponibilité temporaire des livreurs
model DelivererAvailability {
  id           String    @id @default(cuid())
  delivererId  String
  startDate    DateTime
  endDate      DateTime
  isAvailable  Boolean   @default(true)
  reason       String?   // Raison de l'indisponibilité
  currentLat   Float?    // Position actuelle
  currentLng   Float?
  lastUpdate   DateTime  @default(now())
  
  // Relation avec User
  deliverer    User      @relation("DelivererAvailabilities", fields: [delivererId], references: [id], onDelete: Cascade)

  @@index([delivererId])
  @@index([startDate, endDate])
  @@index([isAvailable])
  @@map("deliverer_availabilities")
}

/// Statistiques de performance des livreurs
model DelivererStats {
  id                    String   @id @default(cuid())
  delivererId           String   @unique
  totalDeliveries       Int      @default(0)
  completedDeliveries   Int      @default(0)
  cancelledDeliveries   Int      @default(0)
  averageRating         Float?
  totalRatings          Int      @default(0)
  totalDistance         Float    @default(0) // en km
  totalEarnings         Float    @default(0)
  bestCompletionTime    Int?     // en minutes
  averageCompletionTime Float?   // en minutes
  lastDeliveryDate      DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relation avec User
  deliverer             User     @relation("DelivererStats", fields: [delivererId], references: [id], onDelete: Cascade)

  @@index([delivererId])
  @@index([averageRating])
  @@map("deliverer_stats")
} 