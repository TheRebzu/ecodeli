// ===== MODÈLES D'APPLICATIONS DE LIVRAISON =====
// Ces modèles gèrent les candidatures des livreurs aux annonces
// et leurs préférences. Ces données sont extraites du fichier announcement.prisma
// pour respecter la structure demandée.

// NOTE: Voir announcement.prisma pour les modèles:
// - DeliveryApplication: Candidatures des livreurs
// - DelivererFavorite: Annonces favorites des livreurs 

// ===== MODÈLES DE CANDIDATURE DE LIVRAISON =====
// Ce fichier contient le modèle pour les candidatures des livreurs aux annonces.

/// Candidature d'un livreur pour une annonce
model DeliveryApplication {
  id                    String                      @id @default(cuid())
  delivererId           String
  announcementId        String
  message               String?
  status                ApplicationStatus           @default(PENDING)
  proposedPrice         Float?
  estimatedDuration     Int?                        // Durée estimée en minutes
  availableFrom         DateTime?                   // Disponible à partir de
  availableTo           DateTime?                   // Disponible jusqu'à
  
  // Validation des documents
  documentsVerified     Boolean                     @default(false)
  verificationStatus    DocumentVerificationStatus  @default(PENDING)
  verifiedAt            DateTime?
  verifiedBy            String?                     // ID de l'admin qui a vérifié
  
  // Extensions pour validation avancée
  autoVerificationAttempted Boolean                 @default(false)
  autoVerificationScore Float?                      // Score de vérification automatique (0-100)
  manualReviewRequired  Boolean                     @default(false)
  verificationNotes     String?                     // Notes de l'admin vérificateur
  documentsExpiryCheck  DateTime?                   // Dernière vérification d'expiration
  
  // Évaluation automatique
  autoMatchScore        Float?                      // Score de matching automatique (0-100)
  distanceFromPickup    Float?                      // Distance en km du point de collecte
  distanceFromDelivery  Float?                      // Distance en km du point de livraison
  isInPreferredZone     Boolean                     @default(false)
  
  // Métadonnées
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  rejectedAt            DateTime?
  rejectionReason       String?
  
  // Relations avec User et Announcement
  deliverer             User                        @relation(fields: [delivererId], references: [id], onDelete: Cascade)
  announcement          Announcement                @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  verifier              User?                       @relation("ApplicationVerifier", fields: [verifiedBy], references: [id])
  
  // Relations avec les documents
  requiredDocuments     ApplicationDocument[]

  @@unique([delivererId, announcementId]) // Un livreur ne peut postuler qu'une fois par annonce
  @@index([delivererId])
  @@index([announcementId])
  @@index([status])
  @@index([verificationStatus])
  @@index([autoMatchScore])
  @@map("delivery_applications")
}

/// Documents requis pour une candidature
model ApplicationDocument {
  id            String                      @id @default(cuid())
  applicationId String
  documentType  RequiredDocumentType        // IDENTITY, DRIVING_LICENSE, INSURANCE, etc.
  documentUrl   String?                     // URL du document uploadé
  status        DocumentVerificationStatus  @default(PENDING)
  uploadedAt    DateTime?
  verifiedAt    DateTime?
  verifiedBy    String?                     // ID de l'admin qui a vérifié
  rejectionReason String?
  expiryDate    DateTime?                   // Date d'expiration du document
  
  // Extensions pour validation avancée
  fileSize      Int?                        // Taille du fichier en bytes
  mimeType      String?                     // Type MIME du document
  ocrText       String?                     // Texte extrait par OCR
  ocrConfidence Float?                      // Niveau de confiance OCR (0-100)
  
  // Validation automatique
  autoValidated Boolean                     @default(false)
  validationScore Float?                    // Score de validation automatique (0-100)
  validationFlags String[]                  // Drapeaux de validation (format JSON)
  
  // Historique des versions
  version       Int                         @default(1)
  previousVersionId String?                 // ID de la version précédente
  replacedAt    DateTime?                   // Date de remplacement
  
  // Métadonnées de sécurité
  checksum      String?                     // Checksum du fichier
  encrypted     Boolean                     @default(false)
  watermarked   Boolean                     @default(false)
  
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
  
  // Relation avec DeliveryApplication
  application   DeliveryApplication         @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  verifier      User?                       @relation("DocumentVerifier", fields: [verifiedBy], references: [id])
  
  // Auto-référence pour l'historique des versions
  previousVersion ApplicationDocument?      @relation("DocumentVersion", fields: [previousVersionId], references: [id])
  nextVersions    ApplicationDocument[]     @relation("DocumentVersion")
  
  // Audit trail
  auditLogs       DocumentValidationAudit[] @relation("DocumentAudit")

  @@unique([applicationId, documentType, version])
  @@index([applicationId])
  @@index([status])
  @@index([documentType])
  @@index([expiryDate])
  @@index([autoValidated])
  @@map("application_documents")
}

/// Préférences du livreur pour les types d'annonces
model DelivererPreferences {
  id                String                 @id @default(cuid())
  delivererId       String                 @unique
  
  // Types d'annonces préférées
  preferredTypes    AnnouncementType[]
  
  // Préférences de distance
  maxDistanceKm     Float                  @default(25)
  minPricePerKm     Float?
  
  // Préférences temporelles
  preferWeekends    Boolean                @default(true)
  preferEvenings    Boolean                @default(true)
  acceptUrgent      Boolean                @default(true)
  
  // Préférences de charge
  maxWeight         Float?                 // kg
  hasVehicle        Boolean                @default(false)
  vehicleType       VehicleType?
  
  // Notifications
  notifyByEmail     Boolean                @default(true)
  notifyByPush      Boolean                @default(true)
  notifyBySms       Boolean                @default(false)
  
  // Métadonnées
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  
  // Relation avec User
  deliverer         User                   @relation("DelivererPreferences", fields: [delivererId], references: [id], onDelete: Cascade)

  @@index([delivererId])
  @@map("deliverer_preferences")
}

/// Audit des validations de documents
model DocumentValidationAudit {
  id              String                      @id @default(cuid())
  documentId      String
  previousStatus  DocumentVerificationStatus
  newStatus       DocumentVerificationStatus
  actionBy        String                      // ID de l'utilisateur qui a effectué l'action
  actionType      String                      // UPLOAD, VERIFY, REJECT, APPROVE, etc.
  notes           String?                     // Notes de l'action
  
  // Métadonnées de l'action
  ipAddress       String?                     // Adresse IP de l'action
  userAgent       String?                     // User agent
  automated       Boolean                     @default(false) // Action automatisée ou manuelle
  
  // Détails de validation automatique
  validationData  Json?                       // Données de validation (JSON)
  confidence      Float?                      // Niveau de confiance de la validation
  
  createdAt       DateTime                    @default(now())
  
  // Relations
  document        ApplicationDocument         @relation("DocumentAudit", fields: [documentId], references: [id], onDelete: Cascade)
  actor           User                        @relation("ValidationActor", fields: [actionBy], references: [id])

  @@index([documentId])
  @@index([actionBy])
  @@index([actionType])
  @@index([createdAt])
  @@map("document_validation_audits")
} 