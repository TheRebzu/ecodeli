// ===== MODÈLES DE ROUTES PLANIFIÉES =====
// Ce fichier contient les modèles pour la gestion des trajets planifiés des livreurs selon le cahier des charges

/// Route planifiée à l'avance par un livreur selon le cahier des charges
model DelivererPlannedRoute {
  id                String              @id @default(cuid())
  delivererId       String
  title             String              // Titre de la route (ex: "Paris-Marseille hebdomadaire")
  description       String?             // Description détaillée
  status            PlannedRouteStatus  @default(DRAFT)
  
  // Points de départ et d'arrivée
  departureAddress  String              // Adresse de départ
  departureLat      Float               // Latitude départ
  departureLng      Float               // Longitude départ
  arrivalAddress    String              // Adresse d'arrivée
  arrivalLat        Float               // Latitude arrivée
  arrivalLng        Float               // Longitude arrivée
  
  // Planning temporel
  departureTime     DateTime            // Heure de départ prévue
  arrivalTime       DateTime            // Heure d'arrivée prévue
  isRecurring       Boolean             @default(false) // Route récurrente
  recurringPattern  String?             // Pattern de récurrence (JSON: jours, fréquence)
  
  // Capacités et restrictions
  maxWeight         Float?              // Poids maximum en kg
  maxVolume         Float?              // Volume maximum en m³
  maxPackages       Int?                // Nombre maximum de colis
  vehicleRequired   VehicleType?        // Type de véhicule requis
  
  // Paramètres financiers
  pricePerKm        Float?              // Prix par kilomètre
  fixedPrice        Float?              // Prix fixe pour la route
  minimumPrice      Float?              // Prix minimum
  
  // Points d'arrêt intermédiaires
  waypoints         Json?               // Points de passage (array d'objets {address, lat, lng, timeWindow})
  
  // Disponibilité
  availableSeats    Int?                // Places disponibles (transport personnes)
  isPublic          Boolean             @default(true) // Visible publiquement
  
  // Métadonnées de performance
  estimatedDistance Float?              // Distance estimée en km
  estimatedDuration Int?                // Durée estimée en minutes
  actualDistance    Float?              // Distance réelle parcourue
  actualDuration    Int?                // Durée réelle en minutes
  
  // Notifications et matching
  notifyOnMatch     Boolean             @default(true) // Notifier lors d'un match
  autoAcceptMatch   Boolean             @default(false) // Acceptation automatique des matches
  
  // Métadonnées
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  publishedAt       DateTime?           // Date de publication
  completedAt       DateTime?           // Date de complétion
  
  // Relations
  deliverer         User                @relation("DelivererPlannedRouteToDeliverer", fields: [delivererId], references: [id], onDelete: Cascade)
  
  // Annonces matchées avec cette route
  matchedAnnouncements PlannedRouteAnnouncement[]
  routeAnnouncements   RouteAnnouncement[]
  
  // Historique des performances
  performanceHistory DelivererRoutePerformance[]

  @@index([delivererId])
  @@index([status])
  @@index([departureTime])
  @@index([isRecurring])
  @@index([isPublic])
  @@map("deliverer_planned_routes")
}

/// Association entre une route planifiée et une annonce matchée
model PlannedRouteAnnouncement {
  id              String              @id @default(cuid())
  routeId         String
  announcementId  String
  matchScore      Float?              // Score de matching (0-100)
  status          MatchingStatus      @default(SUGGESTED)
  
  // Détails du match
  pickupOrder     Int?                // Ordre de récupération
  deliveryOrder   Int?                // Ordre de livraison
  detourDistance  Float?              // Distance de détour en km
  detourTime      Int?                // Temps de détour en minutes
  
  // Validation
  delivererAccepted Boolean           @default(false)
  clientAccepted   Boolean            @default(false)
  matchedAt        DateTime           @default(now())
  acceptedAt       DateTime?
  rejectedAt       DateTime?
  
  // Relations
  route           DelivererPlannedRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)
  announcement    Announcement        @relation("PlannedRouteAnnouncement", fields: [announcementId], references: [id], onDelete: Cascade)
  
  @@unique([routeId, announcementId])
  @@index([routeId])
  @@index([announcementId])
  @@index([status])
  @@map("planned_route_announcements")
}

/// Historique des performances d'une route
model DelivererRoutePerformance {
  id                String           @id @default(cuid())
  routeId           String
  executionDate     DateTime         // Date d'exécution de la route
  
  // Métriques de performance
  actualDistance    Float            // Distance réelle parcourue
  actualDuration    Int              // Durée réelle en minutes
  fuelCost          Float?           // Coût du carburant
  tollCost          Float?           // Coût des péages
  totalEarnings     Float            // Gains totaux
  
  // Livraisons effectuées
  packagesDelivered Int              @default(0)
  onTimeDeliveries  Int              @default(0)
  lateDeliveries    Int              @default(0)
  
  // Satisfaction
  averageRating     Float?           // Note moyenne des clients
  customerFeedback  String?          // Commentaires clients
  
  // Problèmes rencontrés
  issues            Json?            // Liste des problèmes (JSON array)
  delays            Json?            // Détails des retards (JSON array)
  
  // Métadonnées
  createdAt         DateTime         @default(now())
  notes             String?          // Notes du livreur
  
  // Relations
  route             DelivererPlannedRoute @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@index([routeId])
  @@index([executionDate])
  @@map("deliverer_route_performances")
}

/// Optimisation des trajets
model RouteOptimization {
  id                String           @id @default(cuid())
  delivererId       String
  requestedAt       DateTime         @default(now())
  
  // Paramètres d'entrée
  startingPoint     Json             // Point de départ {address, lat, lng}
  destinations      Json             // Destinations à visiter (array)
  constraints       Json             // Contraintes (horaires, capacités, etc.)
  
  // Résultats d'optimisation
  optimizedRoute    Json?            // Route optimisée (array d'étapes)
  totalDistance     Float?           // Distance totale
  totalDuration     Int?             // Durée totale
  estimatedEarnings Float?           // Gains estimés
  
  // Statut
  status            String           @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  completedAt       DateTime?
  errorMessage      String?
  
  // Relations
  deliverer         User             @relation("RouteOptimization", fields: [delivererId], references: [id], onDelete: Cascade)

  @@index([delivererId])
  @@index([status])
  @@map("route_optimizations")
}