// Modèles contrats

model Contract {
  id                    String              @id @default(cuid())
  merchantId            String              @unique
  type                  ContractType        @default(STANDARD)
  status                ContractStatus      @default(DRAFT)
  version               String              @default("1.0")
  title                 String
  description           String?
  
  // Conditions financières
  commissionRate        Float               // Taux de commission en %
  minCommissionAmount   Float?              // Commission minimum en €
  setupFee             Float               @default(0)
  monthlyFee           Float               @default(0)
  
  // Conditions générales
  validFrom            DateTime
  validUntil           DateTime?
  autoRenewal          Boolean             @default(true)
  renewalPeriod        Int                 @default(12) // mois
  
  // Limites et conditions
  maxOrdersPerMonth    Int?                // Limite commandes/mois
  maxOrderValue        Float?              // Valeur max par commande
  deliveryZones        Json[]              // Zones de livraison autorisées
  allowedServices      String[]            // Services autorisés
  
  // Signature électronique
  merchantSignedAt     DateTime?
  merchantSignature    String?             // Hash de signature
  adminSignedAt        DateTime?
  adminSignedBy        String?             // Admin user ID
  adminSignature       String?
  
  // Documents
  templatePath         String?             // Chemin vers template PDF
  signedDocumentPath   String?             // Document signé
  
  // Métadonnées
  notes                String?
  tags                 String[]            @default([])
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  
  // Relations
  merchant             Merchant            @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  amendments           ContractAmendment[]
  billingCycles        MerchantBilling[]
  
  @@index([merchantId])
  @@index([status])
  @@index([validFrom])
}

model ContractAmendment {
  id                   String              @id @default(cuid())
  contractId           String
  version              String
  title                String
  description          String
  changes              Json                // Détail des changements
  effectiveDate        DateTime
  
  // Signature
  merchantSignedAt     DateTime?
  adminSignedAt        DateTime?
  adminSignedBy        String?
  
  createdAt            DateTime            @default(now())
  
  contract             Contract            @relation(fields: [contractId], references: [id], onDelete: Cascade)
  
  @@index([contractId])
}

model MerchantBilling {
  id                   String              @id @default(cuid())
  merchantId           String
  contractId           String?
  
  // Période de facturation
  periodStart          DateTime
  periodEnd            DateTime
  status               String              @default("PENDING") // PENDING, SENT, PAID, OVERDUE
  
  // Montants
  totalOrders          Int                 @default(0)
  totalRevenue         Float               @default(0)
  commissionAmount     Float               @default(0)
  monthlyFee           Float               @default(0)
  additionalFees       Float               @default(0)
  totalAmount          Float               @default(0)
  
  // Paiement
  invoiceNumber        String?
  invoicePath          String?             // Chemin vers facture PDF
  dueDate              DateTime?
  paidAt               DateTime?
  paymentMethod        String?
  
  // Métadonnées
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  
  // Relations
  merchant             Merchant            @relation(fields: [merchantId], references: [id])
  contract             Contract?           @relation(fields: [contractId], references: [id])
  orders               Order[]
  
  @@unique([merchantId, periodStart])
  @@index([merchantId])
  @@index([status])
  @@index([dueDate])
}