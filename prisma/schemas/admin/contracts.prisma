// ===== MODÈLES DE CONTRATS =====
// Ce fichier contient le modèle pour les contrats entre commerçants et la plateforme.

/// Contrat conclu avec un commerçant
model Contract {
  id            String         @id @default(cuid())
  contractNumber String         @unique // Numéro de contrat auto-généré
  merchantId    String
  templateId    String?        // Template de contrat utilisé
  title         String
  content       String         @db.Text // Contenu du contrat en format JSON ou HTML
  status        ContractStatus @default(DRAFT)
  type          ContractType   @default(STANDARD)
  
  // Données financières
  monthlyFee    Decimal?       @db.Decimal(10,2) // Frais mensuels
  commissionRate Decimal?      @db.Decimal(5,4)  // Taux de commission (ex: 0.15 = 15%)
  minimumVolume Int?           // Volume minimum requis
  
  // ===== EXTENSIONS MERCHANT =====
  // Spécificités pour les merchants
  merchantCategory String?      // Catégorie du merchant (alimentaire, mode, etc.)
  deliveryZone  String?        // Zone de livraison couverte
  maxDeliveryRadius Float?     // Rayon de livraison en km
  serviceLevelAgreement Json?  // SLA spécifique au merchant
  
  // Conditions commerciales spécifiques
  volumeDiscounts Json?        // Remises par volume { "1000": 0.05, "5000": 0.10 }
  paymentTerms   String?       // Conditions de paiement spécifiques
  exclusivityClause Boolean?   @default(false) // Clause d'exclusivité
  territoryRestrictions Json?  // Restrictions territoriales
  
  // Performance et qualité
  qualityMetrics Json?         // Métriques de qualité attendues
  performanceTargets Json?     // Objectifs de performance
  penaltyClause Json?          // Clauses de pénalité
  bonusStructure Json?         // Structure de bonus
  
  // Dates importantes
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  signedAt      DateTime?      // Date de signature par le merchant
  validatedAt   DateTime?      // Date de validation admin
  effectiveDate DateTime?      // Date d'entrée en vigueur
  expiresAt     DateTime?      // Date d'expiration
  
  // Documents et signatures
  fileUrl       String?        // PDF du contrat signé
  merchantSignature String?    // Signature électronique merchant
  adminSignature String?       // Signature électronique admin
  signedById    String?        // ID de l'admin qui a signé
  
  // Métadonnées
  metadata      Json?          // Données additionnelles du contrat
  terms         Json?          // Termes spécifiques en JSON
  notes         String?        // Notes internes
  
  // ===== NOUVEAUX CHAMPS MERCHANT =====
  // Historique et suivi
  negotiationHistory Json?     // Historique des négociations
  lastRenegotiationDate DateTime? // Dernière renégociation
  autoRenewal   Boolean?       @default(false) // Renouvellement automatique
  renewalNotice Int?           // Préavis de renouvellement (jours)
  
  // Assurance et garanties
  insuranceRequired Boolean?   @default(false) // Assurance requise
  insuranceAmount Decimal?     @db.Decimal(10,2) // Montant d'assurance
  securityDeposit Decimal?     @db.Decimal(10,2) // Dépôt de garantie
  
  // Relations avec le profil Merchant
  merchant      Merchant       @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  signedBy      User?          @relation("ContractSignedBy", fields: [signedById], references: [id])
  
  // Relations avec template et amendements
  template      ContractTemplate? @relation(fields: [templateId], references: [id])
  amendments    ContractAmendment[]
  billingCycles BillingCycle[]

  @@index([merchantId])
  @@index([status])
  @@index([type])
  @@index([contractNumber])
  @@index([effectiveDate])
  @@index([merchantCategory]) // Nouvel index
  @@map("contracts")
}

/// Templates de contrats réutilisables
model ContractTemplate {
  id          String         @id @default(cuid())
  name        String         // Nom du template (ex: "Contrat Standard")
  description String?        // Description du template
  version     String         @default("1.0") // Version du template
  content     String         @db.Text // Contenu template en HTML/JSON
  isActive    Boolean        @default(true)
  
  // Configuration par défaut
  defaultType ContractType   @default(STANDARD)
  defaultMonthlyFee Decimal? @db.Decimal(10,2)
  defaultCommissionRate Decimal? @db.Decimal(5,4)
  defaultDuration Int?       // Durée par défaut en mois
  
  // ===== EXTENSIONS MERCHANT TEMPLATE =====
  // Spécificités par catégorie de merchant
  targetMerchantCategory String? // Catégorie cible du template
  requiredDocuments Json?     // Documents requis pour ce template
  minimumBusinessAge Int?     // Âge minimum de l'entreprise (mois)
  minimumTurnover Decimal?    @db.Decimal(12,2) // CA minimum requis
  
  // Conditions particulières
  defaultExclusivityClause Boolean? @default(false)
  defaultInsuranceRequired Boolean? @default(false)
  defaultSecurityDeposit Decimal? @db.Decimal(10,2)
  
  // Métadonnées
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdById String
  
  // Relations
  createdBy   User           @relation(fields: [createdById], references: [id])
  contracts   Contract[]
  
  @@index([isActive])
  @@index([defaultType])
  @@index([targetMerchantCategory]) // Nouvel index
  @@map("contract_templates")
}

/// Amendements aux contrats
model ContractAmendment {
  id          String         @id @default(cuid())
  contractId  String
  title       String         // Titre de l'amendement
  description String         // Description du changement
  content     String         @db.Text // Contenu de l'amendement
  status      ContractStatus @default(DRAFT)
  
  // ===== EXTENSIONS MERCHANT AMENDMENT =====
  // Type d'amendement spécifique
  amendmentType String?       // TYPE: "COMMISSION", "TERRITORY", "TERMS", "OTHER"
  previousValue Json?         // Valeur précédente
  newValue     Json?          // Nouvelle valeur
  businessJustification String? // Justification business
  impactAssessment Json?      // Évaluation d'impact
  
  // Approbation
  merchantApproved Boolean?   @default(false)
  adminApproved Boolean?      @default(false)
  merchantApprovedAt DateTime?
  adminApprovedAt DateTime?
  
  // Dates
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  signedAt    DateTime?
  effectiveDate DateTime?
  
  // Signature
  fileUrl     String?        // PDF de l'amendement signé
  signedById  String?
  
  // Relations
  contract    Contract       @relation(fields: [contractId], references: [id], onDelete: Cascade)
  signedBy    User?          @relation(fields: [signedById], references: [id])
  
  @@index([contractId])
  @@index([status])
  @@index([amendmentType]) // Nouvel index
  @@map("contract_amendments")
}

// ===== NOUVEAU MODÈLE: NÉGOCIATIONS =====
/// Historique des négociations de contrats
model ContractNegotiation {
  id          String         @id @default(cuid())
  contractId  String
  initiatedBy String         // USER_ID who initiated
  negotiationRound Int       // Numéro du tour de négociation
  
  // Détails de la négociation
  proposedChanges Json       // Changements proposés
  reason      String         // Raison de la négociation
  notes       String?        // Notes additionnelles
  
  // Statut
  status      String         // PENDING, ACCEPTED, REJECTED, COUNTER_PROPOSED
  
  // Réponse
  response    String?        // Réponse à la négociation
  respondedBy String?        // USER_ID who responded
  respondedAt DateTime?
  
  // Dates
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  contract    Contract       @relation(fields: [contractId], references: [id], onDelete: Cascade)
  initiator   User           @relation("NegotiationInitiator", fields: [initiatedBy], references: [id])
  responder   User?          @relation("NegotiationResponder", fields: [respondedBy], references: [id])
  
  @@index([contractId])
  @@index([status])
  @@map("contract_negotiations")
}

// ===== NOUVEAU MODÈLE: PERFORMANCE CONTRAT =====
/// Suivi de performance des contrats merchants
model ContractPerformance {
  id          String         @id @default(cuid())
  contractId  String
  
  // Période de mesure
  periodStart DateTime
  periodEnd   DateTime
  
  // Métriques de performance
  deliveryCount Int          @default(0)
  averageDeliveryTime Float? // En minutes
  customerSatisfaction Float? // Note moyenne sur 5
  
  // Métriques financières
  totalRevenue Decimal?      @db.Decimal(12,2)
  commissionPaid Decimal?    @db.Decimal(12,2)
  avgOrderValue Decimal?     @db.Decimal(10,2)
  
  // Conformité
  slaCompliance Float?       // % de respect du SLA
  qualityScore Float?        // Score qualité global
  
  // Objectifs
  targetsMet   Json?         // Objectifs atteints
  bonusEarned  Decimal?      @db.Decimal(10,2)
  penaltiesApplied Decimal? @db.Decimal(10,2)
  
  // Métadonnées
  calculatedAt DateTime      @default(now())
  notes       String?
  
  // Relations
  contract    Contract       @relation(fields: [contractId], references: [id], onDelete: Cascade)
  
  @@index([contractId])
  @@index([periodStart, periodEnd])
  @@map("contract_performance")
} 