// ===== MODÈLES D'ENTREPÔT DE STOCKAGE =====
// Ce fichier contient les modèles pour les 6 entrepôts EcoDeli selon le cahier des charges

/// Entrepôt physique EcoDeli (6 sites officiels)
model Warehouse {
  id             String        @id @default(cuid())
  name           String        // Nom de l'entrepôt
  siteCode       SiteStatsType? @unique // Code du site (PARIS, MARSEILLE, LYON, LILLE, MONTPELLIER, RENNES)
  
  // Adresse et localisation
  address        String        // Adresse complète
  postalCode     String?       // Code postal
  city           String?       // Ville
  region         String?       // Région
  latitude       Float         // Latitude précise
  longitude      Float         // Longitude précise
  
  // Capacités et organisation
  totalCapacity       Float?   @default(1000) // Capacité totale en m³
  usedCapacity        Float    @default(0) // Capacité utilisée
  availableBoxes      Int      @default(0) // Boxes disponibles
  reservedBoxes       Int      @default(0) // Boxes réservées
  maintenanceBoxes    Int      @default(0) // Boxes en maintenance
  
  // Informations opérationnelles
  isActive            Boolean  @default(true) // Entrepôt actif
  isMainHub           Boolean  @default(false) // Hub principal de la région
  operationalSince    DateTime? @default(now()) // Date de mise en service
  
  // Horaires et accès
  openingHours        Json?    // Horaires d'ouverture par jour
  accessHours         Json?    // Horaires d'accès clients (peut différer)
  has24hAccess        Boolean  @default(false) // Accès 24h/24
  
  // Contact et personnel
  managerName         String?  // Nom du responsable
  contactPhone        String?  // Téléphone principal
  contactEmail        String?  // Email principal
  emergencyPhone      String?  // Téléphone urgence
  
  // Sécurité et équipements
  securityLevel       String   @default("STANDARD") // BASIC, STANDARD, HIGH, MAXIMUM
  hasVideoSurveillance Boolean @default(true)
  hasAlarmSystem      Boolean  @default(true)
  hasFireSuppression  Boolean  @default(true)
  accessControlType   String   @default("KEYPAD") // KEYPAD, CARD, BIOMETRIC, NFC
  
  // Équipements spécialisés
  hasClimateControl   Boolean  @default(false) // Contrôle climatique
  hasRefrigeration    Boolean  @default(false) // Réfrigération
  hasLoadingDock      Boolean  @default(true)  // Quai de chargement
  maxVehicleHeight    Float?   // Hauteur max véhicule (m)
  
  // Performance et statistiques
  averageOccupancy    Float    @default(0) // Taux d'occupation moyen (%)
  monthlyRevenue      Decimal? @db.Decimal(10,2) // CA mensuel
  customerSatisfaction Float?  // Note satisfaction client /5
  
  // Images et documentation
  imageUrl            String?  // Photo principale
  layoutPlanUrl       String?  // Plan de l'entrepôt
  description         String?  @db.Text // Description détaillée
  
  // Métadonnées
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  lastInspectionDate  DateTime? // Dernière inspection
  nextMaintenanceDate DateTime? // Prochaine maintenance
  
  // Relations
  boxes               Box[]
  transfersFrom       InterWarehouseTransfer[] @relation("TransferFromWarehouse")
  transfersTo         InterWarehouseTransfer[] @relation("TransferToWarehouse")
  activities          WarehouseActivity[]
  
  // Statistiques multi-sites
  siteStats           MultiSiteStats[]

  @@index([siteCode])
  @@index([isActive])
  @@index([city])
  @@index([latitude, longitude])
  @@map("warehouses")
}

/// Activité dans un entrepôt (journal)
model WarehouseActivity {
  id            String    @id @default(cuid())
  warehouseId   String
  
  // Type d'activité
  activityType  String    // RESERVATION, ACCESS, MAINTENANCE, INSPECTION, TRANSFER
  description   String    // Description de l'activité
  
  // Acteur
  userId        String?   // Utilisateur impliqué (si applicable)
  staffMember   String?   // Membre du personnel
  
  // Détails
  boxId         String?   // Box concernée (si applicable)
  duration      Int?      // Durée en minutes
  notes         String?   // Notes additionnelles
  
  // Localisation dans l'entrepôt
  zoneCode      String?   // Code de zone
  coordinates   String?   // Coordonnées dans l'entrepôt
  
  // Métadonnées
  timestamp     DateTime  @default(now())
  
  // Relations
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  user          User?     @relation("WarehouseActivityUser", fields: [userId], references: [id])
  box           Box?      @relation("WarehouseActivityBox", fields: [boxId], references: [id])

  @@index([warehouseId])
  @@index([activityType])
  @@index([timestamp])
  @@map("warehouse_activities")
}

/// Transfert inter-entrepôts
model InterWarehouseTransfer {
  id                String          @id @default(cuid())
  fromWarehouseId   String
  toWarehouseId     String
  
  // Détails du transfert
  transferType      String          // BOX_RELOCATION, INVENTORY_BALANCE, MAINTENANCE, USER_REQUEST
  reason            String          // Raison du transfert
  priority          String          @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  
  // Contenu transféré
  boxIds            String[]        // IDs des boxes transférées
  itemCount         Int             // Nombre d'objets
  estimatedVolume   Float?          // Volume estimé m³
  estimatedWeight   Float?          // Poids estimé kg
  
  // Planning
  requestedAt       DateTime        @default(now())
  scheduledAt       DateTime?       // Date programmée
  startedAt         DateTime?       // Début effectif
  completedAt       DateTime?       // Fin du transfert
  
  // Statut et suivi
  status            String          @default("PENDING") // PENDING, APPROVED, IN_TRANSIT, COMPLETED, CANCELLED
  transportMethod   String?         // Méthode de transport
  trackingNumber    String?         // Numéro de suivi
  
  // Personnel
  requestedBy       String          // Demandeur
  approvedBy        String?         // Approbateur
  handledBy         String?         // Responsable du transfert
  
  // Coûts
  estimatedCost     Decimal?        @db.Decimal(8,2)
  actualCost        Decimal?        @db.Decimal(8,2)
  
  // Documentation
  notes             String?         // Notes
  transferReport    String?         // Rapport de transfert
  
  // Métadonnées
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  fromWarehouse     Warehouse       @relation("TransferFromWarehouse", fields: [fromWarehouseId], references: [id])
  toWarehouse       Warehouse       @relation("TransferToWarehouse", fields: [toWarehouseId], references: [id])
  requester         User            @relation("TransferRequester", fields: [requestedBy], references: [id])
  approver          User?           @relation("TransferApprover", fields: [approvedBy], references: [id])
  handler           User?           @relation("TransferHandler", fields: [handledBy], references: [id])

  @@index([fromWarehouseId])
  @@index([toWarehouseId])
  @@index([status])
  @@index([scheduledAt])
  @@map("inter_warehouse_transfers")
} 