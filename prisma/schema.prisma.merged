generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  DELIVERER
  MERCHANT
  PROVIDER
  ADMIN
}

enum AnnouncementType {
  PACKAGE_DELIVERY
  PERSON_TRANSPORT
  AIRPORT_TRANSFER
  SHOPPING
  INTERNATIONAL_PURCHASE
  PET_SITTING
  HOME_SERVICE
  CART_DROP
}

enum AnnouncementStatus {
  ACTIVE
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentType {
  DELIVERY
  SUBSCRIPTION
  SERVICE
}

enum SubscriptionPlan {
  FREE
  STARTER
  PREMIUM
}

enum DocumentType {
  IDENTITY
  DRIVING_LICENSE
  INSURANCE
  CERTIFICATION
  CONTRACT
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id              String              @id @default(cuid())
  email           String              @unique
  password        String
  role            UserRole
  profile         Profile?
  announcements   Announcement[]
  deliveries      Delivery[]         @relation("DelivererDeliveries")
  clientDeliveries Delivery[]        @relation("ClientDeliveries")
  bookings        Booking[]
  services        Service[]
  payments        Payment[]
  documents       Document[]
  notifications   Notification[]
  sessions        Session[]
  subscription    Subscription?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([email])
  @@index([role])
}

model Profile {
  id          String      @id @default(cuid())
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName   String?
  lastName    String?
  phone       String?
  address     String?
  city        String?
  postalCode  String?
  country     String?
  avatar      String?
  verified    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Session {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  token       String      @unique
  expiresAt   DateTime
  createdAt   DateTime    @default(now())
  
  @@index([token])
  @@index([userId])
}

model Announcement {
  id              String              @id @default(cuid())
  title           String
  description     String
  type            AnnouncementType
  status          AnnouncementStatus  @default(ACTIVE)
  price           Decimal
  pickupAddress   String
  deliveryAddress String
  scheduledAt     DateTime
  authorId        String
  author          User                @relation(fields: [authorId], references: [id])
  deliveries      Delivery[]
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  @@index([authorId])
  @@index([type])
  @@index([status])
  @@index([scheduledAt])
}

model Delivery {
  id               String         @id @default(cuid())
  announcementId   String
  announcement     Announcement   @relation(fields: [announcementId], references: [id])
  delivererId      String
  deliverer        User           @relation("DelivererDeliveries", fields: [delivererId], references: [id])
  clientId         String
  client           User           @relation("ClientDeliveries", fields: [clientId], references: [id])
  status           DeliveryStatus @default(PENDING)
  validationCode   String?        @unique
  pickupAddress    String
  deliveryAddress  String
  scheduledAt      DateTime
  completedAt      DateTime?
  payment          Payment?
  tracking         TrackingUpdate[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([delivererId])
  @@index([clientId])
  @@index([validationCode])
}

model TrackingUpdate {
  id         String   @id @default(cuid())
  deliveryId String
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  status     String
  message    String
  location   String?
  createdAt  DateTime @default(now())
  
  @@index([deliveryId])
}

model Service {
  id          String    @id @default(cuid())
  providerId  String
  provider    User      @relation(fields: [providerId], references: [id])
  name        String
  description String
  price       Decimal
  duration    Int
  isActive    Boolean   @default(true)
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([providerId])
}

model Booking {
  id          String        @id @default(cuid())
  serviceId   String
  service     Service       @relation(fields: [serviceId], references: [id])
  clientId    String
  client      User          @relation(fields: [clientId], references: [id])
  scheduledAt DateTime
  status      BookingStatus @default(PENDING)
  notes       String?
  rating      Int?
  review      String?
  payment     Payment?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  @@index([clientId])
  @@index([serviceId])
}

model Payment {
  id            String        @id @default(cuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  deliveryId    String?       @unique
  delivery      Delivery?     @relation(fields: [deliveryId], references: [id])
  bookingId     String?       @unique
  booking       Booking?      @relation(fields: [bookingId], references: [id])
  amount        Decimal
  currency      String        @default("EUR")
  status        PaymentStatus @default(PENDING)
  stripePaymentId String?
  type          PaymentType
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
  @@index([status])
}

model Subscription {
  id        String           @id @default(cuid())
  userId    String           @unique
  user      User             @relation(fields: [userId], references: [id])
  plan      SubscriptionPlan
  status    String           @default("active")
  startDate DateTime         @default(now())
  endDate   DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([plan])
}

model Document {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  type       DocumentType
  filename   String
  url        String
  status     DocumentStatus @default(PENDING)
  validatedBy String?
  validatedAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  
  @@index([userId])
  @@index([type])
  @@index([status])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([isRead])
}
\n\n// ========== MERGED SCHEMAS ==========\n\n\n// From 00-enums.prisma\n// Enums et types partagés

enum UserRole {
  CLIENT
  DELIVERER
  MERCHANT
  PROVIDER
  ADMIN
}

enum AnnouncementType {
  PACKAGE
  SERVICE
}

enum ServiceType {
  PERSON_TRANSPORT
  AIRPORT_TRANSFER
  SHOPPING
  INTERNATIONAL_PURCHASE
  PET_CARE
  HOME_SERVICE
}

enum AnnouncementStatus {
  DRAFT
  PUBLISHED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  PICKED_UP
  IN_TRANSIT
  RELAY_POINT
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum SubscriptionPlan {
  FREE
  STARTER
  PREMIUM
}

enum DocumentType {
  IDENTITY
  DRIVING_LICENSE
  INSURANCE
  VEHICLE_REGISTRATION
  CERTIFICATION
  OTHER
}

enum ValidationStatus {
  PENDING
  APPROVED
  REJECTED
}
\n\n// From 01-users.prisma\n// Modèles utilisateurs

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  password          String
  firstName         String
  lastName          String
  phoneNumber       String?
  role              UserRole
  isVerified        Boolean             @default(false)
  isActive          Boolean             @default(true)
  isFirstLogin      Boolean             @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  profile           Profile?
  client            Client?
  deliverer         Deliverer?
  merchant          Merchant?
  provider          Provider?
  admin             Admin?
  sessions          Session[]
  notifications     Notification[]
  documents         Document[]
  
  @@index([email])
  @@index([role])
}

model Profile {
  id                String              @id @default(cuid())
  userId            String              @unique
  avatar            String?
  bio               String?
  address           String?
  city              String?
  postalCode        String?
  country           String              @default("FR")
  locale            String              @default("fr")
  timezone          String              @default("Europe/Paris")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}
\n\n// From 02-auth.prisma\n// Modèles authentification

model Session {
  id                String              @id @default(cuid())
  userId            String
  token             String              @unique
  userAgent         String?
  ip                String?
  expiresAt         DateTime
  createdAt         DateTime            @default(now())
  
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

model PasswordReset {
  id                String              @id @default(cuid())
  email             String
  token             String              @unique
  expiresAt         DateTime
  createdAt         DateTime            @default(now())
  
  @@index([token])
  @@index([email])
}
\n\n// From 03-client.prisma\n// Modèles client

model Client {
  id                String              @id @default(cuid())
  userId            String              @unique
  subscriptionPlan  SubscriptionPlan    @default(FREE)
  subscriptionStart DateTime            @default(now())
  subscriptionEnd   DateTime?
  tutorialCompleted Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  announcements     Announcement[]
  bookings          Booking[]
  deliveries        Delivery[]          @relation("ClientDeliveries")
  payments          Payment[]           @relation("ClientPayments")
  storageBoxes      StorageBoxRental[]
  reviews           Review[]
  
  @@index([userId])
}
\n\n// From 04-deliverer.prisma\n// Modèles livreur

model Deliverer {
  id                String              @id @default(cuid())
  userId            String              @unique
  validationStatus  ValidationStatus    @default(PENDING)
  validatedAt       DateTime?
  validatedBy       String?
  vehicleType       String?
  vehiclePlate      String?
  maxWeight         Float?
  maxVolume         Float?
  rating            Float               @default(0)
  totalDeliveries   Int                 @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  routes            Route[]
  deliveries        Delivery[]          @relation("DelivererDeliveries")
  wallet            Wallet?
  nfcCard           NFCCard?
  availabilities    Availability[]
  
  @@index([userId])
  @@index([validationStatus])
}

model Route {
  id                String              @id @default(cuid())
  delivererId       String
  startLocation     Json                // {address, city, postalCode, lat, lng}
  endLocation       Json                // {address, city, postalCode, lat, lng}
  departureDate     DateTime
  arrivalDate       DateTime
  availableWeight   Float?
  availableVolume   Float?
  pricePerKg        Float?
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  deliverer         Deliverer           @relation(fields: [delivererId], references: [id], onDelete: Cascade)
  matchedAnnouncements RouteAnnouncementMatch[]
  
  @@index([delivererId])
  @@index([departureDate])
}

model NFCCard {
  id                String              @id @default(cuid())
  delivererId       String              @unique
  cardNumber        String              @unique
  isActive          Boolean             @default(true)
  issuedAt          DateTime            @default(now())
  lastUsedAt        DateTime?

  deliverer         Deliverer           @relation(fields: [delivererId], references: [id], onDelete: Cascade)
  
  @@index([cardNumber])
}
\n\n// From 05-merchant.prisma\n// Modèles commerçant

model Merchant {
  id                String              @id @default(cuid())
  userId            String              @unique
  companyName       String
  siret             String              @unique
  vatNumber         String?
  contractStatus    String              @default("PENDING")
  contractStartDate DateTime?
  contractEndDate   DateTime?
  commissionRate    Float               @default(0.15)
  rating            Float               @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  contract          Contract?
  announcements     Announcement[]
  orders            Order[]
  cartDropConfig    CartDropConfig?
  payments          Payment[]           @relation("MerchantPayments")
  
  @@index([userId])
  @@index([siret])
}

model CartDropConfig {
  id                String              @id @default(cuid())
  merchantId        String              @unique
  isActive          Boolean             @default(false)
  deliveryZones     Json[]              // [{postalCode, deliveryFee}]
  timeSlots         Json[]              // [{day, startTime, endTime}]
  maxOrdersPerSlot  Int                 @default(10)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  merchant          Merchant            @relation(fields: [merchantId], references: [id], onDelete: Cascade)
}
\n\n// From 06-provider.prisma\n// Modèles prestataire

model Provider {
  id                String              @id @default(cuid())
  userId            String              @unique
  validationStatus  ValidationStatus    @default(PENDING)
  validatedAt       DateTime?
  validatedBy       String?
  businessName      String?
  siret             String?
  rating            Float               @default(0)
  totalInterventions Int                @default(0)
  monthlyInvoiceDay Int                 @default(25) // Jour de facturation mensuelle
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  services          Service[]
  certifications    Certification[]
  availabilities    Availability[]
  bookings          Booking[]
  interventions     Intervention[]
  invoices          Invoice[]           @relation("ProviderInvoices")
  rates             ProviderRate[]
  
  @@index([userId])
  @@index([validationStatus])
}

model Service {
  id                String              @id @default(cuid())
  providerId        String
  serviceType       ServiceType
  name              String
  description       String
  basePrice         Float
  priceType         String              // "HOURLY", "FIXED", "CUSTOM"
  duration          Int?                // En minutes
  maxDistance       Float?              // En km
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  provider          Provider            @relation(fields: [providerId], references: [id], onDelete: Cascade)
  bookings          Booking[]
  
  @@index([providerId])
  @@index([serviceType])
}

model Certification {
  id                String              @id @default(cuid())
  providerId        String
  name              String
  issuingBody       String
  documentId        String?
  issueDate         DateTime
  expiryDate        DateTime?
  isVerified        Boolean             @default(false)
  verifiedAt        DateTime?
  verifiedBy        String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  provider          Provider            @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  @@index([providerId])
}

model ProviderRate {
  id                String              @id @default(cuid())
  providerId        String
  serviceType       ServiceType
  negotiatedRate    Float               // Tarif négocié avec EcoDeli
  validFrom         DateTime
  validUntil        DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  provider          Provider            @relation(fields: [providerId], references: [id], onDelete: Cascade)
  
  @@unique([providerId, serviceType])
}
\n\n// From 07-admin.prisma\n// Modèles admin

model Admin {
  id                String              @id @default(cuid())
  userId            String              @unique
  permissions       String[]            @default([])
  department        String?             // "OPERATIONS", "FINANCE", "SUPPORT", etc.
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  validatedDocuments Document[]         @relation("ValidatedDocuments")
  validatedDeliverers Deliverer[]       @relation("ValidatedDeliverers")
  validatedProviders Provider[]         @relation("ValidatedProviders")
  
  @@index([userId])
}
\n\n// From 08-announcement.prisma\n// Modèles annonces

model Announcement {
  id                String              @id @default(cuid())
  clientId          String?
  merchantId        String?
  type              AnnouncementType
  title             String
  description       String
  startLocation     Json                // {address, city, postalCode, lat, lng}
  endLocation       Json                // {address, city, postalCode, lat, lng}
  desiredDate       DateTime
  flexibleDates     Boolean             @default(false)
  dateRangeStart    DateTime?
  dateRangeEnd      DateTime?
  price             Float
  currency          String              @default("EUR")
  status            AnnouncementStatus  @default(DRAFT)
  viewCount         Int                 @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  publishedAt       DateTime?

  // Relations
  client            Client?             @relation(fields: [clientId], references: [id], onDelete: SetNull)
  merchant          Merchant?           @relation(fields: [merchantId], references: [id], onDelete: SetNull)
  packageDetails    PackageAnnouncement?
  serviceDetails    ServiceAnnouncement?
  delivery          Delivery?
  routeMatches      RouteAnnouncementMatch[]
  
  @@index([clientId])
  @@index([merchantId])
  @@index([status])
  @@index([type])
  @@index([desiredDate])
}

model PackageAnnouncement {
  id                String              @id @default(cuid())
  announcementId    String              @unique
  weight            Float               // En kg
  length            Float               // En cm
  width             Float               // En cm
  height            Float               // En cm
  fragile           Boolean             @default(false)
  requiresInsurance Boolean             @default(false)
  insuredValue      Float?
  specialInstructions String?

  announcement      Announcement        @relation(fields: [announcementId], references: [id], onDelete: Cascade)
}

model ServiceAnnouncement {
  id                String              @id @default(cuid())
  announcementId    String              @unique
  serviceType       ServiceType
  numberOfPeople    Int?
  duration          Int?                // En minutes
  recurringService  Boolean             @default(false)
  recurringPattern  String?             // "DAILY", "WEEKLY", "MONTHLY"
  specialRequirements String?
  preferredProviderId String?

  announcement      Announcement        @relation(fields: [announcementId], references: [id], onDelete: Cascade)
}

model RouteAnnouncementMatch {
  id                String              @id @default(cuid())
  routeId           String
  announcementId    String
  matchScore        Float               // Score de correspondance 0-100
  isNotified        Boolean             @default(false)
  notifiedAt        DateTime?
  createdAt         DateTime            @default(now())

  route             Route               @relation(fields: [routeId], references: [id], onDelete: Cascade)
  announcement      Announcement        @relation(fields: [announcementId], references: [id], onDelete: Cascade)
  
  @@unique([routeId, announcementId])
  @@index([matchScore])
}
\n\n// From 09-delivery.prisma\n// Modèles livraisons

model Delivery {
  id                String              @id @default(cuid())
  announcementId    String              @unique
  clientId          String
  delivererId       String
  status            DeliveryStatus      @default(PENDING)
  trackingNumber    String              @unique @default(cuid())
  validationCode    String?             // Code à 6 chiffres
  pickupDate        DateTime?
  deliveryDate      DateTime?
  actualDeliveryDate DateTime?
  isPartial         Boolean             @default(false)
  currentLocation   Json?               // {address, lat, lng, updatedAt}
  price             Float
  delivererFee      Float               // Part du livreur
  platformFee       Float               // Commission plateforme
  insuranceFee      Float?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  announcement      Announcement          @relation(fields: [announcementId], references: [id])
  client            Client                @relation("ClientDeliveries", fields: [clientId], references: [id])
  deliverer         Deliverer             @relation("DelivererDeliveries", fields: [delivererId], references: [id])
  statusHistory     DeliveryStatus[]
  handovers         Handover[]
  proofOfDelivery   ProofOfDelivery?
  payment           Payment?
  validationCodes   DeliveryValidation[]
  history           DeliveryHistory[]
  
  @@index([trackingNumber])
  @@index([clientId])
  @@index([delivererId])
  @@index([status])
}

model DeliveryStatus {
  id                String              @id @default(cuid())
  deliveryId        String
  status            DeliveryStatus
  comment           String?
  location          Json?               // {address, lat, lng}
  createdBy         String
  createdAt         DateTime            @default(now())

  delivery          Delivery            @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  
  @@index([deliveryId])
}

model Handover {
  id                String              @id @default(cuid())
  deliveryId        String
  fromDelivererId   String
  toDelivererId     String?
  locationId        String
  handoverDate      DateTime
  handoverCode      String              // Code de transfert
  isCompleted       Boolean             @default(false)
  completedAt       DateTime?
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  delivery          Delivery            @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  location          Location            @relation(fields: [locationId], references: [id])
  
  @@index([deliveryId])
  @@index([handoverCode])
}

model ProofOfDelivery {
  id                String              @id @default(cuid())
  deliveryId        String              @unique
  recipientName     String?
  recipientSignature String?            // Base64
  photos            String[]            // URLs
  notes             String?
  validatedWithCode Boolean             @default(false)
  validatedWithNFC  Boolean             @default(false)
  createdAt         DateTime            @default(now())

  delivery          Delivery            @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
}
\n\n// From 10-booking.prisma\n// Modèles réservations

model Booking {
  id                String              @id @default(cuid())
  clientId          String
  providerId        String
  serviceId         String
  status            String              @default("PENDING") // PENDING, CONFIRMED, IN_PROGRESS, COMPLETED, CANCELLED
  scheduledDate     DateTime
  scheduledTime     String              // HH:MM
  duration          Int                 // En minutes
  address           Json                // {address, city, postalCode, lat, lng}
  totalPrice        Float
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  client            Client              @relation(fields: [clientId], references: [id])
  provider          Provider            @relation(fields: [providerId], references: [id])
  service           Service             @relation(fields: [serviceId], references: [id])
  intervention      Intervention?
  payment           Payment?
  review            Review?
  
  @@index([clientId])
  @@index([providerId])
  @@index([scheduledDate])
  @@index([status])
}

model Intervention {
  id                String              @id @default(cuid())
  bookingId         String              @unique
  providerId        String
  startTime         DateTime?
  endTime           DateTime?
  actualDuration    Int?                // En minutes
  report            String?
  photos            String[]            // URLs
  clientSignature   String?             // Base64
  isCompleted       Boolean             @default(false)
  completedAt       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  booking           Booking             @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  provider          Provider            @relation(fields: [providerId], references: [id])
  
  @@index([providerId])
}
\n\n// From 10-delivery-validation.prisma\n// Modèle pour la validation des livraisons avec codes à 6 chiffres

model DeliveryValidation {
  id          String    @id @default(cuid())
  deliveryId  String
  code        String    @unique   // Code à 6 chiffres
  isUsed      Boolean   @default(false)
  usedAt      DateTime?
  expiresAt   DateTime  // Expire après 2 heures
  createdAt   DateTime  @default(now())

  // Relations
  delivery    Delivery  @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@index([code])
  @@index([expiresAt])
}

model DeliveryHistory {
  id          String        @id @default(cuid())
  deliveryId  String
  status      DeliveryStatus
  notes       String?
  latitude    Float?
  longitude   Float?
  createdBy   String?       // ID du user qui a fait le changement
  createdAt   DateTime      @default(now())

  // Relations
  delivery    Delivery      @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
  @@index([createdAt])
}\n\n// From 11-payment.prisma\n// Modèles paiements

model Payment {
  id                String              @id @default(cuid())
  amount            Float
  currency          String              @default("EUR")
  status            PaymentStatus       @default(PENDING)
  type              String              // "DELIVERY", "SERVICE", "SUBSCRIPTION", "WITHDRAWAL"
  method            String?             // "CARD", "BANK_TRANSFER", "WALLET"
  stripePaymentId   String?
  stripeSessionId   String?
  clientId          String?
  merchantId        String?
  deliveryId        String?             @unique
  bookingId         String?             @unique
  walletTransactionId String?           @unique
  metadata          Json?
  paidAt            DateTime?
  failedAt          DateTime?
  refundedAt        DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  client            Client?             @relation("ClientPayments", fields: [clientId], references: [id])
  merchant          Merchant?           @relation("MerchantPayments", fields: [merchantId], references: [id])
  delivery          Delivery?           @relation(fields: [deliveryId], references: [id])
  booking           Booking?            @relation(fields: [bookingId], references: [id])
  walletTransaction WalletTransaction?  @relation(fields: [walletTransactionId], references: [id])
  
  @@index([status])
  @@index([type])
  @@index([stripePaymentId])
}

model Wallet {
  id                String              @id @default(cuid())
  delivererId       String              @unique
  balance           Float               @default(0)
  pendingBalance    Float               @default(0)
  currency          String              @default("EUR")
  stripeAccountId   String?
  bankAccountId     String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  deliverer         Deliverer           @relation(fields: [delivererId], references: [id], onDelete: Cascade)
  transactions      WalletTransaction[]
  withdrawals       Withdrawal[]
}

model WalletTransaction {
  id                String              @id @default(cuid())
  walletId          String
  type              String              // "CREDIT", "DEBIT", "WITHDRAWAL", "REFUND"
  amount            Float
  description       String
  referenceId       String?             // ID de la livraison ou autre
  balanceBefore     Float
  balanceAfter      Float
  createdAt         DateTime            @default(now())

  // Relations
  wallet            Wallet              @relation(fields: [walletId], references: [id], onDelete: Cascade)
  payment           Payment?
  
  @@index([walletId])
  @@index([type])
}

model Withdrawal {
  id                String              @id @default(cuid())
  walletId          String
  amount            Float
  status            String              @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  bankAccount       Json                // {iban, bic, accountHolder}
  stripeTransferId  String?
  processedAt       DateTime?
  failureReason     String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  wallet            Wallet              @relation(fields: [walletId], references: [id])
  
  @@index([walletId])
  @@index([status])
}
\n\n// From 12-invoice.prisma\n// Modèles factures

model Invoice {
  id                String              @id @default(cuid())
  invoiceNumber     String              @unique
  type              String              // "PROVIDER_MONTHLY", "DELIVERY", "SERVICE", "MERCHANT"
  status            String              @default("DRAFT") // DRAFT, SENT, PAID, OVERDUE
  providerId        String?
  merchantId        String?
  clientId          String?
  billingPeriodStart DateTime?
  billingPeriodEnd  DateTime?
  subtotal          Float
  tax               Float
  total             Float
  currency          String              @default("EUR")
  dueDate           DateTime
  paidAt            DateTime?
  pdfUrl            String?
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  provider          Provider?           @relation("ProviderInvoices", fields: [providerId], references: [id])
  items             InvoiceItem[]
  
  @@index([invoiceNumber])
  @@index([type])
  @@index([status])
  @@index([providerId])
}

model InvoiceItem {
  id                String              @id @default(cuid())
  invoiceId         String
  description       String
  quantity          Float               @default(1)
  unitPrice         Float
  total             Float
  referenceType     String?             // "INTERVENTION", "DELIVERY", etc.
  referenceId       String?
  metadata          Json?
  createdAt         DateTime            @default(now())

  invoice           Invoice             @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  
  @@index([invoiceId])
}
\n\n// From 13-location.prisma\n// Modèles emplacements

model Location {
  id                String              @id @default(cuid())
  name              String
  type              String              // "WAREHOUSE", "RELAY_POINT", "OFFICE"
  address           String
  city              String
  postalCode        String
  country           String              @default("FR")
  lat               Float
  lng               Float
  phone             String?
  email             String?
  openingHours      Json?               // [{day, open, close}]
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  warehouses        Warehouse[]
  handovers         Handover[]
  storageBoxes      StorageBox[]
  
  @@index([type])
  @@index([city])
}

model Warehouse {
  id                String              @id @default(cuid())
  locationId        String              @unique
  capacity          Int                 // Nombre de colis max
  currentOccupancy  Int                 @default(0)
  managerName       String?
  managerEmail      String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  location          Location            @relation(fields: [locationId], references: [id])
}

model StorageBox {
  id                String              @id @default(cuid())
  locationId        String
  boxNumber         String
  size              String              // "SMALL", "MEDIUM", "LARGE"
  pricePerDay       Float
  isAvailable       Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  location          Location            @relation(fields: [locationId], references: [id])
  rentals           StorageBoxRental[]
  
  @@unique([locationId, boxNumber])
  @@index([locationId])
  @@index([isAvailable])
}

model StorageBoxRental {
  id                String              @id @default(cuid())
  clientId          String
  storageBoxId      String
  startDate         DateTime
  endDate           DateTime?
  accessCode        String              // Code d'accès au box
  totalPrice        Float?
  isPaid            Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  client            Client              @relation(fields: [clientId], references: [id])
  storageBox        StorageBox          @relation(fields: [storageBoxId], references: [id])
  
  @@index([clientId])
  @@index([storageBoxId])
  @@index([startDate])
}
\n\n// From 14-document.prisma\n// Modèles documents

model Document {
  id                String              @id @default(cuid())
  userId            String
  type              DocumentType
  name              String
  url               String
  size              Int                 // En bytes
  mimeType          String
  validationStatus  ValidationStatus    @default(PENDING)
  validatedBy       String?
  validatedAt       DateTime?
  validationNotes   String?
  expiryDate        DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  validator         Admin?              @relation("ValidatedDocuments", fields: [validatedBy], references: [id])
  
  @@index([userId])
  @@index([type])
  @@index([validationStatus])
}
\n\n// From 15-notification.prisma\n// Modèles notifications

model Notification {
  id                String              @id @default(cuid())
  userId            String
  type              String              // "ANNOUNCEMENT_MATCH", "DELIVERY_UPDATE", "PAYMENT_RECEIVED", etc.
  title             String
  message           String
  data              Json?               // Données additionnelles
  isRead            Boolean             @default(false)
  readAt            DateTime?
  isPush            Boolean             @default(false)
  pushSentAt        DateTime?
  createdAt         DateTime            @default(now())

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@index([type])
}

model NotificationPreference {
  id                String              @id @default(cuid())
  userId            String              @unique
  emailNotifications Boolean            @default(true)
  pushNotifications Boolean             @default(true)
  smsNotifications  Boolean             @default(false)
  
  // Types de notifications
  announcementMatch Boolean             @default(true)
  deliveryUpdates   Boolean             @default(true)
  paymentUpdates    Boolean             @default(true)
  marketingEmails   Boolean             @default(false)
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([userId])
}
\n\n// From 16-review.prisma\n// Modèles évaluations et autres

model Review {
  id                String              @id @default(cuid())
  clientId          String
  targetType        String              // "DELIVERER", "PROVIDER", "MERCHANT"
  targetId          String
  bookingId         String?             @unique
  deliveryId        String?             @unique
  rating            Int                 // 1-5
  comment           String?
  isPublic          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  client            Client              @relation(fields: [clientId], references: [id])
  booking           Booking?            @relation(fields: [bookingId], references: [id])
  
  @@index([clientId])
  @@index([targetType, targetId])
  @@index([rating])
}

model Availability {
  id                String              @id @default(cuid())
  providerId        String?
  delivererId       String?
  dayOfWeek         Int                 // 0-6 (Dimanche-Samedi)
  startTime         String              // HH:MM
  endTime           String              // HH:MM
  isRecurring       Boolean             @default(true)
  specificDate      DateTime?           // Pour disponibilités ponctuelles
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  provider          Provider?           @relation(fields: [providerId], references: [id], onDelete: Cascade)
  deliverer         Deliverer?          @relation(fields: [delivererId], references: [id], onDelete: Cascade)
  
  @@index([providerId])
  @@index([delivererId])
  @@index([dayOfWeek])
}

model Contract {
  id                String              @id @default(cuid())
  merchantId        String              @unique
  contractNumber    String              @unique
  type              String              // "STANDARD", "PREMIUM", "CUSTOM"
  terms             Json                // Conditions du contrat
  commissionRate    Float
  startDate         DateTime
  endDate           DateTime?
  status            String              @default("ACTIVE") // "DRAFT", "ACTIVE", "SUSPENDED", "TERMINATED"
  signedAt          DateTime?
  signedBy          String?
  pdfUrl            String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  merchant          Merchant            @relation(fields: [merchantId], references: [id])
  
  @@index([contractNumber])
  @@index([status])
}

model Order {
  id                String              @id @default(cuid())
  merchantId        String
  orderNumber       String              @unique
  clientName        String
  clientEmail       String?
  clientPhone       String?
  deliveryAddress   Json                // {address, city, postalCode, lat, lng}
  deliveryDate      DateTime
  deliverySlot      String              // HH:MM-HH:MM
  items             Json[]              // [{name, quantity, price}]
  subtotal          Float
  deliveryFee       Float
  total             Float
  status            String              @default("PENDING") // PENDING, CONFIRMED, DELIVERED, CANCELLED
  isCartDrop        Boolean             @default(false)
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  merchant          Merchant            @relation(fields: [merchantId], references: [id])
  
  @@index([merchantId])
  @@index([orderNumber])
  @@index([status])
}
\n