import { PrismaClient, UserRole } from '@prisma/client';
import { SeedLogger } from '../utils/seed-logger';
import { SeedResult, SeedOptions, getRandomElement } from '../utils/seed-helpers';
import { faker } from '@faker-js/faker';

/**
 * Interface pour d√©finir un message type
 */
interface MessageTemplate {
  content: string;
  category: string;
  hasAttachment: boolean;
  isSystemMessage: boolean;
  priority: 'LOW' | 'MEDIUM' | 'HIGH';
}

/**
 * Seed des messages EcoDeli
 * Cr√©e des messages vari√©s dans les conversations existantes
 */
export async function seedMessages(
  prisma: PrismaClient,
  logger: SeedLogger,
  options: SeedOptions = {}
): Promise<SeedResult> {
  logger.startSeed('MESSAGES');
  
  const result: SeedResult = {
    entity: 'messages',
    created: 0,
    skipped: 0,
    errors: 0
  };

  // V√©rifier les messages existants
  const existingMessages = await prisma.message.count();
  
  if (existingMessages > 200 && !options.force) {
    logger.warning('MESSAGES', `${existingMessages} messages d√©j√† pr√©sents - utiliser force:true pour recr√©er`);
    result.skipped = existingMessages;
    return result;
  }

  // Nettoyer si force activ√©
  if (options.force) {
    await prisma.message.deleteMany({});
    logger.database('NETTOYAGE', 'messages', 0);
  }

  // R√©cup√©rer les conversations existantes
  const conversations = await prisma.conversation.findMany({
    select: { 
      id: true, 
      title: true, 
      participantIds: true, 
      status: true,
      isArchived: true 
    }
  });

  if (conversations.length === 0) {
    logger.warning('MESSAGES', 'Aucune conversation trouv√©e - cr√©er d\'abord les seeds de conversations');
    return result;
  }

  // R√©cup√©rer tous les utilisateurs
  const users = await prisma.user.findMany({
    select: { id: true, name: true, role: true }
  });

  // Templates de messages par contexte
  const MESSAGE_TEMPLATES: Record<string, MessageTemplate[]> = {
    LIVRAISON: [
      {
        content: "Bonjour ! Je serai l√† dans 15 minutes pour la livraison. Pouvez-vous me confirmer votre pr√©sence ? üöö",
        category: "DELIVERY_STATUS",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "HIGH"
      },
      {
        content: "Parfait ! Je vous attends en bas de l'immeuble. Merci pour votre ponctualit√© üòä",
        category: "DELIVERY_CONFIRMATION",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "MEDIUM"
      },
      {
        content: "J'ai un l√©ger retard √† cause des embouteillages. J'arrive dans 20 minutes maximum. D√©sol√© pour le d√©sagr√©ment üöó",
        category: "DELIVERY_DELAY",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "HIGH"
      },
      {
        content: "Livraison effectu√©e avec succ√®s ! Merci d'avoir choisi EcoDeli. N'h√©sitez pas √† nous noter ‚≠ê",
        category: "DELIVERY_COMPLETED",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "LOW"
      },
      {
        content: "Le colis est un peu plus volumineux que pr√©vu. Il faudra pr√©voir un autre v√©hicule. Photo en pi√®ce jointe üì¶",
        category: "DELIVERY_ISSUE",
        hasAttachment: true,
        isSystemMessage: false,
        priority: "HIGH"
      }
    ],
    SUPPORT: [
      {
        content: "Bonjour, j'ai un probl√®me avec mon compte. Je n'arrive plus √† me connecter depuis ce matin üòü",
        category: "SUPPORT_LOGIN",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "HIGH"
      },
      {
        content: "Pouvez-vous me confirmer l'adresse email associ√©e √† votre compte ? Nous allons v√©rifier les param√®tres üîß",
        category: "SUPPORT_VERIFICATION",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "MEDIUM"
      },
      {
        content: "Le probl√®me a √©t√© r√©solu ! Votre compte est maintenant fonctionnel. Merci pour votre patience ‚úÖ",
        category: "SUPPORT_RESOLVED",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "LOW"
      },
      {
        content: "Je vous transf√®re votre ticket au service technique niveau 2. Ils vous recontacteront dans l'heure üé´",
        category: "SUPPORT_ESCALATION",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "HIGH"
      }
    ],
    NEGOCIATION: [
      {
        content: "Bonjour, je suis int√©ress√© par vos services de plomberie. Pouvez-vous me faire un devis pour une r√©novation compl√®te ? üîß",
        category: "NEGOTIATION_REQUEST",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "MEDIUM"
      },
      {
        content: "Bien s√ªr ! Pouvez-vous me donner plus de d√©tails sur la superficie et le type de travaux souhait√©s ? üìê",
        category: "NEGOTIATION_DETAILS",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "MEDIUM"
      },
      {
        content: "Voici mon devis d√©taill√©. Le prix inclut la main d'≈ìuvre et les mat√©riaux. Qu'en pensez-vous ? üí∞",
        category: "NEGOTIATION_QUOTE",
        hasAttachment: true,
        isSystemMessage: false,
        priority: "HIGH"
      },
      {
        content: "Le prix me semble correct. Quand pouvez-vous commencer les travaux ? ‚è∞",
        category: "NEGOTIATION_ACCEPTANCE",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "HIGH"
      },
      {
        content: "Je peux commencer d√®s la semaine prochaine. Nous validons le planning ? üìÖ",
        category: "NEGOTIATION_PLANNING",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "MEDIUM"
      }
    ],
    COMMANDE: [
      {
        content: "Ma commande est-elle pr√™te ? J'aimerais passer la r√©cup√©rer ce soir üõçÔ∏è",
        category: "ORDER_STATUS",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "MEDIUM"
      },
      {
        content: "Oui, tout est pr√™t ! Nous vous attendons jusqu'√† 19h. Pensez √† apporter votre bon de commande üìÑ",
        category: "ORDER_READY",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "MEDIUM"
      },
      {
        content: "Malheureusement, il manque un article. Nous l'aurons demain matin. Souhaitez-vous attendre ou prendre le reste ? üì¶",
        category: "ORDER_PARTIAL",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "HIGH"
      },
      {
        content: "Je pr√©f√®re attendre d'avoir la commande compl√®te. Merci de me tenir au courant üìû",
        category: "ORDER_PREFERENCE",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "LOW"
      }
    ],
    GROUPE: [
      {
        content: "Salut l'√©quipe ! Pour la livraison group√©e de demain, qui peut prendre la zone Nord ? üöõ",
        category: "GROUP_COORDINATION",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "MEDIUM"
      },
      {
        content: "Moi je peux ! J'ai fini mes autres livraisons vers 14h ‚úã",
        category: "GROUP_VOLUNTEER",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "MEDIUM"
      },
      {
        content: "Parfait @Thomas ! Je mets √† jour le planning. Rdv au d√©p√¥t √† 8h30 üìù",
        category: "GROUP_PLANNING",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "HIGH"
      },
      {
        content: "N'oubliez pas les √©quipements de s√©curit√© pour les gros colis ! ü¶∫",
        category: "GROUP_REMINDER",
        hasAttachment: false,
        isSystemMessage: false,
        priority: "MEDIUM"
      }
    ],
    SYSTEME: [
      {
        content: "ü§ñ Votre demande de service a √©t√© confirm√©e. R√©f√©rence: #SRV-2024-1234",
        category: "SYSTEM_CONFIRMATION",
        hasAttachment: false,
        isSystemMessage: true,
        priority: "LOW"
      },
      {
        content: "üîî Nouveau message de votre livreur. V√©rifiez vos notifications !",
        category: "SYSTEM_NOTIFICATION",
        hasAttachment: false,
        isSystemMessage: true,
        priority: "MEDIUM"
      },
      {
        content: "‚ö†Ô∏è Maintenance programm√©e demain de 2h √† 4h. Services temporairement indisponibles.",
        category: "SYSTEM_MAINTENANCE",
        hasAttachment: false,
        isSystemMessage: true,
        priority: "HIGH"
      },
      {
        content: "‚úÖ Paiement accept√©. Montant: 45.50‚Ç¨ - M√©thode: Carte bancaire",
        category: "SYSTEM_PAYMENT",
        hasAttachment: false,
        isSystemMessage: true,
        priority: "LOW"
      }
    ]
  };

  let totalMessages = 0;

  // Cr√©er des messages pour chaque conversation
  for (const conversation of conversations) {
    try {
      // D√©terminer le nombre de messages selon le type de conversation
      const messageCount = getMessageCount(conversation.title || '', conversation.isArchived);
      
      // D√©terminer le contexte des messages selon le titre de la conversation
      const messageContext = getMessageContext(conversation.title || '');
      const templates = MESSAGE_TEMPLATES[messageContext] || MESSAGE_TEMPLATES.SUPPORT;
      
      // Cr√©er une s√©quence de messages r√©aliste
      const conversationMessages = await createMessageSequence(
        prisma,
        conversation,
        templates,
        messageCount,
        users,
        logger,
        options
      );

      totalMessages += conversationMessages;
      result.created += conversationMessages;

      if (options.verbose && totalMessages % 50 === 0) {
        logger.progress('MESSAGES', totalMessages, 1000, 
          `Messages cr√©√©s: ${totalMessages}`);
      }

    } catch (error: any) {
      logger.error('MESSAGES', `‚ùå Erreur cr√©ation messages conversation ${conversation.id}: ${error.message}`);
      result.errors++;
    }
  }

  // Statistiques finales
  const finalMessages = await prisma.message.findMany({
    include: { 
      conversation: true,
      sender: true 
    }
  });

  // Distribution par statut
  const messagesByStatus = finalMessages.reduce((acc: Record<string, number>, msg) => {
    acc[msg.status] = (acc[msg.status] || 0) + 1;
    return acc;
  }, {});

  // Distribution par type d'exp√©diteur
  const messagesBySenderRole = finalMessages.reduce((acc: Record<string, number>, msg) => {
    acc[msg.sender.role] = (acc[msg.sender.role] || 0) + 1;
    return acc;
  }, {});

  // Messages avec pi√®ces jointes
  const messagesWithAttachments = finalMessages.filter(msg => msg.attachments !== null).length;

  // Taux de lecture
  const readMessages = finalMessages.filter(msg => msg.status === 'READ').length;
  const readRate = finalMessages.length > 0 ? (readMessages / finalMessages.length * 100).toFixed(1) : '0';

  // Messages r√©cents (24h)
  const recentMessages = finalMessages.filter(msg => {
    const hoursAgo = (new Date().getTime() - msg.createdAt.getTime()) / (1000 * 60 * 60);
    return hoursAgo <= 24;
  }).length;

  logger.info('MESSAGES', `üìä Statuts: ${JSON.stringify(messagesByStatus)}`);
  logger.info('MESSAGES', `üë§ Par r√¥le: ${JSON.stringify(messagesBySenderRole)}`);
  logger.info('MESSAGES', `üìé Pi√®ces jointes: ${messagesWithAttachments}/${finalMessages.length} messages`);
  logger.info('MESSAGES', `üìñ Taux lecture: ${readRate}% (${readMessages}/${finalMessages.length})`);
  logger.info('MESSAGES', `üïê Messages r√©cents (24h): ${recentMessages}`);

  // Validation
  if (finalMessages.length >= totalMessages - result.errors) {
    logger.validation('MESSAGES', 'PASSED', `${finalMessages.length} messages cr√©√©s avec succ√®s`);
  } else {
    logger.validation('MESSAGES', 'FAILED', `Attendu: ${totalMessages}, Cr√©√©: ${finalMessages.length}`);
  }

  logger.endSeed('MESSAGES', result);
  return result;
}

/**
 * D√©termine le nombre de messages pour une conversation
 */
function getMessageCount(title: string, isArchived: boolean): number {
  if (isArchived) return faker.number.int({ min: 3, max: 8 });
  
  if (title.includes('Support')) return faker.number.int({ min: 5, max: 15 });
  if (title.includes('N√©gociation')) return faker.number.int({ min: 8, max: 20 });
  if (title.includes('Livraison')) return faker.number.int({ min: 3, max: 12 });
  if (title.includes('Groupe')) return faker.number.int({ min: 10, max: 25 });
  
  return faker.number.int({ min: 4, max: 10 });
}

/**
 * D√©termine le contexte des messages selon le titre de la conversation
 */
function getMessageContext(title: string): string {
  if (title.includes('Livraison')) return 'LIVRAISON';
  if (title.includes('Support')) return 'SUPPORT';
  if (title.includes('N√©gociation')) return 'NEGOCIATION';
  if (title.includes('Commande')) return 'COMMANDE';
  if (title.includes('Groupe')) return 'GROUPE';
  
  return 'SUPPORT';
}

/**
 * Cr√©e une s√©quence r√©aliste de messages pour une conversation
 */
async function createMessageSequence(
  prisma: PrismaClient,
  conversation: any,
  templates: MessageTemplate[],
  messageCount: number,
  users: any[],
  logger: SeedLogger,
  options: SeedOptions
): Promise<number> {
  let createdCount = 0;
  const participantUsers = users.filter(user => conversation.participantIds.includes(user.id));
  
  if (participantUsers.length === 0) return 0;

  // Commencer la conversation avec un message d'ouverture
  const firstSender = getRandomElement(participantUsers);
  const firstTemplate = templates[0] || templates[faker.number.int({ min: 0, max: templates.length - 1 })];
  
  const baseDate = faker.date.past({ years: 1 });
  
  for (let i = 0; i < messageCount; i++) {
    try {
      // Alterner les exp√©diteurs de mani√®re r√©aliste
      const sender = i === 0 ? firstSender : getRandomElement(participantUsers);
      const template = i === 0 ? firstTemplate : getRandomElement(templates);
      
      // Varier le contenu du message
      let messageContent = template.content;
      if (!template.isSystemMessage) {
        messageContent = personalizeMessage(messageContent, sender.name);
      }

      // D√©terminer le statut de lecture (80% des messages sont lus)
      const isRead = faker.datatype.boolean(0.8);
      
      // G√©n√©rer des pi√®ces jointes si n√©cessaire
      const attachments = template.hasAttachment ? generateAttachments() : null;

      // Calculer la date du message (chronologique)
      const messageDate = new Date(baseDate.getTime() + (i * 2 * 60 * 60 * 1000)); // 2h d'√©cart

      const message = await prisma.message.create({
        data: {
          conversationId: conversation.id,
          senderId: sender.id,
          content: messageContent,
          status: isRead ? 'READ' : 'UNREAD',
          readAt: isRead ? faker.date.between({ from: messageDate, to: new Date() }) : null,
          attachments: attachments,
          replyToId: i > 2 && faker.datatype.boolean(0.3) ? null : null, // 30% de chances de r√©ponse
          createdAt: messageDate
        }
      });

      createdCount++;

    } catch (error: any) {
      if (options.verbose) {
        logger.error('MESSAGES', `‚ùå Erreur message ${i}: ${error.message}`);
      }
    }
  }

  return createdCount;
}

/**
 * Personnalise un message avec le nom de l'exp√©diteur
 */
function personalizeMessage(content: string, senderName: string): string {
  // Ajouter une variation personnelle
  const variations = [
    content,
    content.replace('Bonjour !', `Bonjour ${senderName.split(' ')[0]} !`),
    content.replace('Bonjour,', `Salut,`),
    content + ` - ${senderName.split(' ')[0]}`,
  ];

  return getRandomElement(variations);
}

/**
 * G√©n√®re des pi√®ces jointes simul√©es
 */
function generateAttachments(): any {
  const attachmentTypes = [
    {
      type: 'image',
      name: 'photo_colis.jpg',
      size: faker.number.int({ min: 500000, max: 2000000 }),
      url: 'https://example.com/attachments/photo_colis.jpg'
    },
    {
      type: 'document',
      name: 'devis_plomberie.pdf',
      size: faker.number.int({ min: 100000, max: 500000 }),
      url: 'https://example.com/attachments/devis_plomberie.pdf'
    },
    {
      type: 'image',
      name: 'plan_livraison.png',
      size: faker.number.int({ min: 300000, max: 1000000 }),
      url: 'https://example.com/attachments/plan_livraison.png'
    }
  ];

  return [getRandomElement(attachmentTypes)];
}

/**
 * Valide l'int√©grit√© des messages
 */
export async function validateMessages(
  prisma: PrismaClient,
  logger: SeedLogger
): Promise<boolean> {
  logger.info('VALIDATION', 'üîç Validation des messages...');
  
  let isValid = true;

  // V√©rifier les messages
  const messages = await prisma.message.findMany({
    include: { 
      conversation: true,
      sender: true 
    }
  });

  if (messages.length === 0) {
    logger.error('VALIDATION', '‚ùå Aucun message trouv√©');
    isValid = false;
  } else {
    logger.success('VALIDATION', `‚úÖ ${messages.length} messages trouv√©s`);
  }

  // V√©rifier que tous les messages ont un exp√©diteur valide
  const invalidSenders = messages.filter(msg => !msg.sender);
  
  if (invalidSenders.length === 0) {
    logger.success('VALIDATION', '‚úÖ Tous les messages ont un exp√©diteur valide');
  } else {
    logger.warning('VALIDATION', `‚ö†Ô∏è ${invalidSenders.length} messages sans exp√©diteur valide`);
    isValid = false;
  }

  // V√©rifier que tous les messages appartiennent √† une conversation valide
  const invalidConversations = messages.filter(msg => !msg.conversation);
  
  if (invalidConversations.length === 0) {
    logger.success('VALIDATION', '‚úÖ Tous les messages appartiennent √† une conversation valide');
  } else {
    logger.warning('VALIDATION', `‚ö†Ô∏è ${invalidConversations.length} messages sans conversation valide`);
    isValid = false;
  }

  // V√©rifier la coh√©rence des statuts de lecture
  const inconsistentRead = messages.filter(msg => 
    (msg.status === 'read' && !msg.readAt) || 
    (msg.status !== 'read' && msg.readAt)
  );

  if (inconsistentRead.length === 0) {
    logger.success('VALIDATION', '‚úÖ Coh√©rence des statuts de lecture respect√©e');
  } else {
    logger.warning('VALIDATION', `‚ö†Ô∏è ${inconsistentRead.length} messages avec statut de lecture incoh√©rent`);
  }

  // V√©rifier que les messages ne sont pas vides
  const emptyMessages = messages.filter(msg => !msg.content || msg.content.trim().length === 0);
  
  if (emptyMessages.length === 0) {
    logger.success('VALIDATION', '‚úÖ Aucun message vide trouv√©');
  } else {
    logger.warning('VALIDATION', `‚ö†Ô∏è ${emptyMessages.length} messages vides`);
  }

  logger.success('VALIDATION', '‚úÖ Validation des messages termin√©e');
  return isValid;
} 