#!/usr/bin/env node

import { PrismaClient } from '@prisma/client';
import { SeedLogger } from './utils/seed-logger';
import { SeedResult, SeedOptions } from './utils/seed-helpers';
import { createSeedCleaner, CleanOptions } from './utils/seed-cleaner';
import { createSeedValidator, ValidationOptions } from './utils/seed-validator';
import { defaultSeedConfig } from './seed.config';

// Import des seeds de base
import { seedPermissions } from './base/permissions-seed';
import { seedServiceCategories } from './base/service-categories-seed';
import { seedServiceTypes } from './services/service-types-seed';
import { seedProviderAvailability } from './services/provider-availability-seed';
import { seedServiceRatings } from './services/service-ratings-seed';
// import { seedCompleteUsers } from './users/users-complete-seed'; // D√©sactiv√© temporairement √† cause des erreurs de linter

// Import des seeds utilisateurs
import { seedAdminUsers } from './users/admin-users-seed';
import { seedClientUsers } from './users/client-users-seed';
import { seedDelivererUsers } from './users/deliverer-users-seed';
import { seedMerchantUsers } from './users/merchant-users-seed';
import { seedProviderUsers } from './users/provider-users-seed';

// Import des seeds de v√©rification
import { seedDelivererDocuments, validateDelivererDocuments } from './verifications/deliverer-documents-seed';
import { seedProviderDocuments, validateProviderDocuments } from './verifications/provider-documents-seed';
import { seedMerchantDocuments, validateMerchantDocuments } from './verifications/merchant-documents-seed';
import { seedVerificationStates, validateVerificationStates } from './verifications/verification-states-seed';
import { seedVerificationHistory } from './verifications/verification-history-seed';

// Import des seeds stockage
import { seedWarehouses } from './storage/warehouses-seed';

// Import des seeds financiers
import { seedWallets } from './financial/wallets-seed';
import { seedPayments } from './financial/payments-seed';
import { seedInvoices } from './financial/invoices-seed';
import { seedCommissions } from './financial/commissions-seed';
import { seedBillingCycles } from './financial/billing-cycles-seed';

// Import des seeds d'annonces
import { seedClientAnnouncements } from './announcements/client-announcements-seed';
import { seedMerchantAnnouncements } from './announcements/merchant-announcements-seed';

// Import des seeds de notifications  
import { seedNotificationTemplates } from './notifications/notification-templates-seed';

// Import des seeds de services
import { seedProviderServices } from './services/provider-services-seed';
import { seedServiceBookings } from './services/service-bookings-seed';

// Note: Les seeds suivants ont des erreurs TypeScript et sont d√©sactiv√©s:
// - seedContractTemplates, seedProviderContracts, seedMerchantContracts (mod√®le contractTemplate n'existe pas)
// - seedAuditLogs (enums ActivityType manquants)

/**
 * Interface pour d√©finir un seed avec ses d√©pendances
 */
interface SeedDefinition {
  name: string;
  category: string;
  dependencies: string[];
  seedFunction: (prisma: PrismaClient, logger: SeedLogger, options: SeedOptions) => Promise<SeedResult>;
  description: string;
  priority: number; // 1 = haute priorit√© (base), 5 = basse priorit√©
}

/**
 * Configuration compl√®te des seeds EcoDeli
 */
const SEED_DEFINITIONS: SeedDefinition[] = [
  // 1. Seeds de base (priorit√© 1)
  {
    name: 'permissions',
    category: 'base',
    dependencies: [],
    seedFunction: seedPermissions,
    description: 'Permissions syst√®me par r√¥le',
    priority: 1
  },
  {
    name: 'service-categories',
    category: 'base', 
    dependencies: [],
    seedFunction: seedServiceCategories,
    description: 'Cat√©gories de services disponibles',
    priority: 1
  },

  // 2. Seeds utilisateurs (priorit√© 2)
  {
    name: 'admin-users',
    category: 'users',
    dependencies: ['permissions'],
    seedFunction: seedAdminUsers,
    description: 'Utilisateurs administrateurs',
    priority: 2
  },
  {
    name: 'client-users',
    category: 'users',
    dependencies: ['permissions'],
    seedFunction: seedClientUsers,
    description: 'Utilisateurs clients',
    priority: 2
  },
  {
    name: 'deliverer-users',
    category: 'users',
    dependencies: ['permissions'],
    seedFunction: seedDelivererUsers,
    description: 'Utilisateurs livreurs',
    priority: 2
  },
  {
    name: 'merchant-users',
    category: 'users',
    dependencies: ['permissions'],
    seedFunction: seedMerchantUsers,
    description: 'Utilisateurs commer√ßants',
    priority: 2
  },
  {
    name: 'provider-users',
    category: 'users',
    dependencies: ['permissions'],
    seedFunction: seedProviderUsers,
    description: 'Utilisateurs prestataires',
    priority: 2
  },

  // 3. Seeds v√©rifications (priorit√© 3)
  {
    name: 'deliverer-documents',
    category: 'verifications',
    dependencies: ['deliverer-users'],
    seedFunction: seedDelivererDocuments,
    description: 'Documents des livreurs',
    priority: 3
  },
  {
    name: 'provider-documents',
    category: 'verifications',
    dependencies: ['provider-users'],
    seedFunction: seedProviderDocuments,
    description: 'Documents des prestataires',
    priority: 3
  },
  {
    name: 'merchant-documents',
    category: 'verifications',
    dependencies: ['merchant-users'],
    seedFunction: seedMerchantDocuments,
    description: 'Documents des commer√ßants',
    priority: 3
  },
  {
    name: 'verification-states',
    category: 'verifications',
    dependencies: ['deliverer-documents', 'provider-documents', 'merchant-documents'],
    seedFunction: seedVerificationStates,
    description: '√âtats des v√©rifications',
    priority: 3
  },
  {
    name: 'verification-history',
    category: 'verifications',
    dependencies: ['verification-states'],
    seedFunction: seedVerificationHistory,
    description: 'Historique des v√©rifications',
    priority: 3
  },

  // 4. Seeds infrastructure (priorit√© 4)
  {
    name: 'warehouses',
    category: 'storage',
    dependencies: [],
    seedFunction: seedWarehouses,
    description: 'Entrep√¥ts de stockage',
    priority: 4
  },

  // 5. Seeds financiers (priorit√© 5)
  {
    name: 'wallets',
    category: 'financial',
    dependencies: ['deliverer-users', 'provider-users', 'merchant-users'],
    seedFunction: seedWallets,
    description: 'Portefeuilles utilisateurs et transactions',
    priority: 5
  },
  {
    name: 'commissions',
    category: 'financial',
    dependencies: [],
    seedFunction: seedCommissions,
    description: 'Taux de commission et promotions',
    priority: 5
  },
  {
    name: 'payments',
    category: 'financial',
    dependencies: ['client-users', 'commissions'],
    seedFunction: seedPayments,
    description: 'Paiements Stripe et m√©thodes',
    priority: 5
  },
  {
    name: 'invoices',
    category: 'financial',
    dependencies: ['deliverer-users', 'provider-users', 'merchant-users', 'client-users'],
    seedFunction: seedInvoices,
    description: 'Factures et lignes de d√©tail',
    priority: 5
  },
  {
    name: 'billing-cycles',
    category: 'financial',
    dependencies: ['wallets', 'payments', 'invoices'],
    seedFunction: seedBillingCycles,
    description: 'Cycles de facturation et rappels',
    priority: 5
  },

  // 6. Seeds sp√©cifiques
  {
    name: 'service-types',
    category: 'services',
    dependencies: ['service-categories'],
    seedFunction: seedServiceTypes,
    description: 'Types de services d√©taill√©s',
    priority: 6
  },
  {
    name: 'provider-availability',
    category: 'services',
    dependencies: ['service-types'],
    seedFunction: seedProviderAvailability,
    description: 'Disponibilit√©s des prestataires',
    priority: 6
  },
  {
    name: 'service-ratings',
    category: 'services',
    dependencies: ['provider-availability'],
    seedFunction: seedServiceRatings,
    description: '√âvaluations de services',
    priority: 6
  },
  {
    name: 'provider-services',
    category: 'services',
    dependencies: ['provider-users', 'service-categories'],
    seedFunction: seedProviderServices,
    description: 'Services propos√©s par les prestataires',
    priority: 6
  },
  {
    name: 'service-bookings',
    category: 'services',
    dependencies: ['provider-services', 'client-users'],
    seedFunction: seedServiceBookings,
    description: 'R√©servations de services',
    priority: 7
  },

  // 7. Seeds d'annonces (priorit√© 7)
  {
    name: 'client-announcements',
    category: 'announcements',
    dependencies: ['client-users'],
    seedFunction: seedClientAnnouncements,
    description: 'Annonces des clients',
    priority: 7
  },
  {
    name: 'merchant-announcements',
    category: 'announcements',
    dependencies: ['merchant-users'],
    seedFunction: seedMerchantAnnouncements,
    description: 'Annonces des commer√ßants',
    priority: 7
  },

  // 8. Seeds de notifications (priorit√© 8)
  {
    name: 'notification-templates',
    category: 'notifications',
    dependencies: [],
    seedFunction: seedNotificationTemplates,
    description: 'Mod√®les de notifications',
    priority: 8
  }
];

/**
 * Options de ligne de commande
 */
interface CLIOptions {
  categories?: string[];
  seeds?: string[];
  clean?: boolean;
  force?: boolean;
  verbose?: boolean;
  dryRun?: boolean;
  validate?: boolean;
}

/**
 * Orchestrateur principal des seeds EcoDeli
 */
class SeedOrchestrator {
  private prisma: PrismaClient;
  private logger: SeedLogger;
  private options: CLIOptions;

  constructor(options: CLIOptions = {}) {
    this.prisma = new PrismaClient();
    this.logger = new SeedLogger(options.verbose || false);
    this.options = options;
  }

  /**
   * Point d'entr√©e principal
   */
  async run(): Promise<void> {
    try {
      this.logger.info('ORCHESTRATOR', 'üöÄ D√©marrage du syst√®me de seeds EcoDeli');
      this.logger.info('ORCHESTRATOR', `üìä Configuration: ${JSON.stringify(defaultSeedConfig.quantities, null, 2)}`);

      if (this.options.dryRun) {
        await this.dryRun();
        return;
      }

      if (this.options.validate) {
        await this.validateOnly();
        return;
      }

      // Nettoyer la base si demand√©
      if (this.options.clean) {
        await this.cleanDatabase();
      }

      // R√©soudre les d√©pendances et ex√©cuter les seeds
      const seedsToRun = this.resolveDependencies();
      await this.executeSeedsInOrder(seedsToRun);

      // Validation finale
      await this.finalValidation();

      this.logger.success('ORCHESTRATOR', '‚úÖ Tous les seeds ont √©t√© ex√©cut√©s avec succ√®s');

    } catch (error: any) {
      this.logger.error('ORCHESTRATOR', `‚ùå Erreur fatale: ${error.message}`);
      throw error;
    } finally {
      await this.prisma.$disconnect();
    }
  }

  /**
   * Mode dry-run : affiche ce qui serait ex√©cut√© sans rien faire
   */
  private async dryRun(): Promise<void> {
    this.logger.info('DRY_RUN', 'üîç Mode simulation - aucune modification ne sera effectu√©e');
    
    const seedsToRun = this.resolveDependencies();
    
    this.logger.info('DRY_RUN', `üìã ${seedsToRun.length} seeds seraient ex√©cut√©s dans cet ordre:`);
    
    seedsToRun.forEach((seed, index) => {
      this.logger.info('DRY_RUN', `${index + 1}. [${seed.category}] ${seed.name} - ${seed.description}`);
      if (seed.dependencies.length > 0) {
        this.logger.info('DRY_RUN', `   D√©pendances: ${seed.dependencies.join(', ')}`);
      }
    });

    this.logger.success('DRY_RUN', '‚úÖ Simulation termin√©e');
  }

  /**
   * Mode validation uniquement
   */
  private async validateOnly(): Promise<void> {
    this.logger.info('VALIDATION', 'üîç Mode validation uniquement');
    
    const validator = createSeedValidator(this.prisma, this.logger);
    
    const validationOptions: ValidationOptions = {
      categories: this.options.categories,
      verbose: true,
      strict: true
    };

    const stats = await validator.validate(validationOptions);
    
    if (stats.failedRules > 0) {
      throw new Error(`Validation √©chou√©e: ${stats.failedRules} r√®gles non respect√©es`);
    }
    
    this.logger.success('VALIDATION', '‚úÖ Toutes les validations sont pass√©es');
  }

  /**
   * R√©sout les d√©pendances et retourne l'ordre d'ex√©cution
   */
  private resolveDependencies(): SeedDefinition[] {
    let availableSeeds = [...SEED_DEFINITIONS];

    // Filtrer par cat√©gories si sp√©cifi√©
    if (this.options.categories && this.options.categories.length > 0) {
      availableSeeds = availableSeeds.filter(seed => 
        this.options.categories!.includes(seed.category)
      );
    }

    // Filtrer par seeds sp√©cifiques si sp√©cifi√©
    if (this.options.seeds && this.options.seeds.length > 0) {
      availableSeeds = availableSeeds.filter(seed => 
        this.options.seeds!.includes(seed.name)
      );
    }

    // Tri topologique pour r√©soudre les d√©pendances
    const resolved: SeedDefinition[] = [];
    const visiting = new Set<string>();
    const visited = new Set<string>();

    const visit = (seedName: string) => {
      if (visited.has(seedName)) return;
      if (visiting.has(seedName)) {
        throw new Error(`D√©pendance circulaire d√©tect√©e impliquant: ${seedName}`);
      }

      const seed = availableSeeds.find(s => s.name === seedName);
      if (!seed) {
        throw new Error(`Seed non trouv√©: ${seedName}`);
      }

      visiting.add(seedName);

      // Visiter les d√©pendances d'abord
      for (const dep of seed.dependencies) {
        visit(dep);
      }

      visiting.delete(seedName);
      visited.add(seedName);
      resolved.push(seed);
    };

    // Visiter tous les seeds disponibles
    for (const seed of availableSeeds) {
      visit(seed.name);
    }

    // Trier par priorit√© en cas d'√©galit√© de d√©pendances
    return resolved.sort((a, b) => a.priority - b.priority);
  }

  /**
   * Ex√©cute les seeds dans l'ordre r√©solu
   */
  private async executeSeedsInOrder(seeds: SeedDefinition[]): Promise<void> {
    this.logger.info('EXECUTION', `üìã Ex√©cution de ${seeds.length} seeds dans l'ordre des d√©pendances`);

    const results: { [key: string]: SeedResult } = {};
    let totalCreated = 0;
    let totalErrors = 0;

    for (let i = 0; i < seeds.length; i++) {
      const seed = seeds[i];
      
      this.logger.info('EXECUTION', `[${i + 1}/${seeds.length}] Ex√©cution: ${seed.name}`);
      
      try {
        const result = await seed.seedFunction(
          this.prisma, 
          this.logger, 
          {
            clean: this.options.clean,
            force: this.options.force,
            verbose: this.options.verbose
          }
        );

        results[seed.name] = result;
        totalCreated += result.created;
        totalErrors += result.errors;

        if (result.errors > 0) {
          this.logger.warning('EXECUTION', 
            `‚ö†Ô∏è ${seed.name} termin√© avec ${result.errors} erreurs`);
        } else {
          this.logger.success('EXECUTION', 
            `‚úÖ ${seed.name} termin√©: ${result.created} cr√©√©s, ${result.skipped} ignor√©s`);
        }

      } catch (error: any) {
        this.logger.error('EXECUTION', `‚ùå √âchec du seed ${seed.name}: ${error.message}`);
        totalErrors++;
        
        // Continuer avec les autres seeds ou s'arr√™ter selon la configuration
        if (!this.options.force) {
          throw new Error(`Arr√™t suite √† l'√©chec du seed: ${seed.name}`);
        }
      }
    }

    // R√©sum√© final
    this.logger.info('EXECUTION', 'üìä R√©sum√© de l\'ex√©cution:');
    this.logger.info('EXECUTION', `   ‚Ä¢ Total cr√©√©: ${totalCreated} entit√©s`);
    this.logger.info('EXECUTION', `   ‚Ä¢ Total erreurs: ${totalErrors}`);
    
    Object.entries(results).forEach(([name, result]) => {
      this.logger.info('EXECUTION', 
        `   ‚Ä¢ ${name}: ${result.created} cr√©√©s, ${result.skipped} ignor√©s, ${result.errors} erreurs`);
    });
  }

  /**
   * Nettoie la base de donn√©es
   */
  private async cleanDatabase(): Promise<void> {
    this.logger.warning('CLEAN', 'üßπ Nettoyage de la base de donn√©es...');
    
    if (!this.options.force) {
      throw new Error('Le nettoyage n√©cessite l\'option --force pour √©viter les suppressions accidentelles');
    }

    const cleaner = createSeedCleaner(this.prisma, this.logger);
    
    const cleanOptions: CleanOptions = {
      categories: this.options.categories,
      force: this.options.force,
      dryRun: this.options.dryRun,
      preserveUsers: false
    };

    try {
      const stats = await cleaner.clean(cleanOptions);
      this.logger.success('CLEAN', 
        `‚úÖ Nettoyage termin√©: ${stats.recordsDeleted} enregistrements supprim√©s de ${stats.tablesProcessed} tables`
      );
    } catch (error: any) {
      this.logger.error('CLEAN', `‚ùå Erreur lors du nettoyage: ${error.message}`);
      throw error;
    }
  }

  /**
   * Validation finale du syst√®me
   */
  private async finalValidation(): Promise<void> {
    this.logger.info('VALIDATION', 'üîç Validation finale du syst√®me...');
    
    const validator = createSeedValidator(this.prisma, this.logger);
    
    const validationOptions: ValidationOptions = {
      categories: this.options.categories,
      verbose: this.options.verbose,
      strict: false
    };

    try {
      const stats = await validator.validate(validationOptions);
      
      if (stats.failedRules === 0) {
        this.logger.success('VALIDATION', 
          `‚úÖ Validation r√©ussie: ${stats.passedRules}/${stats.totalRules} r√®gles pass√©es`
        );
      } else {
        this.logger.warning('VALIDATION', 
          `‚ö†Ô∏è Validation partielle: ${stats.failedRules} r√®gles √©chou√©es sur ${stats.totalRules}`
        );
      }
    } catch (error: any) {
      this.logger.error('VALIDATION', `‚ùå Erreur lors de la validation: ${error.message}`);
    }
  }
}

/**
 * Interface CLI
 */
async function main() {
  const args = process.argv.slice(2);
  const options: CLIOptions = {};

  // Parser les arguments
  for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    
    switch (arg) {
      case '--categories':
        options.categories = args[++i]?.split(',') || [];
        break;
      case '--seeds':
        options.seeds = args[++i]?.split(',') || [];
        break;
      case '--clean':
        options.clean = true;
        break;
      case '--force':
        options.force = true;
        break;
      case '--verbose':
        options.verbose = true;
        break;
      case '--dry-run':
        options.dryRun = true;
        break;
      case '--validate':
        options.validate = true;
        break;
      case '--help':
        printHelp();
        process.exit(0);
        break;
    }
  }

  const orchestrator = new SeedOrchestrator(options);
  await orchestrator.run();
}

/**
 * Affiche l'aide
 */
function printHelp() {
  console.log(`
üå± EcoDeli Seeds Orchestrator

Usage: pnpm seed:all [options]

Options:
  --categories <list>   Ex√©cuter seulement certaines cat√©gories (base,users,storage,etc.)
  --seeds <list>        Ex√©cuter seulement certains seeds sp√©cifiques
  --clean              Nettoyer la base avant d'ex√©cuter les seeds
  --force              Forcer la recr√©ation m√™me si les donn√©es existent
  --verbose            Affichage d√©taill√©
  --dry-run            Simulation sans modification
  --validate           Validation uniquement
  --help               Afficher cette aide

Exemples:
  pnpm seed:all                           # Ex√©cuter tous les seeds
  pnpm seed:all --categories base,users   # Seulement base et utilisateurs
  pnpm seed:all --seeds permissions       # Seulement les permissions
  pnpm seed:all --clean --force           # Nettoyer et forcer la recr√©ation
  pnpm seed:all --dry-run                 # Voir ce qui serait ex√©cut√©
  pnpm seed:all --validate                # Valider l'√©tat actuel
`);
}

// Ex√©cuter automatiquement
console.log('üöÄ D√©marrage du script seeds...');
main().catch((error) => {
  console.error('‚ùå Erreur fatale:', error);
  console.error(error.stack);
  process.exit(1);
});

export { SeedOrchestrator, SEED_DEFINITIONS }; 