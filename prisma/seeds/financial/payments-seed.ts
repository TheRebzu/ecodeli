import { PrismaClient, UserRole, PaymentStatus } from '@prisma/client';
import { SeedLogger } from '../utils/seed-logger';
import { SeedResult, SeedOptions, getRandomElement, getRandomDate } from '../utils/seed-helpers';
import { faker } from '@faker-js/faker';

/**
 * Interface pour d√©finir un paiement
 */
interface PaymentData {
  amount: number;
  currency: string;
  status: PaymentStatus;
  description: string;
  userId: string;
  serviceType: string;
  commissionAmount: number;
  taxAmount: number;
}

/**
 * Seed des paiements EcoDeli
 * Cr√©e des paiements Stripe avec diff√©rents statuts et m√©thodes
 */
export async function seedPayments(
  prisma: PrismaClient,
  logger: SeedLogger,
  options: SeedOptions = {}
): Promise<SeedResult> {
  logger.startSeed('PAYMENTS');
  
  const result: SeedResult = {
    entity: 'payments',
    created: 0,
    skipped: 0,
    errors: 0
  };

  // R√©cup√©rer tous les utilisateurs clients (qui effectuent des paiements)
  const clients = await prisma.user.findMany({
    where: { 
      role: UserRole.CLIENT,
      status: 'ACTIVE'
    }
  });

  if (clients.length === 0) {
    logger.warning('PAYMENTS', 'Aucun client trouv√© - ex√©cuter d\'abord les seeds utilisateurs');
    return result;
  }

  // V√©rifier si des paiements existent d√©j√†
  const existingPayments = await prisma.payment.count();
  
  if (existingPayments > 0 && !options.force) {
    logger.warning('PAYMENTS', `${existingPayments} paiements d√©j√† pr√©sents - utiliser force:true pour recr√©er`);
    result.skipped = existingPayments;
    return result;
  }

  // Nettoyer si force activ√©
  if (options.force) {
    await prisma.payment.deleteMany({});
    logger.database('NETTOYAGE', 'payments', 0);
  }

  // Types de services avec prix r√©alistes (en euros)
  const SERVICE_TYPES = {
    DELIVERY: { 
      minPrice: 3.5, 
      maxPrice: 25, 
      commission: 0.15,
      description: 'Livraison'
    },
    PLUMBING: { 
      minPrice: 45, 
      maxPrice: 300, 
      commission: 0.12,
      description: 'Plomberie'
    },
    ELECTRICITY: { 
      minPrice: 60, 
      maxPrice: 400, 
      commission: 0.12,
      description: '√âlectricit√©'
    },
    CLEANING: { 
      minPrice: 25, 
      maxPrice: 120, 
      commission: 0.10,
      description: 'Nettoyage'
    },
    IT_SUPPORT: { 
      minPrice: 40, 
      maxPrice: 200, 
      commission: 0.15,
      description: 'Support informatique'
    },
    GARDENING: { 
      minPrice: 35, 
      maxPrice: 180, 
      commission: 0.10,
      description: 'Jardinage'
    }
  };

  // M√©thodes de paiement disponibles
  const PAYMENT_METHODS = [
    'card', 'sepa_debit', 'bancontact', 'ideal', 'giropay', 'sofort'
  ];

  // Distribution des statuts (r√©aliste)
  const STATUS_DISTRIBUTION = {
    [PaymentStatus.COMPLETED]: 0.85,  // 85% r√©ussis
    [PaymentStatus.PENDING]: 0.08,    // 8% en attente
    [PaymentStatus.FAILED]: 0.05,     // 5% √©chou√©s
    [PaymentStatus.CANCELLED]: 0.02   // 2% annul√©s
  };

  // G√©n√©rer un historique de 6 mois de paiements
  const startDate = new Date();
  startDate.setMonth(startDate.getMonth() - 6);

  let totalPayments = 0;
  const paymentsPerClient = faker.number.int({ min: 3, max: 25 }); // Variation par client

  for (const client of clients) {
    try {
      logger.progress('PAYMENTS', totalPayments + 1, clients.length * paymentsPerClient, 
        `Cr√©ation paiements: ${client.name}`);

      // Nombre de paiements pour ce client (selon profil)
      const clientPaymentCount = faker.number.int({ 
        min: Math.floor(paymentsPerClient * 0.3), 
        max: Math.ceil(paymentsPerClient * 1.5) 
      });

      for (let i = 0; i < clientPaymentCount; i++) {
        try {
          // S√©lectionner un type de service al√©atoire
          const serviceType = getRandomElement(Object.keys(SERVICE_TYPES));
          const serviceConfig = SERVICE_TYPES[serviceType as keyof typeof SERVICE_TYPES];

          // Calculer le montant selon le service
          const baseAmount = faker.number.float({ 
            min: serviceConfig.minPrice, 
            max: serviceConfig.maxPrice
          });

          // Arrondir √† 2 d√©cimales
          const amount = Math.round(baseAmount * 100) / 100;

          // Calculer la commission et la TVA
          const commissionRate = serviceConfig.commission;
          const commissionAmount = Math.round(amount * commissionRate * 100) / 100;
          const taxRate = 0.20; // TVA fran√ßaise 20%
          const taxAmount = Math.round(amount * taxRate * 100) / 100;

          // D√©terminer le statut selon la distribution
          const statusRandom = Math.random();
          let status = PaymentStatus.SUCCEEDED;
          let cumulative = 0;
          
          for (const [paymentStatus, probability] of Object.entries(STATUS_DISTRIBUTION)) {
            cumulative += probability;
            if (statusRandom <= cumulative) {
              status = paymentStatus as PaymentStatus;
              break;
            }
          }

          // Date de cr√©ation al√©atoire dans les 6 derniers mois
          const createdAt = faker.date.between({
            from: startDate,
            to: new Date()
          });

          // G√©n√©ration des IDs Stripe r√©alistes
          const stripePaymentId = status !== PaymentStatus.FAILED ? 
            `pi_${faker.string.alphanumeric(24)}` : null;
          const paymentIntentId = `pi_${faker.string.alphanumeric(24)}`;

          // S√©lectionner une m√©thode de paiement
          const paymentMethod = getRandomElement(PAYMENT_METHODS);

          // Cr√©er le paiement
          await prisma.payment.create({
            data: {
              amount: amount,
              currency: 'EUR',
              status: status,
              description: `${serviceConfig.description} - ${generatePaymentDescription(serviceType)}`,
              userId: client.id,
              stripePaymentId: stripePaymentId,
              paymentIntentId: paymentIntentId,
              commissionAmount: commissionAmount,
              taxAmount: taxAmount,
              taxRate: taxRate,
              paymentMethodType: paymentMethod,
              paymentProvider: 'STRIPE',
              createdAt: createdAt,
              capturedAt: status === PaymentStatus.SUCCEEDED ? createdAt : null,
              errorMessage: status === PaymentStatus.FAILED ? generateFailureReason() : null,
              receiptUrl: status === PaymentStatus.SUCCEEDED ? 
                `https://pay.stripe.com/receipts/${faker.string.alphanumeric(32)}` : null,
              processingFee: Math.round(amount * 0.029 * 100) / 100, // Frais Stripe 2.9%
              paymentReference: `PAY-${faker.string.alphanumeric(8).toUpperCase()}`,
              ipAddress: faker.internet.ip(),
              metadata: {
                serviceType: serviceType,
                clientId: client.id,
                platform: 'web',
                userAgent: faker.internet.userAgent()
              }
            }
          });

          totalPayments++;
          result.created++;

        } catch (error: any) {
          logger.error('PAYMENTS', `‚ùå Erreur cr√©ation paiement pour ${client.name}: ${error.message}`);
          result.errors++;
        }
      }

    } catch (error: any) {
      logger.error('PAYMENTS', `‚ùå Erreur traitement client ${client.name}: ${error.message}`);
      result.errors++;
    }
  }

  // Validation des paiements cr√©√©s
  const finalPayments = await prisma.payment.findMany({
    include: { user: true }
  });
  
  if (finalPayments.length >= totalPayments - result.errors) {
    logger.validation('PAYMENTS', 'PASSED', `${finalPayments.length} paiements cr√©√©s avec succ√®s`);
  } else {
    logger.validation('PAYMENTS', 'FAILED', `Attendu: ${totalPayments}, Cr√©√©: ${finalPayments.length}`);
  }

  // Statistiques par statut
  const byStatus = finalPayments.reduce((acc: Record<string, number>, payment) => {
    acc[payment.status] = (acc[payment.status] || 0) + 1;
    return acc;
  }, {});

  logger.info('PAYMENTS', `üìä Paiements par statut: ${JSON.stringify(byStatus)}`);

  // Statistiques financi√®res
  const totalRevenue = finalPayments
    .filter(p => p.status === PaymentStatus.SUCCEEDED)
    .reduce((sum, payment) => sum + parseFloat(payment.amount.toString()), 0);

  const totalCommissions = finalPayments
    .filter(p => p.status === PaymentStatus.SUCCEEDED && p.commissionAmount)
    .reduce((sum, payment) => sum + parseFloat(payment.commissionAmount?.toString() || '0'), 0);

  logger.info('PAYMENTS', `üí∞ Chiffre d'affaires: ${totalRevenue.toFixed(2)} EUR`);
  logger.info('PAYMENTS', `üíº Commissions totales: ${totalCommissions.toFixed(2)} EUR`);

  // Taux de r√©ussite
  const successfulPayments = finalPayments.filter(p => p.status === PaymentStatus.SUCCEEDED);
  const successRate = Math.round((successfulPayments.length / finalPayments.length) * 100);
  logger.info('PAYMENTS', `‚úÖ Taux de r√©ussite: ${successRate}% (${successfulPayments.length}/${finalPayments.length})`);

  // R√©partition par m√©thode de paiement
  const byPaymentMethod = finalPayments.reduce((acc: Record<string, number>, payment) => {
    const method = payment.paymentMethodType || 'unknown';
    acc[method] = (acc[method] || 0) + 1;
    return acc;
  }, {});

  logger.info('PAYMENTS', `üí≥ M√©thodes de paiement: ${JSON.stringify(byPaymentMethod)}`);

  // Montant moyen par transaction
  const avgAmount = totalRevenue / successfulPayments.length;
  logger.info('PAYMENTS', `üìà Montant moyen: ${avgAmount.toFixed(2)} EUR`);

  logger.endSeed('PAYMENTS', result);
  return result;
}

/**
 * G√©n√®re une description d√©taill√©e selon le type de service
 */
function generatePaymentDescription(serviceType: string): string {
  const descriptions: { [key: string]: string[] } = {
    DELIVERY: [
      'Course express centre-ville',
      'Livraison alimentaire restaurant',
      'Transport colis urgent', 
      'Livraison meuble domicile',
      'Course pharmacie',
      'Livraison a√©roport'
    ],
    PLUMBING: [
      'R√©paration fuite salle de bain',
      'Installation nouveau lavabo',
      'D√©bouchage canalisation',
      'Remplacement chauffe-eau',
      'R√©paration robinetterie',
      'Installation lave-vaisselle'
    ],
    ELECTRICITY: [
      'Installation prises √©lectriques',
      'R√©paration tableau √©lectrique',
      'Installation √©clairage LED',
      'D√©pannage panne √©lectrique',
      'Installation borne v√©hicule √©lectrique',
      'Mise aux normes installation'
    ],
    CLEANING: [
      'Nettoyage appartement 3 pi√®ces',
      'M√©nage bureaux 50m¬≤',
      'Nettoyage apr√®s travaux',
      'Nettoyage vitres immeuble',
      'D√©sinfection locale commercial',
      'Nettoyage fin de bail'
    ],
    IT_SUPPORT: [
      'D√©pannage ordinateur portable',
      'Installation logiciel professionnel',
      'R√©cup√©ration donn√©es disque dur',
      'Configuration r√©seau WiFi',
      'Formation logiciel comptable',
      'Installation antivirus entreprise'
    ],
    GARDENING: [
      'Tonte pelouse 200m¬≤',
      'Taille haies et arbustes',
      'Plantation massif fleurs',
      '√âlagage arbre fruitier',
      'Am√©nagement jardin terrasse',
      'Traitement parasites v√©g√©taux'
    ]
  };

  const serviceDescriptions = descriptions[serviceType] || ['Service standard'];
  return getRandomElement(serviceDescriptions);
}

/**
 * G√©n√®re un motif d'√©chec de paiement r√©aliste
 */
function generateFailureReason(): string {
  const failureReasons = [
    'Carte bancaire expir√©e',
    'Fonds insuffisants sur le compte',
    'Paiement refus√© par la banque',
    'Carte bancaire signal√©e vol√©e',
    'Limite de paiement d√©pass√©e',
    'Authentification 3D Secure √©chou√©e',
    'Num√©ro de carte invalide',
    'Code de s√©curit√© incorrect',
    'Paiement bloqu√© par d√©tection fraude',
    'Probl√®me technique temporaire'
  ];

  return getRandomElement(failureReasons);
}

/**
 * Valide l'int√©grit√© des paiements
 */
export async function validatePayments(
  prisma: PrismaClient,
  logger: SeedLogger
): Promise<boolean> {
  logger.info('VALIDATION', 'üîç Validation des paiements...');
  
  let isValid = true;

  // V√©rifier les paiements
  const payments = await prisma.payment.findMany({
    include: { user: true }
  });

  if (payments.length === 0) {
    logger.error('VALIDATION', '‚ùå Aucun paiement trouv√©');
    isValid = false;
  } else {
    logger.success('VALIDATION', `‚úÖ ${payments.length} paiements trouv√©s`);
  }

  // V√©rifier que tous les paiements r√©ussis ont un stripePaymentId
  const successfulWithoutStripeId = payments.filter(p => 
    p.status === PaymentStatus.SUCCEEDED && !p.stripePaymentId
  );

  if (successfulWithoutStripeId.length > 0) {
    logger.warning('VALIDATION', `‚ö†Ô∏è ${successfulWithoutStripeId.length} paiements r√©ussis sans Stripe ID`);
  }

  // V√©rifier que les paiements √©chou√©s ont un message d'erreur
  const failedWithoutError = payments.filter(p => 
    p.status === PaymentStatus.FAILED && !p.errorMessage
  );

  if (failedWithoutError.length > 0) {
    logger.warning('VALIDATION', `‚ö†Ô∏è ${failedWithoutError.length} paiements √©chou√©s sans message d'erreur`);
  }

  // V√©rifier la coh√©rence des commissions
  const invalidCommissions = payments.filter(p => {
    if (!p.commissionAmount) return false;
    const expectedCommission = parseFloat(p.amount.toString()) * 0.15; // Max commission
    const actualCommission = parseFloat(p.commissionAmount.toString());
    return actualCommission > expectedCommission;
  });

  if (invalidCommissions.length > 0) {
    logger.warning('VALIDATION', `‚ö†Ô∏è ${invalidCommissions.length} paiements avec commissions anormales`);
  }

  logger.success('VALIDATION', '‚úÖ Validation des paiements termin√©e');
  return isValid;
} 