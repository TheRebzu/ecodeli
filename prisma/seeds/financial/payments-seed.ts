import { PrismaClient, UserRole, PaymentStatus } from '@prisma/client';
import { SeedLogger } from '../utils/seed-logger';
import { SeedResult, SeedOptions, getRandomElement, getRandomDate } from '../utils/seed-helpers';
import { faker } from '@faker-js/faker';

/**
 * Interface pour d√©finir un paiement
 */
interface PaymentData {
  amount: number;
  currency: string;
  status: PaymentStatus;
  description: string;
  userId: string;
  serviceType: string;
  commissionAmount: number;
  taxAmount: number;
}

/**
 * Seed des paiements EcoDeli
 * Cr√©e des paiements Stripe avec diff√©rents statuts et m√©thodes
 */
export async function seedPayments(
  prisma: PrismaClient,
  logger: SeedLogger,
  options: SeedOptions = {}
): Promise<SeedResult> {
  logger.startSeed('PAYMENTS');
  
  const result: SeedResult = {
    entity: 'payments',
    created: 0,
    skipped: 0,
    errors: 0
  };

  // R√©cup√©rer tous les utilisateurs clients (qui effectuent des paiements)
  const clients = await prisma.user.findMany({
    where: { 
      role: UserRole.CLIENT,
      status: 'ACTIVE'
    }
  });

  if (clients.length === 0) {
    logger.warning('PAYMENTS', 'Aucun client trouv√© - ex√©cuter d\'abord les seeds utilisateurs');
    return result;
  }

  // Trouver Jean Dupont et son annonce pour cr√©er le paiement sp√©cifique
  const jeanDupont = await prisma.user.findUnique({
    where: { email: 'jean.dupont@orange.fr' }
  });

  const jeanAnnouncement = await prisma.announcement.findFirst({
    where: {
      clientId: jeanDupont?.id,
      title: { contains: 'Livraison urgente d\'un ordinateur portable vers Marseille' }
    }
  });

  const jeanDelivery = await prisma.delivery.findFirst({
    where: {
      announcementId: jeanAnnouncement?.id,
      clientId: jeanDupont?.id,
      trackingCode: 'ECO-2024-PAR-MAR-001'
    }
  });

  // V√©rifier si des paiements existent d√©j√†
  const existingPayments = await prisma.payment.count();
  
  if (existingPayments > 0 && !options.force) {
    logger.warning('PAYMENTS', `${existingPayments} paiements d√©j√† pr√©sents - utiliser force:true pour recr√©er`);
    result.skipped = existingPayments;
    return result;
  }

  // Nettoyer si force activ√©
  if (options.force) {
    await prisma.payment.deleteMany({});
    logger.database('NETTOYAGE', 'payments', 0);
  }

  // 1. CR√âER LE PAIEMENT SP√âCIFIQUE DE JEAN DUPONT
  if (jeanDupont && jeanDelivery) {
    try {
      logger.progress('PAYMENTS', 1, 1, 'Cr√©ation paiement Jean Dupont - Livraison Marseille');

      const baseAmount = 45.00; // Prix de la livraison
      const commissionRate = 0.10; // 10% de commission EcoDeli
      const commissionAmount = Math.round(baseAmount * commissionRate * 100) / 100; // 4.50‚Ç¨
      const totalAmount = baseAmount + commissionAmount; // 49.50‚Ç¨

             await prisma.payment.create({
         data: {
           amount: totalAmount,
           currency: 'EUR',
           status: PaymentStatus.COMPLETED,
           description: 'Livraison urgente ordinateur portable Paris ‚Üí Marseille',
           userId: jeanDupont.id,
           stripePaymentId: 'pi_simulated_123456789',
           paymentIntentId: 'pi_simulated_123',
           commissionAmount: commissionAmount,
           taxAmount: 0,
           taxRate: 0,
           paymentMethodType: 'card',
           paymentProvider: 'STRIPE',
           createdAt: getRandomDate(3, 4),
           updatedAt: new Date()
         }
       });

      result.created++;
      logger.success('PAYMENTS', '‚úÖ Paiement sp√©cifique Jean Dupont cr√©√© (49.50‚Ç¨)');

    } catch (error: any) {
      logger.error('PAYMENTS', `‚ùå Erreur cr√©ation paiement Jean Dupont: ${error.message}`);
      result.errors++;
    }
  }

  // 2. CR√âER L'HISTORIQUE DE PAIEMENTS DE MARIE LAURENT (3 livraisons)
  const marieLaurent = await prisma.user.findUnique({
    where: { email: 'marie.laurent@orange.fr' }
  });

  const marieHistoricalDeliveries = await prisma.delivery.findMany({
    where: {
      delivererId: marieLaurent?.id,
      status: 'DELIVERED',
      trackingCode: { in: ['ECO-2024-PAR-LYO-847', 'ECO-2024-TOU-PAR-623', 'ECO-2024-MAR-NIC-391'] }
    },
    include: { announcement: true, client: true }
  });

  for (const delivery of marieHistoricalDeliveries) {
    try {
      logger.progress('PAYMENTS', result.created + 1, result.created + marieHistoricalDeliveries.length + 1, 
        `Cr√©ation paiement historique ${delivery.trackingCode}`);

      const baseAmount = delivery.price; // Prix de la livraison
      const commissionRate = 0.10; // 10% de commission
      const commissionAmount = Math.round(baseAmount * commissionRate * 100) / 100;
      const totalAmount = baseAmount + commissionAmount;

             await prisma.payment.create({
         data: {
           amount: totalAmount,
           currency: 'EUR',
           status: PaymentStatus.COMPLETED,
           description: `Livraison ${delivery.trackingCode} par Marie Laurent`,
           userId: delivery.clientId,
           stripePaymentId: `pi_${faker.string.alphanumeric(24)}`,
           paymentIntentId: `pi_${faker.string.alphanumeric(24)}`,
           commissionAmount: commissionAmount,
           taxAmount: 0,
           taxRate: 0,
           paymentMethodType: 'card',
           paymentProvider: 'STRIPE',
           createdAt: delivery.createdAt,
           updatedAt: delivery.updatedAt
         }
       });

      result.created++;

    } catch (error: any) {
      logger.error('PAYMENTS', `‚ùå Erreur cr√©ation paiement ${delivery.trackingCode}: ${error.message}`);
      result.errors++;
    }
  }

  // Validation des paiements cr√©√©s
  const finalPayments = await prisma.payment.findMany({
    include: { user: true }
  });
  
  if (finalPayments.length >= result.created - result.errors) {
    logger.validation('PAYMENTS', 'PASSED', `${finalPayments.length} paiements cr√©√©s avec succ√®s`);
  } else {
    logger.validation('PAYMENTS', 'FAILED', `Attendu: ${result.created}, Cr√©√©: ${finalPayments.length}`);
  }

  // Statistiques par statut
  const byStatus = finalPayments.reduce((acc: Record<string, number>, payment) => {
    acc[payment.status] = (acc[payment.status] || 0) + 1;
    return acc;
  }, {});

  logger.info('PAYMENTS', `üìä Paiements par statut: ${JSON.stringify(byStatus)}`);

  // Statistiques financi√®res
  const totalRevenue = finalPayments
    .filter(p => p.status === PaymentStatus.SUCCEEDED)
    .reduce((sum, payment) => sum + parseFloat(payment.amount.toString()), 0);

  const totalCommissions = finalPayments
    .filter(p => p.status === PaymentStatus.SUCCEEDED && p.commissionAmount)
    .reduce((sum, payment) => sum + parseFloat(payment.commissionAmount?.toString() || '0'), 0);

  logger.info('PAYMENTS', `üí∞ Chiffre d'affaires: ${totalRevenue.toFixed(2)} EUR`);
  logger.info('PAYMENTS', `üíº Commissions totales: ${totalCommissions.toFixed(2)} EUR`);

  // Taux de r√©ussite
  const successfulPayments = finalPayments.filter(p => p.status === PaymentStatus.SUCCEEDED);
  const successRate = Math.round((successfulPayments.length / finalPayments.length) * 100);
  logger.info('PAYMENTS', `‚úÖ Taux de r√©ussite: ${successRate}% (${successfulPayments.length}/${finalPayments.length})`);

  // R√©partition par m√©thode de paiement
  const byPaymentMethod = finalPayments.reduce((acc: Record<string, number>, payment) => {
    const method = payment.paymentMethodType || 'unknown';
    acc[method] = (acc[method] || 0) + 1;
    return acc;
  }, {});

  logger.info('PAYMENTS', `üí≥ M√©thodes de paiement: ${JSON.stringify(byPaymentMethod)}`);

  // Montant moyen par transaction
  const avgAmount = totalRevenue / successfulPayments.length;
  logger.info('PAYMENTS', `üìà Montant moyen: ${avgAmount.toFixed(2)} EUR`);

  logger.endSeed('PAYMENTS', result);
  return result;
}

/**
 * G√©n√®re une description d√©taill√©e selon le type de service
 */
function generatePaymentDescription(serviceType: string): string {
  const descriptions: { [key: string]: string[] } = {
    DELIVERY: [
      'Course express centre-ville',
      'Livraison alimentaire restaurant',
      'Transport colis urgent', 
      'Livraison meuble domicile',
      'Course pharmacie',
      'Livraison a√©roport'
    ],
    PLUMBING: [
      'R√©paration fuite salle de bain',
      'Installation nouveau lavabo',
      'D√©bouchage canalisation',
      'Remplacement chauffe-eau',
      'R√©paration robinetterie',
      'Installation lave-vaisselle'
    ],
    ELECTRICITY: [
      'Installation prises √©lectriques',
      'R√©paration tableau √©lectrique',
      'Installation √©clairage LED',
      'D√©pannage panne √©lectrique',
      'Installation borne v√©hicule √©lectrique',
      'Mise aux normes installation'
    ],
    CLEANING: [
      'Nettoyage appartement 3 pi√®ces',
      'M√©nage bureaux 50m¬≤',
      'Nettoyage apr√®s travaux',
      'Nettoyage vitres immeuble',
      'D√©sinfection locale commercial',
      'Nettoyage fin de bail'
    ],
    IT_SUPPORT: [
      'D√©pannage ordinateur portable',
      'Installation logiciel professionnel',
      'R√©cup√©ration donn√©es disque dur',
      'Configuration r√©seau WiFi',
      'Formation logiciel comptable',
      'Installation antivirus entreprise'
    ],
    GARDENING: [
      'Tonte pelouse 200m¬≤',
      'Taille haies et arbustes',
      'Plantation massif fleurs',
      '√âlagage arbre fruitier',
      'Am√©nagement jardin terrasse',
      'Traitement parasites v√©g√©taux'
    ]
  };

  const serviceDescriptions = descriptions[serviceType] || ['Service standard'];
  return getRandomElement(serviceDescriptions);
}

/**
 * G√©n√®re un motif d'√©chec de paiement r√©aliste
 */
function generateFailureReason(): string {
  const failureReasons = [
    'Carte bancaire expir√©e',
    'Fonds insuffisants sur le compte',
    'Paiement refus√© par la banque',
    'Carte bancaire signal√©e vol√©e',
    'Limite de paiement d√©pass√©e',
    'Authentification 3D Secure √©chou√©e',
    'Num√©ro de carte invalide',
    'Code de s√©curit√© incorrect',
    'Paiement bloqu√© par d√©tection fraude',
    'Probl√®me technique temporaire'
  ];

  return getRandomElement(failureReasons);
}

/**
 * Valide l'int√©grit√© des paiements
 */
export async function validatePayments(
  prisma: PrismaClient,
  logger: SeedLogger
): Promise<boolean> {
  logger.info('VALIDATION', 'üîç Validation des paiements...');
  
  let isValid = true;

  // V√©rifier les paiements
  const payments = await prisma.payment.findMany({
    include: { user: true }
  });

  if (payments.length === 0) {
    logger.error('VALIDATION', '‚ùå Aucun paiement trouv√©');
    isValid = false;
  } else {
    logger.success('VALIDATION', `‚úÖ ${payments.length} paiements trouv√©s`);
  }

  // V√©rifier que tous les paiements r√©ussis ont un stripePaymentId
  const successfulWithoutStripeId = payments.filter(p => 
    p.status === PaymentStatus.SUCCEEDED && !p.stripePaymentId
  );

  if (successfulWithoutStripeId.length > 0) {
    logger.warning('VALIDATION', `‚ö†Ô∏è ${successfulWithoutStripeId.length} paiements r√©ussis sans Stripe ID`);
  }

  // V√©rifier que les paiements √©chou√©s ont un message d'erreur
  const failedWithoutError = payments.filter(p => 
    p.status === PaymentStatus.FAILED && !p.errorMessage
  );

  if (failedWithoutError.length > 0) {
    logger.warning('VALIDATION', `‚ö†Ô∏è ${failedWithoutError.length} paiements √©chou√©s sans message d'erreur`);
  }

  // V√©rifier la coh√©rence des commissions
  const invalidCommissions = payments.filter(p => {
    if (!p.commissionAmount) return false;
    const expectedCommission = parseFloat(p.amount.toString()) * 0.15; // Max commission
    const actualCommission = parseFloat(p.commissionAmount.toString());
    return actualCommission > expectedCommission;
  });

  if (invalidCommissions.length > 0) {
    logger.warning('VALIDATION', `‚ö†Ô∏è ${invalidCommissions.length} paiements avec commissions anormales`);
  }

  logger.success('VALIDATION', '‚úÖ Validation des paiements termin√©e');
  return isValid;
} 