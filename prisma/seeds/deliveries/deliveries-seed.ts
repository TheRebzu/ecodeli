import { PrismaClient, UserRole, DeliveryStatus, DeliveryStatusEnum, AnnouncementStatus, AnnouncementType, AnnouncementPriority } from '@prisma/client';
import { SeedLogger } from '../utils/seed-logger';
import { SeedResult, SeedOptions, getRandomDate } from '../utils/seed-helpers';
import { faker } from '@faker-js/faker';

/**
 * Seed des livraisons EcoDeli avec suivi temps r√©el
 */
export async function seedDeliveries(
  prisma: PrismaClient,
  logger: SeedLogger,
  options: SeedOptions = {}
): Promise<SeedResult> {
  logger.startSeed('DELIVERIES');
  
  const result: SeedResult = {
    entity: 'deliveries',
    created: 0,
    skipped: 0,
    errors: 0
  };

  // R√©cup√©rer les utilisateurs cl√©s
  const jeanDupont = await prisma.user.findUnique({
    where: { email: 'jean.dupont@orange.fr' }
  });

  const marieLaurent = await prisma.user.findUnique({
    where: { email: 'marie.laurent@orange.fr' },
    include: { deliverer: true }
  });

  if (!jeanDupont || !marieLaurent) {
    logger.warning('DELIVERIES', 'Utilisateurs Jean Dupont ou Marie Laurent non trouv√©s');
    return result;
  }

  // R√©cup√©rer l'annonce de Jean Dupont et sa candidature accept√©e
  const jeanAnnouncement = await prisma.announcement.findFirst({
    where: {
      clientId: jeanDupont.id,
      title: { contains: 'Livraison urgente d\'un ordinateur portable vers Marseille' }
    }
  });

  const acceptedApplication = await prisma.deliveryApplication.findFirst({
    where: {
      announcementId: jeanAnnouncement?.id,
      delivererId: marieLaurent.id,
      status: 'ACCEPTED'
    }
  });

  if (!jeanAnnouncement || !acceptedApplication) {
    logger.warning('DELIVERIES', 'Annonce de Jean ou candidature accept√©e non trouv√©e - ex√©cuter d\'abord les seeds pr√©c√©dents');
    return result;
  }

  // V√©rifier si des livraisons existent d√©j√†
  const existingDeliveries = await prisma.delivery.count();
  
  if (existingDeliveries > 0 && !options.force) {
    logger.warning('DELIVERIES', `${existingDeliveries} livraisons d√©j√† pr√©sentes - utiliser force:true pour recr√©er`);
    result.skipped = existingDeliveries;
    return result;
  }

  // Nettoyer si force activ√©
  if (options.force) {
    await prisma.deliveryCoordinates.deleteMany({});
    await prisma.deliveryLog.deleteMany({});
    await prisma.deliveryProof.deleteMany({});
    await prisma.deliveryRating.deleteMany({});
    await prisma.delivery.deleteMany({});
    logger.database('NETTOYAGE', 'deliveries et relations', 0);
  }

  // 1. CR√âER LA LIVRAISON ACTIVE (Jean ‚Üí Marseille par Marie)
  try {
    logger.progress('DELIVERIES', 1, 4, 'Cr√©ation livraison active Jean ‚Üí Marseille');

    const pickupTime = new Date(Date.now() - (3 * 60 * 60 * 1000)); // Il y a 3 heures
    const estimatedDeliveryTime = new Date(Date.now() + (2 * 60 * 60 * 1000)); // Dans 2 heures

    const activeDelivery = await prisma.delivery.create({
      data: {
        announcementId: jeanAnnouncement.id,
        delivererId: marieLaurent.id,
        clientId: jeanDupont.id,
        status: DeliveryStatus.IN_TRANSIT,
        startTime: pickupTime,
        actualPickupTime: pickupTime,
        trackingCode: 'ECO-2024-PAR-MAR-001',
        price: 45.00,
        notes: 'Ordinateur portable neuf 3kg - Manipulation avec pr√©caution - Valeur 1200‚Ç¨',
        createdAt: getRandomDate(4, 6),
        updatedAt: new Date()
      }
    });

    // Cr√©er les logs d'√©v√©nements pour cette livraison
    await createDeliveryTimeline(prisma, activeDelivery.id, 'active', pickupTime);
    
    // Cr√©er les coordonn√©es GPS actuelles (pr√®s de Lyon sur A7)
    await createDeliveryCoordinates(prisma, activeDelivery.id, 'active');
    
    result.created++;
    logger.success('DELIVERIES', '‚úÖ Livraison active cr√©√©e avec suivi GPS');

  } catch (error: any) {
    logger.error('DELIVERIES', `‚ùå Erreur cr√©ation livraison active: ${error.message}`);
    result.errors++;
  }

  // 2. CR√âER L'HISTORIQUE DES LIVRAISONS DE MARIE (3 derni√®res)
  const historicalDeliveries = [
    {
      trackingCode: 'ECO-2024-PAR-LYO-847',
      price: 45.00,
      route: 'Paris ‚Üí Lyon',
      rating: 5,
      completedDays: 5
    },
    {
      trackingCode: 'ECO-2024-TOU-PAR-623',
      price: 38.00,
      route: 'Toulouse ‚Üí Paris',
      rating: 5,
      completedDays: 12
    },
    {
      trackingCode: 'ECO-2024-MAR-NIC-391',
      price: 52.00,
      route: 'Marseille ‚Üí Nice',
      rating: 5,
      completedDays: 18
    }
  ];

  for (let i = 0; i < historicalDeliveries.length; i++) {
    try {
      const histData = historicalDeliveries[i];
      logger.progress('DELIVERIES', i + 2, 4, `Cr√©ation livraison historique ${histData.route}`);

      const completionTime = new Date(Date.now() - (histData.completedDays * 24 * 60 * 60 * 1000));
      const startTime = new Date(completionTime.getTime() - (6 * 60 * 60 * 1000)); // 6h avant

      // Cr√©er un client al√©atoire pour cette livraison historique
      const randomClient = await prisma.user.findFirst({
        where: { role: UserRole.CLIENT },
        skip: Math.floor(Math.random() * 10)
      });

      if (!randomClient) continue;

             // Cr√©er une annonce fictive pour cette livraison
       const fictiveAnnouncement = await prisma.announcement.create({
         data: {
           title: `Livraison ${histData.route}`,
           description: `Livraison effectu√©e par Marie Laurent sur l'axe ${histData.route}`,
           status: AnnouncementStatus.COMPLETED,
           type: AnnouncementType.PACKAGE_DELIVERY,
           priority: AnnouncementPriority.MEDIUM,
           pickupAddress: 'Adresse pickup',
           pickupCity: histData.route.split(' ‚Üí ')[0],
           pickupPostalCode: '75000',
           pickupCountry: 'France',
           deliveryAddress: 'Adresse livraison',
           deliveryCity: histData.route.split(' ‚Üí ')[1],
           deliveryPostalCode: '69000',
           deliveryCountry: 'France',
           suggestedPrice: histData.price,
           priceType: 'fixed',
           currency: 'EUR',
           clientId: randomClient.id,
           createdAt: getRandomDate(histData.completedDays + 2, histData.completedDays + 5)
         }
       });

      const historicalDelivery = await prisma.delivery.create({
        data: {
          announcementId: fictiveAnnouncement.id,
          delivererId: marieLaurent.id,
          clientId: randomClient.id,
          status: DeliveryStatus.DELIVERED,
          startTime: startTime,
          completionTime: completionTime,
          actualPickupTime: startTime,
          actualDeliveryTime: completionTime,
          trackingCode: histData.trackingCode,
          price: histData.price,
          notes: `Livraison termin√©e avec succ√®s - Route ${histData.route}`,
          createdAt: getRandomDate(histData.completedDays + 1, histData.completedDays + 2),
          updatedAt: completionTime
        }
      });

      // Cr√©er la timeline compl√®te pour cette livraison
      await createDeliveryTimeline(prisma, historicalDelivery.id, 'completed', startTime, completionTime);
      
      // Cr√©er les preuves de livraison (photos)
      await createDeliveryProofs(prisma, historicalDelivery.id, histData.trackingCode);
      
      // Cr√©er les √©valuations 5 √©toiles
      await createDeliveryRatings(prisma, historicalDelivery.id, randomClient.id, marieLaurent.id, histData.rating);
      
      result.created++;

    } catch (error: any) {
      logger.error('DELIVERIES', `‚ùå Erreur cr√©ation livraison historique ${i + 1}: ${error.message}`);
      result.errors++;
    }
  }

  // Validation des livraisons cr√©√©es
  const finalDeliveries = await prisma.delivery.findMany({
    include: { 
      announcement: true,
      deliverer: true,
      client: true,
      logs: true,
      coordinates: true,
      proofs: true,
      ratings: true
    }
  });
  
  if (finalDeliveries.length >= result.created) {
    logger.validation('DELIVERIES', 'PASSED', `${finalDeliveries.length} livraison(s) cr√©√©e(s) avec succ√®s`);
  } else {
    logger.validation('DELIVERIES', 'FAILED', `Attendu: ${result.created}, Cr√©√©: ${finalDeliveries.length}`);
  }

  // Statistiques
  const activeDeliveries = finalDeliveries.filter(d => d.status === DeliveryStatus.IN_TRANSIT);
  const completedDeliveries = finalDeliveries.filter(d => d.status === DeliveryStatus.DELIVERED);
  
  logger.info('DELIVERIES', `üìä Livraisons actives: ${activeDeliveries.length}, Termin√©es: ${completedDeliveries.length}`);
  
  // Statistiques de Marie Laurent
  const marieDeliveries = finalDeliveries.filter(d => d.delivererId === marieLaurent.id);
  const marieRatings = finalDeliveries.flatMap(d => d.ratings).filter(r => r.targetId === marieLaurent.id);
  const avgRating = marieRatings.length > 0 ? 
    marieRatings.reduce((sum, r) => sum + r.rating, 0) / marieRatings.length : 0;
  
  logger.info('DELIVERIES', `‚≠ê Marie Laurent: ${marieDeliveries.length} livraisons, note moyenne: ${avgRating.toFixed(1)}/5`);
  
  // V√©rification tracking codes
  const trackingCodes = finalDeliveries.map(d => d.trackingCode);
  logger.info('DELIVERIES', `üîç Codes de suivi g√©n√©r√©s: ${trackingCodes.join(', ')}`);

  logger.endSeed('DELIVERIES', result);
  return result;
}

/**
 * Cr√©e la timeline des √©v√©nements pour une livraison
 */
async function createDeliveryTimeline(
  prisma: PrismaClient, 
  deliveryId: string, 
  type: 'active' | 'completed',
  startTime: Date,
  completionTime?: Date
) {
  const events = [];

  if (type === 'completed') {
    // Timeline compl√®te pour livraison termin√©e
    events.push(
      { status: DeliveryStatusEnum.ASSIGNED, message: 'Livraison assign√©e au livreur', time: new Date(startTime.getTime() - (30 * 60 * 1000)) },
      { status: DeliveryStatusEnum.PENDING_PICKUP, message: 'En attente de r√©cup√©ration', time: new Date(startTime.getTime() - (15 * 60 * 1000)) },
      { status: DeliveryStatusEnum.PICKED_UP, message: 'Colis r√©cup√©r√© avec succ√®s', time: startTime },
      { status: DeliveryStatusEnum.IN_TRANSIT, message: 'En cours de transport', time: new Date(startTime.getTime() + (15 * 60 * 1000)) },
      { status: DeliveryStatusEnum.NEARBY, message: 'Livreur √† proximit√©', time: new Date(completionTime!.getTime() - (10 * 60 * 1000)) },
      { status: DeliveryStatusEnum.ARRIVED, message: 'Livreur arriv√© √† destination', time: new Date(completionTime!.getTime() - (5 * 60 * 1000)) },
      { status: DeliveryStatusEnum.DELIVERED, message: 'Livraison effectu√©e avec succ√®s', time: completionTime! }
    );
  } else {
    // Timeline pour livraison active (en cours)
    events.push(
      { status: DeliveryStatusEnum.ASSIGNED, message: 'Livraison assign√©e √† Marie Laurent', time: new Date(startTime.getTime() - (45 * 60 * 1000)) },
      { status: DeliveryStatusEnum.PENDING_PICKUP, message: 'En attente de r√©cup√©ration chez Jean Dupont', time: new Date(startTime.getTime() - (20 * 60 * 1000)) },
      { status: DeliveryStatusEnum.PICKED_UP, message: 'Ordinateur portable r√©cup√©r√© - 110 rue de Flandre, Paris 19√®me', time: startTime },
      { status: DeliveryStatusEnum.IN_TRANSIT, message: 'En route vers Marseille via A7 - ETA 2h', time: new Date(startTime.getTime() + (10 * 60 * 1000)) },
      { status: DeliveryStatusEnum.IN_TRANSIT, message: 'Passage p√©age Fleury-en-Bi√®re - Trafic fluide', time: new Date(startTime.getTime() + (45 * 60 * 1000)) },
      { status: DeliveryStatusEnum.IN_TRANSIT, message: 'Aire de repos Nemours - Pause s√©curit√© 15min', time: new Date(startTime.getTime() + (75 * 60 * 1000)) },
      { status: DeliveryStatusEnum.IN_TRANSIT, message: 'Contournement Lyon - Position actuelle', time: new Date(startTime.getTime() + (150 * 60 * 1000)) }
    );
  }

  // Cr√©er tous les logs
  for (const event of events) {
    await prisma.deliveryLog.create({
      data: {
        deliveryId,
        status: event.status,
        message: event.message,
        location: type === 'active' ? 'A7 direction Marseille' : undefined,
        createdAt: event.time
      }
    });
  }
}

/**
 * Cr√©e les coordonn√©es GPS pour une livraison
 */
async function createDeliveryCoordinates(
  prisma: PrismaClient,
  deliveryId: string,
  type: 'active' | 'completed'
) {
  if (type === 'active') {
    // Coordonn√©es actuelles pr√®s de Lyon sur A7
    const currentCoords = [
      { lat: 48.8942, lng: 2.3728, time: -180, speed: 0 }, // Paris d√©part
      { lat: 48.7589, lng: 2.4239, time: -150, speed: 85 }, // Sortie Paris
      { lat: 48.4853, lng: 2.6847, time: -120, speed: 110 }, // A6 vers Lyon
      { lat: 47.9025, lng: 3.4878, time: -90, speed: 95 }, // Auxerre
      { lat: 46.7742, lng: 4.8459, time: -60, speed: 105 }, // M√¢con
      { lat: 45.7640, lng: 4.8357, time: -30, speed: 90 }, // Lyon contournement
      { lat: 45.7640, lng: 4.8357, time: 0, speed: 75 } // Position actuelle
    ];

    for (const coord of currentCoords) {
      await prisma.deliveryCoordinates.create({
        data: {
          deliveryId,
          latitude: coord.lat + faker.number.float({ min: -0.001, max: 0.001 }),
          longitude: coord.lng + faker.number.float({ min: -0.001, max: 0.001 }),
          timestamp: new Date(Date.now() + (coord.time * 60 * 1000)),
          accuracy: faker.number.float({ min: 5, max: 15 }),
          speed: coord.speed
        }
      });
    }
  }
}

/**
 * Cr√©e les preuves de livraison (photos)
 */
async function createDeliveryProofs(
  prisma: PrismaClient,
  deliveryId: string,
  trackingCode: string
) {
  const proofs = [
    {
      type: 'photo',
      fileUrl: `/uploads/delivery/${trackingCode}/delivery-photo-1.jpg`,
      notes: 'Photo du colis remis au destinataire'
    },
    {
      type: 'photo', 
      fileUrl: `/uploads/delivery/${trackingCode}/delivery-photo-2.jpg`,
      notes: 'Photo confirmation livraison'
    },
    {
      type: 'signature',
      fileUrl: `/uploads/delivery/${trackingCode}/signature.png`,
      notes: 'Signature num√©rique du destinataire'
    }
  ];

  for (const proof of proofs) {
    await prisma.deliveryProof.create({
      data: {
        deliveryId,
        type: proof.type,
        fileUrl: proof.fileUrl,
        mimeType: proof.type === 'photo' ? 'image/jpeg' : 'image/png',
        notes: proof.notes,
        uploadedAt: new Date()
      }
    });
  }
}

/**
 * Cr√©e les √©valuations pour une livraison
 */
async function createDeliveryRatings(
  prisma: PrismaClient,
  deliveryId: string,
  clientId: string,
  delivererId: string,
  rating: number
) {
  const comments = [
    'Livraison parfaite ! Marie est tr√®s professionnelle et ponctuelle.',
    'Excellente communication tout au long du trajet. Colis arriv√© en parfait √©tat.',
    'Service impeccable, je recommande vivement Marie pour vos livraisons.',
    'Tr√®s satisfait de la prestation. Livreur s√©rieux et fiable.',
    'Livraison dans les temps, colis bien prot√©g√©. Parfait !'
  ];

  // √âvaluation du client vers le livreur
  await prisma.deliveryRating.create({
    data: {
      deliveryId,
      ratedById: clientId,
      targetId: delivererId,
      rating,
      comment: faker.helpers.arrayElement(comments),
      createdAt: new Date(Date.now() - faker.number.int({ min: 1, max: 24 }) * 60 * 60 * 1000)
    }
  });

  // √âvaluation du livreur vers le client (optionnelle)
  if (Math.random() > 0.3) { // 70% de chance
    await prisma.deliveryRating.create({
      data: {
        deliveryId,
        ratedById: delivererId,
        targetId: clientId,
        rating: faker.number.int({ min: 4, max: 5 }),
        comment: 'Client tr√®s sympathique et disponible pour la r√©ception.',
        createdAt: new Date(Date.now() - faker.number.int({ min: 1, max: 20 }) * 60 * 60 * 1000)
      }
    });
  }
}

/**
 * Valide l'int√©grit√© des livraisons
 */
export async function validateDeliveries(
  prisma: PrismaClient,
  logger: SeedLogger
): Promise<boolean> {
  logger.info('VALIDATION', 'üîç Validation des livraisons...');
  
  const deliveries = await prisma.delivery.findMany({
    include: { 
      announcement: true,
      deliverer: true,
      client: true,
      logs: true,
      coordinates: true,
      proofs: true,
      ratings: true
    }
  });

  let isValid = true;

  // V√©rifier que toutes les livraisons ont les relations n√©cessaires
  const incompleteDeliveries = deliveries.filter(d => 
    !d.announcement || !d.deliverer || !d.client
  );
  
  if (incompleteDeliveries.length > 0) {
    logger.error('VALIDATION', `‚ùå ${incompleteDeliveries.length} livraisons avec relations manquantes`);
    isValid = false;
  } else {
    logger.success('VALIDATION', '‚úÖ Toutes les livraisons ont des relations compl√®tes');
  }

  // V√©rifier les codes de suivi uniques
  const trackingCodes = deliveries.map(d => d.trackingCode);
  const uniqueCodes = new Set(trackingCodes);
  
  if (trackingCodes.length !== uniqueCodes.size) {
    logger.error('VALIDATION', '‚ùå Codes de suivi dupliqu√©s d√©tect√©s');
    isValid = false;
  } else {
    logger.success('VALIDATION', '‚úÖ Tous les codes de suivi sont uniques');
  }

  // V√©rifier les livraisons actives avec coordonn√©es GPS
  const activeDeliveries = deliveries.filter(d => d.status === DeliveryStatus.IN_TRANSIT);
  const activeWithCoords = activeDeliveries.filter(d => d.coordinates.length > 0);
  
  logger.info('VALIDATION', `üìç Livraisons actives avec GPS: ${activeWithCoords.length}/${activeDeliveries.length}`);

  // V√©rifier les livraisons termin√©es avec preuves
  const completedDeliveries = deliveries.filter(d => d.status === DeliveryStatus.DELIVERED);
  const completedWithProofs = completedDeliveries.filter(d => d.proofs.length > 0);
  
  logger.info('VALIDATION', `üì∏ Livraisons termin√©es avec preuves: ${completedWithProofs.length}/${completedDeliveries.length}`);

  // Statistiques des √©valuations
  const allRatings = deliveries.flatMap(d => d.ratings);
  const avgRating = allRatings.length > 0 ? 
    allRatings.reduce((sum, r) => sum + r.rating, 0) / allRatings.length : 0;
  
  logger.info('VALIDATION', `‚≠ê Note moyenne globale: ${avgRating.toFixed(2)}/5 (${allRatings.length} √©valuations)`);

  return isValid;
} 