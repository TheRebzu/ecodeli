import { PrismaClient, UserRole, ApplicationStatus } from '@prisma/client';
import { SeedLogger } from '../utils/seed-logger';
import { SeedResult, SeedOptions, getRandomDate } from '../utils/seed-helpers';

/**
 * Seed des candidatures de livraison EcoDeli
 */
export async function seedDeliveryApplications(
  prisma: PrismaClient,
  logger: SeedLogger,
  options: SeedOptions = {}
): Promise<SeedResult> {
  logger.startSeed('DELIVERY_APPLICATIONS');
  
  const result: SeedResult = {
    entity: 'delivery_applications',
    created: 0,
    skipped: 0,
    errors: 0
  };

  // R√©cup√©rer les utilisateurs cl√©s
  const jeanDupont = await prisma.user.findUnique({
    where: { email: 'jean.dupont@orange.fr' }
  });

  const marieLaurent = await prisma.user.findUnique({
    where: { email: 'marie.laurent@orange.fr' },
    include: { deliverer: true }
  });

  if (!jeanDupont || !marieLaurent) {
    logger.warning('DELIVERY_APPLICATIONS', 'Utilisateurs Jean Dupont ou Marie Laurent non trouv√©s');
    return result;
  }

  // R√©cup√©rer l'annonce de Jean Dupont
  const jeanAnnouncement = await prisma.announcement.findFirst({
    where: {
      clientId: jeanDupont.id,
      title: { contains: 'Livraison urgente d\'un ordinateur portable vers Marseille' }
    }
  });

  if (!jeanAnnouncement) {
    logger.warning('DELIVERY_APPLICATIONS', 'Annonce de Jean Dupont non trouv√©e - ex√©cuter d\'abord les seeds d\'annonces');
    return result;
  }

  // V√©rifier si des candidatures existent d√©j√†
  const existingApplications = await prisma.deliveryApplication.count();
  
  if (existingApplications > 0 && !options.force) {
    logger.warning('DELIVERY_APPLICATIONS', `${existingApplications} candidatures d√©j√† pr√©sentes - utiliser force:true pour recr√©er`);
    result.skipped = existingApplications;
    return result;
  }

  // Nettoyer si force activ√©
  if (options.force) {
    await prisma.deliveryApplication.deleteMany({});
    logger.database('NETTOYAGE', 'delivery applications', 0);
  }

  try {
    logger.progress('DELIVERY_APPLICATIONS', 1, 1, 'Cr√©ation candidature Marie Laurent');

    // Cr√©er la candidature de Marie Laurent sur l'annonce de Jean Dupont
    await prisma.deliveryApplication.create({
      data: {
        // Lien avec l'annonce et le livreur
        announcementId: jeanAnnouncement.id,
        delivererId: marieLaurent.id,
        
        // D√©tails de la candidature
        proposedPrice: 45.00,
        status: ApplicationStatus.ACCEPTED,
        
        // Message de candidature
        message: 'Bonjour, je suis Marie Laurent, livreuse exp√©riment√©e avec plus de 850 livraisons r√©ussies. Je connais parfaitement l\'axe Paris-Marseille que je fais r√©guli√®rement. Mon v√©hicule Peugeot 208 est parfaitement adapt√© pour transporter votre ordinateur portable en s√©curit√©. Je peux assurer la livraison dans les d√©lais demand√©s avec un taux de ponctualit√© de 95%. Je propose le tarif de 45‚Ç¨ comme indiqu√©.',
        
        // M√©tadonn√©es
        createdAt: getRandomDate(3, 5),
        updatedAt: getRandomDate(1, 2)
      }
    });

    result.created++;
    logger.success('DELIVERY_APPLICATIONS', '‚úÖ Candidature Marie Laurent cr√©√©e et accept√©e');

  } catch (error: any) {
    logger.error('DELIVERY_APPLICATIONS', `‚ùå Erreur cr√©ation candidature: ${error.message}`);
    result.errors++;
  }

  // Validation des candidatures cr√©√©es
  const finalApplications = await prisma.deliveryApplication.findMany({
    include: { 
      announcement: { include: { client: true } },
      deliverer: true
    }
  });
  
  if (finalApplications.length >= result.created) {
    logger.validation('DELIVERY_APPLICATIONS', 'PASSED', `${finalApplications.length} candidature(s) cr√©√©e(s) avec succ√®s`);
  } else {
    logger.validation('DELIVERY_APPLICATIONS', 'FAILED', `Attendu: ${result.created}, Cr√©√©: ${finalApplications.length}`);
  }

  // Statistiques
  const acceptedApplications = finalApplications.filter(app => app.status === ApplicationStatus.ACCEPTED);
  logger.info('DELIVERY_APPLICATIONS', `üìä Candidatures accept√©es: ${acceptedApplications.length}/${finalApplications.length}`);

  logger.endSeed('DELIVERY_APPLICATIONS', result);
  return result;
}

/**
 * Valide l'int√©grit√© des candidatures de livraison
 */
export async function validateDeliveryApplications(
  prisma: PrismaClient,
  logger: SeedLogger
): Promise<boolean> {
  logger.info('VALIDATION', 'üîç Validation des candidatures de livraison...');
  
  const applications = await prisma.deliveryApplication.findMany({
    include: { 
      announcement: true,
      deliverer: true
    }
  });

  let isValid = true;

  // V√©rifier que toutes les candidatures ont une annonce et un livreur valides
  const incompleteApplications = applications.filter(app => 
    !app.announcement || !app.deliverer
  );
  
  if (incompleteApplications.length > 0) {
    logger.error('VALIDATION', `‚ùå ${incompleteApplications.length} candidatures avec donn√©es manquantes`);
    isValid = false;
  } else {
    logger.success('VALIDATION', '‚úÖ Toutes les candidatures ont des donn√©es compl√®tes');
  }

  // V√©rifier la coh√©rence des prix propos√©s
  const applicationsWithInvalidPrice = applications.filter(app => 
    !app.proposedPrice || app.proposedPrice <= 0
  );
  
  if (applicationsWithInvalidPrice.length > 0) {
    logger.warning('VALIDATION', `‚ö†Ô∏è ${applicationsWithInvalidPrice.length} candidatures avec prix invalide`);
  } else {
    logger.success('VALIDATION', '‚úÖ Tous les prix propos√©s sont valides');
  }

  // V√©rifier les dates de candidature
  const applicationsWithInvalidDates = applications.filter(app => 
    app.rejectedAt && app.createdAt && app.rejectedAt < app.createdAt
  );
  
  if (applicationsWithInvalidDates.length > 0) {
    logger.error('VALIDATION', `‚ùå ${applicationsWithInvalidDates.length} candidatures avec dates incoh√©rentes`);
    isValid = false;
  } else {
    logger.success('VALIDATION', '‚úÖ Toutes les dates de candidature sont coh√©rentes');
  }

  return isValid;
} 