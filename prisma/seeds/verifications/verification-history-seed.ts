import { PrismaClient, UserRole, VerificationStatus } from "@prisma/client";
import { SeedLogger } from "../utils/seed-logger";
import {
  SeedResult,
  SeedOptions,
  getRandomElement,
  getRandomDate,
} from "../utils/seed-helpers";
import { faker } from "@faker-js/faker";

/**
 * Interface pour d√©finir un historique de v√©rification
 */
interface VerificationHistoryData {
  status: VerificationStatus;
  comment: string;
  documentId: string;
  userId: string;
  verifiedById?: string | null;
  createdAt: Date;
}

/**
 * Seed de l'historique des v√©rifications EcoDeli
 * Cr√©e un historique d√©taill√© des actions de v√©rification
 */
export async function seedVerificationHistory(
  prisma: PrismaClient,
  logger: SeedLogger,
  options: SeedOptions = {},
): Promise<SeedResult> {
  logger.startSeed("VERIFICATION_HISTORY");

  const result: SeedResult = {
    entity: "verification_history",
    created: 0,
    skipped: 0,
    errors: 0,
  };

  // R√©cup√©rer toutes les v√©rifications existantes
  const verifications = await prisma.verification.findMany({
    include: {
      document: { include: { user: true } },
      verifier: true,
    },
  });

  if (verifications.length === 0) {
    logger.warning(
      "VERIFICATION_HISTORY",
      "Aucune v√©rification trouv√©e - ex√©cuter d'abord les seeds de v√©rifications",
    );
    return result;
  }

  // V√©rifier si un historique existe d√©j√†
  const existingHistory = await prisma.verificationHistory.count();

  if (existingHistory > 0 && !options.force) {
    logger.warning(
      "VERIFICATION_HISTORY",
      `${existingHistory} entr√©es d'historique d√©j√† pr√©sentes - utiliser force:true pour recr√©er`,
    );
    result.skipped = existingHistory;
    return result;
  }

  // Nettoyer si force activ√©
  if (options.force) {
    await prisma.verificationHistory.deleteMany({});
    logger.database("NETTOYAGE", "verification history", 0);
  }

  // R√©cup√©rer les admins qui peuvent faire les v√©rifications
  const admins = await prisma.user.findMany({
    where: {
      role: UserRole.ADMIN,
      status: "ACTIVE",
    },
  });

  let totalHistoryEntries = 0;

  for (const verification of verifications) {
    try {
      logger.progress(
        "VERIFICATION_HISTORY",
        totalHistoryEntries + 1,
        verifications.length * 3,
        `Traitement historique: ${verification.document.filename}`,
      );

      const document = verification.document;
      const user = verification.document.user;

      // Cr√©er l'entr√©e initiale (soumission du document)
      await createHistoryEntry(prisma, {
        status: VerificationStatus.PENDING,
        comment: generateSubmissionComment(document.type, user.role),
        documentId: document.id,
        userId: user.id,
        createdAt: verification.requestedAt,
      });
      totalHistoryEntries++;
      result.created++;

      // Si le document a √©t√© trait√©, cr√©er les entr√©es interm√©diaires
      if (verification.status !== VerificationStatus.PENDING) {
        // D√©terminer si il y a eu des re-soumissions ou demandes de clarification
        const hasResubmission = faker.datatype.boolean(0.3); // 30% de chance de re-soumission

        if (
          hasResubmission &&
          verification.status === VerificationStatus.APPROVED
        ) {
          // Cr√©er une premi√®re entr√©e de rejet
          const firstRejectionDate = faker.date.between({
            from: verification.requestedAt,
            to: verification.verifiedAt || new Date(),
          });

          const verifierId =
            verification.verifierId || getRandomElement(admins)?.id;
          if (verifierId) {
            await createHistoryEntry(prisma, {
              status: VerificationStatus.REJECTED,
              comment: generateRejectionComment(document.type, user.role, true),
              documentId: document.id,
              userId: user.id,
              verifiedById: verifierId,
              createdAt: firstRejectionDate,
            });
          }
          totalHistoryEntries++;
          result.created++;

          // Cr√©er une entr√©e de re-soumission
          const resubmissionDate = faker.date.between({
            from: firstRejectionDate,
            to: verification.verifiedAt || new Date(),
          });

          await createHistoryEntry(prisma, {
            status: VerificationStatus.PENDING,
            comment: generateResubmissionComment(document.type, user.role),
            documentId: document.id,
            userId: user.id,
            createdAt: resubmissionDate,
          });
          totalHistoryEntries++;
          result.created++;
        }

        // Cr√©er l'entr√©e finale (approbation ou rejet d√©finitif)
        if (verification.verifiedAt && verification.verifierId) {
          await createHistoryEntry(prisma, {
            status: verification.status,
            comment:
              verification.status === VerificationStatus.APPROVED
                ? generateApprovalComment(document.type, user.role)
                : generateRejectionComment(document.type, user.role, false),
            documentId: document.id,
            userId: user.id,
            verifiedById: verification.verifierId,
            createdAt: verification.verifiedAt,
          });
          totalHistoryEntries++;
          result.created++;
        }
      }
    } catch (error: any) {
      logger.error(
        "VERIFICATION_HISTORY",
        `‚ùå Erreur cr√©ation historique pour ${verification.document.filename}: ${error.message}`,
      );
      result.errors++;
    }
  }

  // Validation de l'historique cr√©√©
  const finalHistory = await prisma.verificationHistory.findMany({
    include: {
      document: true,
      user: true,
      verifiedBy: true,
    },
  });

  if (finalHistory.length >= totalHistoryEntries - result.errors) {
    logger.validation(
      "VERIFICATION_HISTORY",
      "PASSED",
      `${finalHistory.length} entr√©es d'historique cr√©√©es avec succ√®s`,
    );
  } else {
    logger.validation(
      "VERIFICATION_HISTORY",
      "FAILED",
      `Attendu: ${totalHistoryEntries}, Cr√©√©: ${finalHistory.length}`,
    );
  }

  // Statistiques par statut
  const byStatus = finalHistory.reduce((acc: Record<string, number>, entry) => {
    acc[entry.status] = (acc[entry.status] || 0) + 1;
    return acc;
  }, {});

  logger.info(
    "VERIFICATION_HISTORY",
    `üìä Historique par statut: ${JSON.stringify(byStatus)}`,
  );

  // Statistiques par r√¥le utilisateur
  const byRole = finalHistory.reduce((acc: Record<string, number>, entry) => {
    const role = entry.user.role;
    acc[role] = (acc[role] || 0) + 1;
    return acc;
  }, {});

  logger.info(
    "VERIFICATION_HISTORY",
    `üë• Historique par r√¥le: ${JSON.stringify(byRole)}`,
  );

  // Calculer le nombre de re-soumissions
  const resubmissions = finalHistory.filter(
    (entry) =>
      entry.comment?.includes("re-soumission") ||
      entry.comment?.includes("nouvelle version"),
  );

  if (resubmissions.length > 0) {
    logger.info(
      "VERIFICATION_HISTORY",
      `üîÑ Re-soumissions: ${resubmissions.length} documents corrig√©s`,
    );
  }

  // Activit√© par admin v√©rificateur
  const adminActivity = finalHistory
    .filter((entry) => entry.verifiedById)
    .reduce((acc: Record<string, number>, entry) => {
      const adminId = entry.verifiedById!;
      acc[adminId] = (acc[adminId] || 0) + 1;
      return acc;
    }, {});

  const activeAdmins = Object.keys(adminActivity).length;
  logger.info(
    "VERIFICATION_HISTORY",
    `üë®‚Äçüíº Admins actifs: ${activeAdmins} administrateurs ont trait√© des v√©rifications`,
  );

  logger.endSeed("VERIFICATION_HISTORY", result);
  return result;
}

/**
 * Cr√©e une entr√©e d'historique de v√©rification
 */
async function createHistoryEntry(
  prisma: PrismaClient,
  data: VerificationHistoryData,
): Promise<void> {
  // Si pas de verifiedById fourni et que le statut n'est pas PENDING, r√©cup√©rer un admin
  let verifiedById = data.verifiedById;
  if (!verifiedById && data.status !== VerificationStatus.PENDING) {
    const admin = await prisma.user.findFirst({
      where: { role: UserRole.ADMIN, status: "ACTIVE" },
    });
    if (!admin) {
      throw new Error("Aucun admin actif trouv√© pour la v√©rification");
    }
    verifiedById = admin.id;
  }

  // Si le statut est PENDING, on peut avoir verifiedById null - il faut donc l'assigner √† un admin par d√©faut
  if (!verifiedById) {
    const admin = await prisma.user.findFirst({
      where: { role: UserRole.ADMIN, status: "ACTIVE" },
    });
    if (!admin) {
      throw new Error("Aucun admin actif trouv√© pour la v√©rification");
    }
    verifiedById = admin.id;
  }

  await prisma.verificationHistory.create({
    data: {
      status: data.status,
      comment: data.comment,
      documentId: data.documentId,
      userId: data.userId,
      verifiedById: verifiedById,
      createdAt: data.createdAt,
    },
  });
}

/**
 * G√©n√®re un commentaire de soumission de document
 */
function generateSubmissionComment(
  docType: string,
  userRole: UserRole,
): string {
  const submissionComments: { [role: string]: { [type: string]: string[] } } = {
    [UserRole.DELIVERER]: {
      ID_CARD: [
        "Soumission carte d'identit√© pour v√©rification livreur",
        "Document d'identit√© t√©l√©vers√© par le livreur",
        "CNI soumise pour validation du profil livreur",
      ],
      DRIVERS_LICENSE: [
        "Permis de conduire soumis pour v√©rification",
        "Document de conduite t√©l√©vers√© par le livreur",
        "Permis B soumis pour validation des livraisons",
      ],
      default: [
        "Document de livreur soumis pour v√©rification",
        "Nouveau document t√©l√©vers√© par le livreur",
        "Document requis soumis pour validation du profil",
      ],
    },
    [UserRole.PROVIDER]: {
      PROFESSIONAL_QUALIFICATION: [
        "Certification professionnelle soumise pour validation",
        "Qualification m√©tier t√©l√©vers√©e par le prestataire",
        "Document de comp√©tence soumis pour v√©rification",
      ],
      BUSINESS_REGISTRATION: [
        "Kbis auto-entrepreneur soumis pour validation",
        "Document d'entreprise t√©l√©vers√© par le prestataire",
        "Statut juridique soumis pour v√©rification",
      ],
      default: [
        "Document de prestataire soumis pour v√©rification",
        "Nouveau document t√©l√©vers√© par le prestataire",
        "Document professionnel soumis pour validation",
      ],
    },
    [UserRole.MERCHANT]: {
      BUSINESS_REGISTRATION: [
        "Kbis entreprise soumis pour validation commerciale",
        "Document d'entreprise t√©l√©vers√© par le commer√ßant",
        "Statut juridique commercial soumis pour v√©rification",
      ],
      BUSINESS_LICENSE: [
        "Licence commerciale soumise pour validation",
        "Autorisation d'exploitation t√©l√©vers√©e",
        "Document l√©gal commercial soumis pour v√©rification",
      ],
      default: [
        "Document commercial soumis pour v√©rification",
        "Nouveau document t√©l√©vers√© par le commer√ßant",
        "Document d'entreprise soumis pour validation",
      ],
    },
  };

  const roleComments =
    submissionComments[userRole] || submissionComments[UserRole.CLIENT];
  const typeComments = roleComments[docType] || roleComments["default"];
  return getRandomElement(typeComments);
}

/**
 * G√©n√®re un commentaire d'approbation de document
 */
function generateApprovalComment(docType: string, userRole: UserRole): string {
  const approvalComments = [
    "Document v√©rifi√© et approuv√© par l'√©quipe de validation",
    "V√©rification r√©ussie - document conforme aux exigences",
    "Document valid√© apr√®s contr√¥le administratif",
    "Approbation confirm√©e - toutes les informations sont correctes",
    "Document authentifi√© et approuv√© pour utilisation",
    "V√©rification positive - document accept√© dans le syst√®me",
    "Validation r√©ussie apr√®s examen d√©taill√© du document",
    "Document approuv√© suite √† v√©rification manuelle",
  ];

  return getRandomElement(approvalComments);
}

/**
 * G√©n√®re un commentaire de rejet de document
 */
function generateRejectionComment(
  docType: string,
  userRole: UserRole,
  isInitialReject: boolean,
): string {
  const baseReasons = [
    "Qualit√© d'image insuffisante pour validation",
    "Document partiellement masqu√© ou illisible",
    "Informations incompl√®tes ou manquantes",
    "Document expir√© ou non valide",
    "Format de fichier non conforme",
    "Document ne correspond pas au type requis",
    "Signature ou tampon officiel manquant",
    "Coh√©rence des informations √† v√©rifier",
  ];

  const resubmissionAdvice = [
    "Merci de soumettre une nouvelle version plus lisible",
    "Veuillez t√©l√©verser un document complet et √† jour",
    "Pri√®re de fournir un document de meilleure qualit√©",
    "Nouvelle soumission requise avec document valide",
    "Merci de corriger les √©l√©ments manquants et re-soumettre",
  ];

  const baseReason = getRandomElement(baseReasons);
  const advice = isInitialReject
    ? ` - ${getRandomElement(resubmissionAdvice)}`
    : "";

  return `Document rejet√©: ${baseReason}${advice}`;
}

/**
 * G√©n√®re un commentaire de re-soumission de document
 */
function generateResubmissionComment(
  docType: string,
  userRole: UserRole,
): string {
  const resubmissionComments = [
    "Nouvelle version du document soumise apr√®s correction",
    "Document corrig√© et re-t√©l√©vers√© par l'utilisateur",
    "Re-soumission suite aux commentaires de l'√©quipe de validation",
    "Version am√©lior√©e du document t√©l√©vers√©e",
    "Document mis √† jour soumis pour nouvelle v√©rification",
    "Correction effectu√©e - nouveau document pour validation",
    "Version corrig√©e t√©l√©vers√©e en r√©ponse aux remarques",
    "Document actualis√© soumis pour approbation",
  ];

  return getRandomElement(resubmissionComments);
}

/**
 * Valide l'int√©grit√© de l'historique de v√©rification
 */
export async function validateVerificationHistory(
  prisma: PrismaClient,
  logger: SeedLogger,
): Promise<boolean> {
  logger.info("VALIDATION", "üîç Validation de l'historique de v√©rification...");

  let isValid = true;

  // V√©rifier que l'historique existe
  const historyEntries = await prisma.verificationHistory.findMany({
    include: {
      document: true,
      user: true,
      verifiedBy: true,
    },
  });

  const verificationsCount = await prisma.verification.count();

  if (historyEntries.length === 0) {
    logger.error("VALIDATION", "‚ùå Aucune entr√©e d'historique trouv√©e");
    isValid = false;
  } else {
    logger.success(
      "VALIDATION",
      `‚úÖ ${historyEntries.length} entr√©es d'historique trouv√©es pour ${verificationsCount} v√©rifications`,
    );
  }

  // V√©rifier que chaque document a au moins une entr√©e de soumission
  const documents = await prisma.document.findMany();
  const documentsWithHistory = new Set(
    historyEntries.map((entry) => entry.documentId),
  );

  const documentsWithoutHistory = documents.filter(
    (doc) => !documentsWithHistory.has(doc.id),
  );

  if (documentsWithoutHistory.length > 0) {
    logger.warning(
      "VALIDATION",
      `‚ö†Ô∏è ${documentsWithoutHistory.length} documents sans historique de v√©rification`,
    );
  }

  // V√©rifier la coh√©rence chronologique
  const invalidTimelines = historyEntries.filter((entry) => {
    const document = entry.document;
    return document && entry.createdAt < document.uploadedAt;
  });

  if (invalidTimelines.length > 0) {
    logger.error(
      "VALIDATION",
      `‚ùå ${invalidTimelines.length} entr√©es d'historique avec chronologie incoh√©rente`,
    );
    isValid = false;
  }

  // V√©rifier que les actions de v√©rification ont un admin assign√©
  const verificationActionsWithoutAdmin = historyEntries.filter(
    (entry) =>
      entry.status !== VerificationStatus.PENDING && !entry.verifiedById,
  );

  if (verificationActionsWithoutAdmin.length > 0) {
    logger.warning(
      "VALIDATION",
      `‚ö†Ô∏è ${verificationActionsWithoutAdmin.length} actions de v√©rification sans admin assign√©`,
    );
  }

  // Statistiques de l'historique
  const submissionEntries = historyEntries.filter(
    (entry) => entry.status === VerificationStatus.PENDING,
  );
  const approvalEntries = historyEntries.filter(
    (entry) => entry.status === VerificationStatus.APPROVED,
  );
  const rejectionEntries = historyEntries.filter(
    (entry) => entry.status === VerificationStatus.REJECTED,
  );

  logger.info(
    "VALIDATION",
    `üìã Soumissions: ${submissionEntries.length}, Approbations: ${approvalEntries.length}, Rejets: ${rejectionEntries.length}`,
  );

  logger.success(
    "VALIDATION",
    "‚úÖ Validation de l'historique de v√©rification termin√©e",
  );
  return isValid;
}

/**
 * G√©n√®re des statistiques avanc√©es sur l'historique de v√©rification
 */
export async function generateVerificationHistoryStats(
  prisma: PrismaClient,
  logger: SeedLogger,
): Promise<void> {
  logger.info("STATS", "üìä G√©n√©ration des statistiques d'historique...");

  const historyEntries = await prisma.verificationHistory.findMany({
    include: {
      document: { include: { user: true } },
      verifiedBy: true,
    },
  });

  // Temps moyen de traitement par type de document
  const processingTimes: { [docType: string]: number[] } = {};

  historyEntries.forEach((entry) => {
    if (
      (entry.status === VerificationStatus.APPROVED ||
        entry.status === VerificationStatus.REJECTED) &&
      entry.document
    ) {
      const docType = entry.document.type;
      const submissionTime = entry.document.uploadedAt.getTime();
      const verificationTime = entry.createdAt.getTime();
      const processingDays =
        (verificationTime - submissionTime) / (24 * 60 * 60 * 1000);

      if (!processingTimes[docType]) {
        processingTimes[docType] = [];
      }
      processingTimes[docType].push(processingDays);
    }
  });

  // Afficher les temps moyens
  Object.entries(processingTimes).forEach(([docType, times]) => {
    const avgTime = Math.round(
      times.reduce((sum, time) => sum + time, 0) / times.length,
    );
    logger.info("STATS", `‚è±Ô∏è ${docType}: ${avgTime} jours de traitement moyen`);
  });

  // Taux de re-soumission
  const resubmissions = historyEntries.filter(
    (entry) =>
      entry.comment?.toLowerCase().includes("re-soumission") ||
      entry.comment?.toLowerCase().includes("nouvelle version"),
  );

  const resubmissionRate = Math.round(
    (resubmissions.length / historyEntries.length) * 100,
  );
  logger.info(
    "STATS",
    `üîÑ Taux de re-soumission: ${resubmissionRate}% (${resubmissions.length} corrections)`,
  );

  logger.success("STATS", "‚úÖ Statistiques d'historique g√©n√©r√©es");
}
