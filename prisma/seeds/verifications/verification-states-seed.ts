import { PrismaClient, UserRole, VerificationStatus } from "@prisma/client";
import { SeedLogger } from "../utils/seed-logger";
import {
  SeedResult,
  SeedOptions,
  getRandomElement,
  getRandomDate,
} from "../utils/seed-helpers";
import { faker } from "@faker-js/faker";

/**
 * Interface pour d√©finir une demande de v√©rification
 */
interface VerificationRequestData {
  documentId: string;
  submitterId: string;
  verifierId?: string;
  status: VerificationStatus;
  notes?: string;
  rejectionReason?: string;
  requestedAt: Date;
  verifiedAt?: Date;
}

/**
 * Seed des √©tats de v√©rification EcoDeli
 * Cr√©e des enregistrements Verification pour les documents existants
 */
export async function seedVerificationStates(
  prisma: PrismaClient,
  logger: SeedLogger,
  options: SeedOptions = {},
): Promise<SeedResult> {
  logger.startSeed("VERIFICATION_STATES");

  const result: SeedResult = {
    entity: "verification_states",
    created: 0,
    skipped: 0,
    errors: 0,
  };

  // R√©cup√©rer tous les documents existants
  const documents = await prisma.document.findMany({
    include: { user: true },
  });

  if (documents.length === 0) {
    logger.warning(
      "VERIFICATION_STATES",
      "Aucun document trouv√© - ex√©cuter d'abord les seeds de documents",
    );
    return result;
  }

  // V√©rifier si des v√©rifications existent d√©j√†
  const existingVerifications = await prisma.verification.count();

  if (existingVerifications > 0 && !options.force) {
    logger.warning(
      "VERIFICATION_STATES",
      `${existingVerifications} v√©rifications d√©j√† pr√©sentes - utiliser force:true pour recr√©er`,
    );
    result.skipped = existingVerifications;
    return result;
  }

  // Nettoyer si force activ√©
  if (options.force) {
    await prisma.verification.deleteMany({});
    logger.database("NETTOYAGE", "verifications", 0);
  }

  // R√©cup√©rer les admins qui peuvent faire les v√©rifications
  const admins = await prisma.user.findMany({
    where: {
      role: UserRole.ADMIN,
      status: "ACTIVE",
    },
  });

  if (admins.length === 0) {
    logger.warning(
      "VERIFICATION_STATES",
      "Aucun admin trouv√© pour les v√©rifications",
    );
  }

  let totalVerifications = 0;

  for (const document of documents) {
    try {
      logger.progress(
        "VERIFICATION_STATES",
        totalVerifications + 1,
        documents.length,
        `Traitement v√©rification: ${document.filename}`,
      );

      // Utiliser le statut existant du document comme base
      const baseStatus = document.verificationStatus;

      // Dates coh√©rentes
      const requestedAt = document.uploadedAt;
      let verifiedAt: Date | null = null;
      let verifierId: string | null = null;
      let notes: string | null = null;
      let rejectionReason: string | null = null;

      // Si le document est trait√© (approuv√© ou rejet√©), ajouter les d√©tails
      if (
        baseStatus === VerificationStatus.APPROVED ||
        baseStatus === VerificationStatus.REJECTED
      ) {
        // V√©rification effectu√©e 1-30 jours apr√®s la soumission
        verifiedAt = faker.date.between({
          from: requestedAt,
          to: new Date(requestedAt.getTime() + 30 * 24 * 60 * 60 * 1000),
        });

        // Assigner un admin v√©rificateur
        if (admins.length > 0) {
          verifierId = getRandomElement(admins).id;
        }

        // G√©n√©rer notes selon le statut
        if (baseStatus === VerificationStatus.APPROVED) {
          notes = generateApprovalNotes(document.type, document.userRole);
        } else {
          rejectionReason =
            document.rejectionReason ||
            generateRejectionReason(document.type, document.userRole);
          notes = `Document rejet√©: ${rejectionReason}`;
        }
      } else {
        // Document en attente
        notes = generatePendingNotes(document.type, document.userRole);
      }

      // Cr√©er la v√©rification
      await prisma.verification.create({
        data: {
          status: baseStatus,
          requestedAt,
          verifiedAt,
          documentId: document.id,
          submitterId: document.userId,
          verifierId,
          notes,
          rejectionReason,
        },
      });

      totalVerifications++;
      result.created++;
    } catch (error: any) {
      logger.error(
        "VERIFICATION_STATES",
        `‚ùå Erreur cr√©ation v√©rification pour ${document.filename}: ${error.message}`,
      );
      result.errors++;
    }
  }

  // Validation des v√©rifications cr√©√©es
  const finalVerifications = await prisma.verification.findMany({
    include: {
      document: true,
      submitter: true,
      verifier: true,
    },
  });

  if (finalVerifications.length >= totalVerifications - result.errors) {
    logger.validation(
      "VERIFICATION_STATES",
      "PASSED",
      `${finalVerifications.length} v√©rifications cr√©√©es avec succ√®s`,
    );
  } else {
    logger.validation(
      "VERIFICATION_STATES",
      "FAILED",
      `Attendu: ${totalVerifications}, Cr√©√©: ${finalVerifications.length}`,
    );
  }

  // Statistiques par statut
  const byStatus = finalVerifications.reduce(
    (acc: Record<string, number>, verification) => {
      acc[verification.status] = (acc[verification.status] || 0) + 1;
      return acc;
    },
    {},
  );

  logger.info(
    "VERIFICATION_STATES",
    `üìä V√©rifications par statut: ${JSON.stringify(byStatus)}`,
  );

  // Statistiques par r√¥le
  const byRole = finalVerifications.reduce(
    (acc: Record<string, number>, verification) => {
      const role = verification.submitter.role;
      acc[role] = (acc[role] || 0) + 1;
      return acc;
    },
    {},
  );

  logger.info(
    "VERIFICATION_STATES",
    `üë• V√©rifications par r√¥le: ${JSON.stringify(byRole)}`,
  );

  // D√©lai moyen de traitement
  const treatedVerifications = finalVerifications.filter((v) => v.verifiedAt);
  if (treatedVerifications.length > 0) {
    const totalDelay = treatedVerifications.reduce((sum, v) => {
      const delay =
        (v.verifiedAt!.getTime() - v.requestedAt.getTime()) /
        (24 * 60 * 60 * 1000); // jours
      return sum + delay;
    }, 0);
    const avgDelay = Math.round(totalDelay / treatedVerifications.length);
    logger.info(
      "VERIFICATION_STATES",
      `‚è±Ô∏è D√©lai moyen de traitement: ${avgDelay} jours`,
    );
  }

  // Taux d'approbation
  const approvedVerifications = finalVerifications.filter(
    (v) => v.status === VerificationStatus.APPROVED,
  );
  const approvalRate = Math.round(
    (approvedVerifications.length / finalVerifications.length) * 100,
  );
  logger.info(
    "VERIFICATION_STATES",
    `‚úÖ Taux d'approbation: ${approvalRate}% (${approvedVerifications.length}/${finalVerifications.length})`,
  );

  logger.endSeed("VERIFICATION_STATES", result);
  return result;
}

/**
 * G√©n√®re des notes d'approbation selon le type de document et r√¥le
 */
function generateApprovalNotes(docType: string, userRole: UserRole): string {
  const approvalNotes: { [role: string]: { [type: string]: string[] } } = {
    [UserRole.DELIVERER]: {
      ID_CARD: [
        "Carte d'identit√© conforme et lisible",
        "Document valide, identit√© v√©rifi√©e",
        "CNI fran√ßaise en cours de validit√©",
      ],
      VEHICLE_REGISTRATION: [
        "Carte grise conforme, v√©hicule identifi√©",
        "Document d'immatriculation valide",
        "V√©hicule autoris√© pour livraisons",
      ],
      default: [
        "Document conforme aux exigences",
        "V√©rification r√©ussie, document valid√©",
        "Toutes les informations sont correctes",
      ],
    },
    [UserRole.PROVIDER]: {
      QUALIFICATION_CERTIFICATE: [
        "Certification professionnelle valid√©e",
        "Qualification reconnue par l'organisme",
        "Comp√©tences confirm√©es pour le service",
      ],
      BUSINESS_REGISTRATION: [
        "Kbis valide, entreprise en r√®gle",
        "Statut juridique conforme",
        "Activit√© d√©clar√©e correspondante",
      ],
      default: [
        "Document professionnel conforme",
        "V√©rification r√©ussie",
        "Informations d'entreprise valid√©es",
      ],
    },
    [UserRole.MERCHANT]: {
      BUSINESS_REGISTRATION: [
        "Kbis entreprise valide et r√©cent",
        "Soci√©t√© en r√®gle avec activit√© commerciale",
        "Statut juridique appropri√© pour commerce",
      ],
      default: [
        "Document commercial conforme",
        "V√©rification d'entreprise r√©ussie",
        "Informations commerciales valid√©es",
      ],
    },
  };

  const roleNotes = approvalNotes[userRole] || approvalNotes[UserRole.CLIENT];
  const typeNotes = roleNotes[docType] || roleNotes["default"];
  return getRandomElement(typeNotes);
}

/**
 * G√©n√®re des notes pour documents en attente
 */
function generatePendingNotes(docType: string, userRole: UserRole): string {
  const pendingNotes = [
    "Document soumis, en attente de v√©rification",
    "En cours d'examen par l'√©quipe de v√©rification",
    "Document re√ßu, traitement dans les 48h",
    "V√©rification programm√©e, merci de patienter",
    "Document dans la file d'attente de validation",
  ];

  return getRandomElement(pendingNotes);
}

/**
 * G√©n√®re des motifs de rejet g√©n√©riques
 */
function generateRejectionReason(docType: string, userRole: UserRole): string {
  const genericReasons = [
    "Document illisible ou de mauvaise qualit√©",
    "Informations incompl√®tes",
    "Document expir√©",
    "Format non support√©",
    "Document non conforme aux exigences",
    "Informations non v√©rifiables",
    "Qualit√© d'image insuffisante",
  ];

  return getRandomElement(genericReasons);
}

/**
 * Valide l'int√©grit√© des √©tats de v√©rification
 */
export async function validateVerificationStates(
  prisma: PrismaClient,
  logger: SeedLogger,
): Promise<boolean> {
  logger.info("VALIDATION", "üîç Validation des √©tats de v√©rification...");

  let isValid = true;

  // V√©rifier que toutes les v√©rifications ont des documents associ√©s
  const verifications = await prisma.verification.findMany({
    include: {
      document: true,
      submitter: true,
      verifier: true,
    },
  });

  const documentsCount = await prisma.document.count();

  if (verifications.length === 0) {
    logger.error("VALIDATION", "‚ùå Aucune v√©rification trouv√©e");
    isValid = false;
  } else {
    logger.success(
      "VALIDATION",
      `‚úÖ ${verifications.length} v√©rifications trouv√©es pour ${documentsCount} documents`,
    );
  }

  // V√©rifier que les v√©rifications approuv√©es/rejet√©es ont un v√©rificateur
  const treatedWithoutVerifier = verifications.filter(
    (v) =>
      (v.status === VerificationStatus.APPROVED ||
        v.status === VerificationStatus.REJECTED) &&
      !v.verifierId,
  );

  if (treatedWithoutVerifier.length > 0) {
    logger.warning(
      "VALIDATION",
      `‚ö†Ô∏è ${treatedWithoutVerifier.length} v√©rifications trait√©es sans v√©rificateur assign√©`,
    );
  }

  // V√©rifier la coh√©rence des dates
  const invalidDates = verifications.filter(
    (v) => v.verifiedAt && v.verifiedAt < v.requestedAt,
  );

  if (invalidDates.length > 0) {
    logger.error(
      "VALIDATION",
      `‚ùå ${invalidDates.length} v√©rifications avec dates incoh√©rentes`,
    );
    isValid = false;
  }

  // V√©rifier que les documents rejet√©s ont une raison
  const rejectedWithoutReason = verifications.filter(
    (v) => v.status === VerificationStatus.REJECTED && !v.rejectionReason,
  );

  if (rejectedWithoutReason.length > 0) {
    logger.warning(
      "VALIDATION",
      `‚ö†Ô∏è ${rejectedWithoutReason.length} documents rejet√©s sans motif`,
    );
  }

  logger.success(
    "VALIDATION",
    "‚úÖ Validation des √©tats de v√©rification termin√©e",
  );
  return isValid;
}

/**
 * Cr√©e des demandes de v√©rification en lot pour les documents r√©cents
 */
export async function createRecentVerificationRequests(
  prisma: PrismaClient,
  logger: SeedLogger,
  options: { daysBack?: number } = {},
): Promise<SeedResult> {
  const daysBack = options.daysBack || 7;
  const cutoffDate = new Date(Date.now() - daysBack * 24 * 60 * 60 * 1000);

  const result: SeedResult = {
    entity: "recent_verification_requests",
    created: 0,
    skipped: 0,
    errors: 0,
  };

  // R√©cup√©rer les documents r√©cents sans demande de v√©rification
  const recentDocuments = await prisma.document.findMany({
    where: {
      uploadedAt: { gte: cutoffDate },
      verifications: { none: {} },
    },
    include: { user: true },
  });

  logger.info(
    "RECENT_VERIFICATIONS",
    `Cr√©ation de demandes pour ${recentDocuments.length} documents r√©cents`,
  );

  for (const document of recentDocuments) {
    try {
      await prisma.verification.create({
        data: {
          documentId: document.id,
          submitterId: document.userId,
          status: VerificationStatus.PENDING,
          requestedAt: document.uploadedAt,
          notes: "Demande de v√©rification automatique pour document r√©cent",
        },
      });

      result.created++;
    } catch (error: any) {
      logger.error(
        "RECENT_VERIFICATIONS",
        `‚ùå Erreur cr√©ation v√©rification r√©cente: ${error.message}`,
      );
      result.errors++;
    }
  }

  return result;
}
