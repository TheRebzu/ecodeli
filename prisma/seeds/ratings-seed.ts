import { 
  PrismaClient, 
  UserRole
} from '@prisma/client';
import { DeliveryStatus } from '@prisma/client';
import { faker } from '@faker-js/faker/locale/fr';
import { sub, format, addDays } from 'date-fns';

// Configuration du client Prisma
const prisma = new PrismaClient();

// Configuration g√©n√©rale
const RATING_PERCENTAGE = 0.8; // 80% des livraisons termin√©es auront une √©valuation
const COMMENT_PERCENTAGE = 0.7; // 70% des √©valuations auront un commentaire
const MIN_RATINGS_TO_GENERATE = 10; // Nombre minimum d'√©valuations √† g√©n√©rer
const NB_DELIVERIES_TO_CREATE = 5; // Nombre de livraisons factices √† cr√©er si aucune n'existe

// Types de commentaires
const COMMENT_TYPES = {
  POSITIVE: 0.7, // 70% des commentaires sont positifs
  NEUTRAL: 0.2, // 20% des commentaires sont neutres
  NEGATIVE: 0.1, // 10% des commentaires sont n√©gatifs
};

// Commentaires positifs
const POSITIVE_COMMENTS = [
  "Livraison tr√®s rapide, livreur tr√®s agr√©able !",
  "Service impeccable, colis en parfait √©tat.",
  "Livreur ponctuel et professionnel.",
  "Livraison effectu√©e plus rapidement que pr√©vu, merci !",
  "Excellent service, communication claire et efficace.",
  "Livreur tr√®s courtois et attentionn√©.",
  "Parfait ! Rien √† redire sur cette livraison.",
  "Tr√®s satisfait de la prestation, je recommande.",
  "Service vraiment au top, merci !",
  "Livraison soign√©e et dans les d√©lais. Parfait !",
  "Livreur tr√®s sympathique et service efficace.",
  "Livraison parfaite et dans les temps.",
  "Tr√®s bon suivi de la livraison en temps r√©el.",
  "Service client et livreur exemplaires.",
  "Application tr√®s pratique et livreur ponctuel.",
];

// Commentaires neutres
const NEUTRAL_COMMENTS = [
  "Livraison conforme √† mes attentes.",
  "Service correct, rien d'exceptionnel.",
  "Livraison effectu√©e dans les d√©lais standards.",
  "Tout s'est pass√© normalement.",
  "Colis livr√© comme pr√©vu, sans plus.",
  "Service acceptable, l√©g√®rement en retard.",
  "Livraison conforme √† la description, pas de surprise.",
  "Livreur poli, d√©lai de livraison respect√©.",
  "Exp√©rience standard de livraison.",
  "Service basique mais efficace.",
];

// Commentaires n√©gatifs
const NEGATIVE_COMMENTS = [
  "Livraison tr√®s en retard, peu de communication.",
  "Colis l√©g√®rement endommag√© √† l'arriv√©e.",
  "Livreur pas tr√®s aimable.",
  "Difficile de planifier la livraison, peu de flexibilit√©.",
  "D√©√ßu par le service, livraison tardive sans explication.",
  "Le livreur n'a pas respect√© mes instructions de livraison.",
  "Communication inexistante pendant la livraison.",
  "Colis laiss√© devant la porte sans signature.",
  "Exp√©rience de livraison √† am√©liorer.",
  "Service client peu r√©actif suite √† mon probl√®me.",
];

/**
 * Cr√©e des livraisons factices pour tester les √©valuations
 */
async function createFakeDeliveries() {
  console.log('üöö Cr√©ation de livraisons factices pour les tests...');
  
  // R√©cup√®re quelques clients et livreurs
  const clients = await prisma.user.findMany({
    where: { role: UserRole.CLIENT },
    take: 5,
  });
  
  const deliverers = await prisma.user.findMany({
    where: { role: UserRole.DELIVERER },
    take: 3,
  });
  
  if (clients.length === 0) {
    console.log('‚ùå Aucun client trouv√© dans la base de donn√©es. Impossible de cr√©er des livraisons.');
    return [];
  }
  
  if (deliverers.length === 0) {
    console.log('‚ùå Aucun livreur trouv√© dans la base de donn√©es. Impossible de cr√©er des livraisons.');
    return [];
  }
  
  const deliveries = [];
  
  for (let i = 0; i < NB_DELIVERIES_TO_CREATE; i++) {
    const client = faker.helpers.arrayElement(clients);
    const deliverer = faker.helpers.arrayElement(deliverers);
    
    // Date de cr√©ation (entre 10 et 30 jours dans le pass√©)
    const createdAt = faker.date.recent({ days: faker.number.int({ min: 10, max: 30 }) });
    
    // Date de livraison (entre 1 et 5 jours apr√®s la cr√©ation)
    const deliveryDate = new Date(createdAt);
    deliveryDate.setDate(deliveryDate.getDate() + faker.number.int({ min: 1, max: 5 }));
    
    // Statut de livraison (on cr√©e des livraisons termin√©es)
    const status = faker.helpers.arrayElement([
      DeliveryStatus.DELIVERED,
      DeliveryStatus.CONFIRMED
    ]);
    
    try {
      const delivery = await prisma.delivery.create({
        data: {
          status,
          pickupAddress: faker.location.streetAddress() + ', ' + faker.location.city() + ' ' + faker.location.zipCode(),
          deliveryAddress: faker.location.streetAddress() + ', ' + faker.location.city() + ' ' + faker.location.zipCode(),
          pickupDate: createdAt,
          deliveryDate,
          currentLat: parseFloat(faker.location.latitude()),
          currentLng: parseFloat(faker.location.longitude()),
          lastLocationUpdate: deliveryDate,
          estimatedArrival: deliveryDate,
          confirmationCode: faker.string.alphanumeric(6).toUpperCase(),
          clientId: client.id,
          delivererId: deliverer.id,
          createdAt,
          updatedAt: deliveryDate,
        },
      });
      
      deliveries.push(delivery);
      console.log(`‚úÖ Livraison factice #${i+1} cr√©√©e avec l'ID ${delivery.id} et le statut ${status}`);
    } catch (error) {
      console.log(`‚ùå Erreur lors de la cr√©ation de la livraison factice #${i+1}:`, error);
    }
  }
  
  return deliveries;
}

/**
 * Mise √† jour des moyennes de notation pour les livreurs
 */
async function updateDelivererRatings() {
  console.log('üîÑ Mise √† jour des moyennes de notation des livreurs...');
  
  // R√©cup√®re tous les livreurs
  const deliverers = await prisma.user.findMany({
    where: {
      role: UserRole.DELIVERER,
    },
    include: {
      deliverer: true,
    },
  });
  
  for (const deliverer of deliverers) {
    // S'assurer que le deliverer existe
    if (!deliverer.deliverer) {
      console.log(`‚ö†Ô∏è L'utilisateur ${deliverer.name} (${deliverer.id}) est un livreur mais n'a pas d'enregistrement deliverer associ√©`);
      continue;
    }
    
    // R√©cup√®re toutes les livraisons du livreur avec des √©valuations
    const deliveries = await prisma.delivery.findMany({
      where: {
        delivererId: deliverer.id,
        rating: {
          isNot: null,
        },
      },
      include: {
        rating: true,
      },
    });
    
    if (deliveries.length > 0) {
      // Calcule la note moyenne
      const totalRating = deliveries.reduce((sum, delivery) => {
        return sum + (delivery.rating?.rating || 0);
      }, 0);
      
      const averageRating = totalRating / deliveries.length;
      
      // Met √† jour le profil du livreur
      try {
        await prisma.deliverer.update({
          where: {
            id: deliverer.deliverer.id,
          },
          data: {
            rating: averageRating,
          },
        });
        
        console.log(`‚úÖ Mise √† jour des notes pour ${deliverer.name}: ${averageRating.toFixed(1)}/5 (${deliveries.length} √©valuations)`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Erreur lors de la mise √† jour des notes pour ${deliverer.name}: ${error}`);
      }
    } else {
      console.log(`‚ÑπÔ∏è Aucune √©valuation trouv√©e pour le livreur ${deliverer.name}`);
    }
  }
}

/**
 * G√©n√®re des √©valuations pour les livraisons
 */
async function generateRatings() {
  // R√©cup√®re toutes les livraisons termin√©es (DELIVERED ou CONFIRMED)
  const completedDeliveries = await prisma.delivery.findMany({
    where: {
      status: {
        in: [DeliveryStatus.DELIVERED, DeliveryStatus.CONFIRMED]
      },
    },
    include: {
      client: true,
      deliverer: true,
    },
  });
  
  console.log(`üìä ${completedDeliveries.length} livraisons termin√©es trouv√©es.`);
  
  // Si aucune livraison termin√©e n'est trouv√©e, on en cr√©e
  let allDeliveries = completedDeliveries;
  if (completedDeliveries.length === 0) {
    console.log('‚ö†Ô∏è Aucune livraison termin√©e trouv√©e. Cr√©ation de livraisons factices...');
    const fakeDeliveries = await createFakeDeliveries();
    
    if (fakeDeliveries.length > 0) {
      // R√©cup√®re les livraisons avec leurs relations
      allDeliveries = await prisma.delivery.findMany({
        where: {
          id: {
            in: fakeDeliveries.map(d => d.id)
          }
        },
        include: {
          client: true,
          deliverer: true,
        },
      });
      console.log(`‚ö†Ô∏è ${allDeliveries.length} livraisons factices cr√©√©es avec succ√®s.`);
    } else {
      console.log('‚ùå Impossible de cr√©er des livraisons factices.');
      return { ratingCount: 0, commentCount: 0 };
    }
  }
  
  if (allDeliveries.length === 0) {
    console.log('‚ùå Aucune livraison trouv√©e dans la base de donn√©es. Veuillez d\'abord ex√©cuter le script de seed des livraisons.');
    return { ratingCount: 0, commentCount: 0 };
  }
  
  // Force le remplacement des √©valuations existantes
  console.log(`üîÑ Suppression des √©valuations existantes...`);
  for (const delivery of allDeliveries) {
    try {
      await prisma.deliveryRating.deleteMany({
        where: {
          deliveryId: delivery.id,
        },
      });
    } catch (error) {
      console.log(`‚ö†Ô∏è Erreur lors de la suppression des √©valuations existantes: ${error}`);
    }
  }

  // Compteurs pour les statistiques
  let ratingCount = 0;
  let commentCount = 0;
  
  // Parcours les livraisons
  for (const delivery of allDeliveries) {
    // V√©rifie que les donn√©es n√©cessaires sont pr√©sentes
    if (!delivery.client || !delivery.delivererId) {
      console.log(`‚ö†Ô∏è Donn√©es incompl√®tes pour la livraison ${delivery.id}, impossible de cr√©er une √©valuation`);
      continue;
    }
    
    // 80% des livraisons re√ßoivent une √©valuation
    if (faker.number.float() <= RATING_PERCENTAGE) {
      // D√©termine si l'√©valuation sera positive, neutre ou n√©gative
      let sentiment: 'POSITIVE' | 'NEUTRAL' | 'NEGATIVE';
      const randomValue = faker.number.float();
      
      if (randomValue < COMMENT_TYPES.POSITIVE) {
        sentiment = 'POSITIVE';
      } else if (randomValue < COMMENT_TYPES.POSITIVE + COMMENT_TYPES.NEUTRAL) {
        sentiment = 'NEUTRAL';
      } else {
        sentiment = 'NEGATIVE';
      }
      
      // G√©n√®re une note en fonction du sentiment
      let rating: number;
      switch (sentiment) {
        case 'POSITIVE':
          rating = faker.number.int({ min: 4, max: 5 });
          break;
        case 'NEUTRAL':
          rating = faker.number.int({ min: 3, max: 3 });
          break;
        case 'NEGATIVE':
          rating = faker.number.int({ min: 1, max: 2 });
          break;
      }
      
      // D√©termine si l'√©valuation aura un commentaire
      const hasComment = faker.number.float() <= COMMENT_PERCENTAGE;
      
      // S√©lectionne un commentaire en fonction du sentiment
      let comment: string | null = null;
      if (hasComment) {
        switch (sentiment) {
          case 'POSITIVE':
            comment = faker.helpers.arrayElement(POSITIVE_COMMENTS);
            break;
          case 'NEUTRAL':
            comment = faker.helpers.arrayElement(NEUTRAL_COMMENTS);
            break;
          case 'NEGATIVE':
            comment = faker.helpers.arrayElement(NEGATIVE_COMMENTS);
            break;
        }
        commentCount++;
      }
      
      // Cr√©e l'√©valuation
      try {
        const createdDate = delivery.updatedAt || new Date();
        const ratingDate = faker.date.between({
          from: createdDate,
          to: addDays(createdDate, 5),
        });
        
        const deliveryRating = await prisma.deliveryRating.create({
          data: {
            deliveryId: delivery.id,
            rating,
            comment,
            createdAt: ratingDate,
          },
        });
        
        ratingCount++;
        console.log(`‚úÖ √âvaluation cr√©√©e pour la livraison ${delivery.id} (${rating}/5${comment ? ' avec commentaire' : ''})`);
      } catch (error) {
        console.log(`‚ùå Erreur lors de la cr√©ation de l'√©valuation pour la livraison ${delivery.id}: ${error}`);
      }
    }
  }
  
  console.log(`‚úÖ ${ratingCount} √©valuations cr√©√©es.`);
  console.log(`‚úÖ ${commentCount} commentaires ajout√©s.`);
  
  return {
    ratingCount,
    commentCount,
  };
}

/**
 * Fonction principale
 */
async function main() {
  console.log('üå± D√©marrage du seed des √©valuations et commentaires...');

  try {
    // V√©rifie si des √©valuations existent d√©j√†
    const existingRatings = await prisma.deliveryRating.count();
    
    if (existingRatings > 0) {
      console.log(`‚ö†Ô∏è Il existe d√©j√† ${existingRatings} √©valuations dans la base de donn√©es.`);
      const shouldContinue = process.env.FORCE_RATINGS_SEED === 'true';
      
      if (!shouldContinue) {
        console.log('‚ùå Abandon du seed. Utilisez FORCE_RATINGS_SEED=true pour forcer l\'ex√©cution.');
        return;
      }
      
      console.log('üîÑ FORCE_RATINGS_SEED=true d√©tect√©, continuation du seed...');
    }
    
    // G√©n√®re les √©valuations
    const stats = await generateRatings();
    
    if (stats.ratingCount > 0) {
      // Met √† jour les moyennes de notation des livreurs
      await updateDelivererRatings();
    }
    
    console.log('‚úÖ Seed des √©valuations et commentaires termin√© avec succ√®s !');
  } catch (error) {
    console.error('‚ùå Erreur pendant le seed des √©valuations :', error);
    throw error;
  } finally {
    // Fermeture de la connexion Prisma
    await prisma.$disconnect();
  }
}

// Ex√©cution de la fonction principale
main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

// Export pour permettre l'utilisation dans d'autres fichiers
export { main }; 