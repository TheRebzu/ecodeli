/**
 * Script de seed pour les conversations et messages
 * 
 * Ce script cr√©e des exemples de conversations et messages
 * entre diff√©rents utilisateurs du syst√®me.
 */

import { PrismaClient, UserRole } from '@prisma/client';
import { faker } from '@faker-js/faker';
import chalk from 'chalk';

// Configuration
const CONVERSATIONS_COUNT = 10;
const MAX_MESSAGES_PER_CONVERSATION = 15;

// Initialisation du client Prisma
const prisma = new PrismaClient();

// Types utilis√©s dans le script
type UserBasic = {
  id: string;
  name: string;
  role: UserRole;
  email: string;
};

type ConversationData = {
  id: string;
  participantIds: string[];
  title?: string;
  status: string;
  isArchived: boolean;
  lastMessageAt?: Date;
};

/**
 * Fonction principale de seed
 */
async function main() {
  console.log(chalk.blue('üå± D√©marrage du seed des conversations et messages...'));
  
  try {
    // R√©cup√©rer tous les utilisateurs
    const users = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        role: true,
        email: true,
      },
    });
    
    if (users.length < 2) {
      throw new Error('Pas assez d\'utilisateurs pour cr√©er des conversations. Au moins 2 utilisateurs sont n√©cessaires.');
    }
    
    console.log(`üë• ${users.length} utilisateurs r√©cup√©r√©s pour les conversations.`);
    
    // Cr√©er des conversations al√©atoires
    const conversations: ConversationData[] = [];
    for (let i = 0; i < CONVERSATIONS_COUNT; i++) {
      // Choisir 2 utilisateurs al√©atoires diff√©rents pour la conversation
      const userIndices = getRandomParticipants(users.length);
      const participants = [users[userIndices[0]], users[userIndices[1]]];
      
      // Cr√©er la conversation
      const conversation = await createConversation(
        participants, 
        faker.lorem.sentence()
      );
      
      if (conversation) {
        conversations.push(conversation);
        
        // G√©n√©rer un nombre al√©atoire de messages pour cette conversation
        const messagesCount = faker.number.int({ min: 3, max: MAX_MESSAGES_PER_CONVERSATION });
        
        // Cr√©er les messages
        await generateMessages(conversation, participants, messagesCount);
      }
    }
    
    console.log(chalk.green(`‚úÖ ${conversations.length} conversations cr√©√©es avec messages`));
    console.log(chalk.green('‚úÖ Seed des conversations et messages termin√© avec succ√®s !'));
    
  } catch (error) {
    console.error(chalk.red('‚ùå Erreur lors du seed des conversations et messages:'), error);
    throw error;
  }
}

/**
 * Cr√©e une conversation entre participants
 */
async function createConversation(participants: UserBasic[], title: string): Promise<ConversationData | null> {
  try {
    return await prisma.conversation.create({
      data: {
        title,
        participantIds: participants.map((p) => p.id),
        lastMessageAt: faker.date.recent(),
        status: faker.helpers.arrayElement(['ACTIVE', 'PENDING', 'ARCHIVED']),
        isArchived: faker.datatype.boolean(0.2), // 20% de chance d'√™tre archiv√©e
      },
    });
  } catch (error) {
    console.error('Erreur lors de la cr√©ation de la conversation:', error);
    return null;
  }
}

/**
 * G√©n√®re des messages dans une conversation
 */
async function generateMessages(conversation: ConversationData, participants: UserBasic[], count: number): Promise<void> {
  // Date de d√©part (2 jours avant)
  let messageDate = new Date(Date.now() - 2 * 24 * 60 * 60 * 1000);
  
  for (let i = 0; i < count; i++) {
    // Avancer l'heure par rapport au message pr√©c√©dent (1 minute √† 8 heures plus tard)
    messageDate = new Date(messageDate.getTime() + faker.number.int({ min: 60, max: 28800 }) * 1000);
    
    // Alterner entre les participants
    const sender = participants[i % 2];
    
    // Statut du message (plus r√©cent = plus de chance d'√™tre non lu)
    const isRecent = (count - i) <= 3;
    const status = isRecent ? 
      faker.helpers.arrayElement(['READ', 'UNREAD', 'UNREAD', 'READ']) : 
      faker.helpers.arrayElement(['READ', 'READ', 'READ', 'DELETED']);
    
    try {
      await prisma.message.create({
        data: {
          conversationId: conversation.id,
          senderId: sender.id,
          content: getMessageContent(sender, i),
          createdAt: messageDate,
          status,
          readAt: status === 'READ' ? new Date(messageDate.getTime() + 60000) : null,
          attachments: Math.random() > 0.9 ? generateAttachments() : null,
        },
      });
    } catch (error) {
      console.error('Erreur lors de la cr√©ation du message:', error);
    }
  }
  
  // Mettre √† jour lastMessageAt de la conversation
  await prisma.conversation.update({
    where: { id: conversation.id },
    data: { lastMessageAt: messageDate },
  });
}

/**
 * G√©n√®re le contenu d'un message bas√© sur le type d'exp√©diteur et la position dans la conversation
 */
function getMessageContent(sender: UserBasic, position: number): string {
  if (position === 0) {
    // Premier message de la conversation
    return getConversationStarter(sender);
  } else if (position < 3) {
    // D√©but de conversation
    return faker.lorem.sentences({ min: 1, max: 2 });
  } else {
    // Messages r√©guliers
    return faker.helpers.arrayElement([
      faker.lorem.sentences({ min: 1, max: 3 }),
      faker.lorem.paragraph(),
      faker.lorem.sentence(),
      'D\'accord',
      'Merci beaucoup !',
      'Je vais regarder √ßa.',
      '√Ä quelle heure ?',
      'O√π se trouve le point de livraison ?',
      'Pouvez-vous me confirmer la date ?',
      'Est-ce que tout est en ordre ?',
    ]);
  }
}

/**
 * G√©n√®re un message d'ouverture de conversation bas√© sur le r√¥le de l'exp√©diteur
 */
function getConversationStarter(sender: UserBasic): string {
  const roleBasedStarters: Record<string, string[]> = {
    'CLIENT': [
      'Bonjour, je souhaiterais faire livrer un colis. Est-ce possible ?',
      'Bonjour, avez-vous des disponibilit√©s pour une livraison la semaine prochaine ?',
      'J\'ai besoin d\'informations sur mes livraisons r√©centes.',
      'Bonjour, je n\'arrive pas √† voir le statut de ma derni√®re commande.',
    ],
    'DELIVERER': [
      'Bonjour, je confirme que je peux prendre en charge votre livraison.',
      'Bonjour, je suis disponible pour effectuer la livraison mentionn√©e dans l\'annonce.',
      'J\'ai des questions concernant l\'adresse de livraison.',
      'Bonjour, je serai votre livreur pour la commande #A2023.',
    ],
    'MERCHANT': [
      'Bonjour, nous avons des colis pr√™ts √† √™tre exp√©di√©s.',
      'Nous recherchons des livreurs pour des livraisons r√©guli√®res.',
      'Bonjour, pouvons-nous discuter de nos options de partenariat ?',
    ],
    'PROVIDER': [
      'Bonjour, je suis disponible pour le service demand√©.',
      'Je confirme notre rendez-vous pour le service de maintenance.',
    ],
    'ADMIN': [
      'Bonjour, je suis l\'administrateur de la plateforme. Comment puis-je vous aider ?',
      'Suite √† votre demande de support, je vous contacte pour r√©soudre le probl√®me.',
    ]
  };

  // Utiliser les starters bas√©s sur le r√¥le ou un message g√©n√©rique
  const roleStarters = roleBasedStarters[sender.role] || [faker.lorem.sentences(2)];
  return faker.helpers.arrayElement(roleStarters);
}

/**
 * G√©n√®re des pi√®ces jointes al√©atoires pour un message
 */
function generateAttachments() {
  const attachmentCount = faker.number.int({ min: 1, max: 3 });
  const attachments = [];
  
  for (let i = 0; i < attachmentCount; i++) {
    attachments.push({
      type: faker.helpers.arrayElement(['image', 'document', 'link']),
      name: faker.system.fileName(),
      url: faker.image.url(),
      size: faker.number.int({ min: 50, max: 5000 }) + 'KB',
    });
  }
  
  return attachments;
}

/**
 * Obtient 2 indices al√©atoires diff√©rents
 */
function getRandomParticipants(max: number): [number, number] {
  const first = faker.number.int({ min: 0, max: max - 1 });
  let second;
  
  do {
    second = faker.number.int({ min: 0, max: max - 1 });
  } while (second === first);
  
  return [first, second];
}

// Ex√©cuter le script
main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  }); 