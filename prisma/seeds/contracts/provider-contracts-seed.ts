import { PrismaClient, UserRole } from '@prisma/client';
import { SeedLogger } from '../utils/seed-logger';
import { SeedResult, SeedOptions, getRandomElement, getRandomDate } from '../utils/seed-helpers';
import { faker } from '@faker-js/faker';

/**
 * Seed des contrats prestataires EcoDeli
 */
export async function seedProviderContracts(
  prisma: PrismaClient,
  logger: SeedLogger,
  options: SeedOptions = {}
): Promise<SeedResult> {
  logger.startSeed('PROVIDER_CONTRACTS');
  
  const result: SeedResult = {
    entity: 'provider_contracts',
    created: 0,
    skipped: 0,
    errors: 0
  };

  // R√©cup√©rer tous les prestataires
  const providers = await prisma.user.findMany({
    where: { role: UserRole.PROVIDER },
    include: { provider: true }
  });

  if (providers.length === 0) {
    logger.warning('PROVIDER_CONTRACTS', 'Aucun prestataire trouv√© - ex√©cuter d\'abord les seeds utilisateurs');
    return result;
  }

  // V√©rifier si des contrats prestataires existent d√©j√†
  const existingProviderContracts = await prisma.contract.count({
    where: { 
      merchant: { 
        user: { 
          role: UserRole.PROVIDER 
        }
      }
    }
  });
  
  if (existingProviderContracts > 0 && !options.force) {
    logger.warning('PROVIDER_CONTRACTS', `${existingProviderContracts} contrats prestataires d√©j√† pr√©sents - utiliser force:true pour recr√©er`);
    result.skipped = existingProviderContracts;
    return result;
  }

  // Statuts de contrat possibles
  const contractStatuses = ['DRAFT', 'PENDING_SIGNATURE', 'ACTIVE', 'SUSPENDED', 'TERMINATED', 'EXPIRED', 'CANCELLED'];

  // Types de services avec param√®tres tarifaires
  const serviceTypes = {
    'Services √† domicile': { hourlyRate: [15, 35], commission: [0.15, 0.25] },
    'Nettoyage et entretien': { hourlyRate: [12, 25], commission: [0.18, 0.22] },
    'Bricolage et r√©parations': { hourlyRate: [20, 45], commission: [0.12, 0.20] },
    'Jardinage et paysagisme': { hourlyRate: [18, 40], commission: [0.15, 0.25] },
    'D√©m√©nagement et transport': { hourlyRate: [25, 50], commission: [0.10, 0.18] },
    'Services informatiques': { hourlyRate: [30, 80], commission: [0.08, 0.15] },
    'Soins et bien-√™tre': { hourlyRate: [40, 120], commission: [0.12, 0.20] },
    'Formation et coaching': { hourlyRate: [35, 100], commission: [0.10, 0.18] }
  };

  let totalContracts = 0;

  // Pour chaque prestataire, cr√©er un contrat fictif via un merchant temporaire
  for (const provider of providers) {
    try {
      logger.progress('PROVIDER_CONTRACTS', totalContracts + 1, providers.length, 
        `Traitement: ${provider.name}`);

      // Cr√©er un merchant temporaire pour ce prestataire (car Contract requiert merchantId)
      const tempMerchant = await prisma.merchant.create({
        data: {
          userId: provider.id,
          companyName: provider.provider?.companyName || `${provider.name} Services`,
          businessType: provider.provider?.serviceType || 'Services g√©n√©raux',
          address: provider.provider?.address || faker.location.streetAddress(),
          phone: provider.provider?.phone || faker.phone.number(),
          isVerified: provider.provider?.isVerified || false
        }
      });

      const serviceType = provider.provider?.serviceType || getRandomElement(Object.keys(serviceTypes));
      const isVerified = provider.provider?.isVerified || false;
      const isActive = provider.status === 'ACTIVE';
      const yearsInBusiness = provider.provider?.yearsInBusiness || faker.number.int({ min: 1, max: 15 });

      // D√©terminer le statut du contrat selon le profil
      let contractStatus: string;

      if (isVerified && isActive && yearsInBusiness >= 3) {
        // Prestataire exp√©riment√© et v√©rifi√© : contrat majoritairement actif
        contractStatus = getRandomElement(['ACTIVE', 'ACTIVE', 'ACTIVE', 'PENDING_SIGNATURE']);
      } else if (!isActive) {
        // Prestataire inactif : contrat suspendu ou expir√©
        contractStatus = getRandomElement(['SUSPENDED', 'EXPIRED', 'TERMINATED', 'CANCELLED']);
      } else {
        // Nouveau prestataire : en cours de n√©gociation
        contractStatus = getRandomElement(['DRAFT', 'PENDING_SIGNATURE', 'ACTIVE']);
      }

      // G√©n√©rer les dates coh√©rentes
      const createdDate = getRandomDate(90, 365); // Cr√©√© il y a 3 mois √† 1 an
      let signedAt = null;
      let expiresAt = null;

      if (['ACTIVE', 'SUSPENDED', 'EXPIRED', 'TERMINATED'].includes(contractStatus)) {
        signedAt = faker.date.between({
          from: createdDate,
          to: new Date(createdDate.getTime() + (30 * 24 * 60 * 60 * 1000)) // Max 30 jours apr√®s cr√©ation
        });
        
        // Date d'expiration : 12 ou 24 mois selon exp√©rience
        const contractDuration = yearsInBusiness >= 5 ? 24 : 12;
        expiresAt = new Date(signedAt.getTime() + (contractDuration * 30 * 24 * 60 * 60 * 1000));

        // Si expir√© ou termin√©, s'assurer que la date d'expiration est pass√©e
        if (contractStatus === 'EXPIRED' || contractStatus === 'TERMINATED') {
          expiresAt = faker.date.past({ years: 0.5 });
        }
      }

      // G√©n√©rer le contenu du contrat prestataire
      const contractContent = generateProviderContractContent(provider, serviceType, contractStatus, yearsInBusiness);

      // Cr√©er le contrat
      await prisma.contract.create({
        data: {
          merchantId: tempMerchant.id,
          title: `Contrat de Prestation de Services - ${serviceType}`,
          content: contractContent,
          status: contractStatus as any,
          signedAt,
          expiresAt,
          createdAt: createdDate,
          updatedAt: createdDate
        }
      });
      
      totalContracts++;
      result.created++;

    } catch (error: any) {
      logger.error('PROVIDER_CONTRACTS', `‚ùå Erreur cr√©ation contrat pour ${provider.name}: ${error.message}`);
      result.errors++;
    }
  }

  // Validation des contrats cr√©√©s
  const finalContracts = await prisma.contract.findMany({
    include: { 
      merchant: { 
        include: { user: true } 
      } 
    },
    where: {
      merchant: {
        user: {
          role: UserRole.PROVIDER
        }
      }
    }
  });
  
  if (finalContracts.length >= totalContracts - result.errors) {
    logger.validation('PROVIDER_CONTRACTS', 'PASSED', `${finalContracts.length} contrats prestataires cr√©√©s avec succ√®s`);
  } else {
    logger.validation('PROVIDER_CONTRACTS', 'FAILED', `Attendu: ${totalContracts}, Cr√©√©: ${finalContracts.length}`);
  }

  // Statistiques par statut
  const byStatus = finalContracts.reduce((acc: Record<string, number>, contract) => {
    acc[contract.status] = (acc[contract.status] || 0) + 1;
    return acc;
  }, {});

  logger.info('PROVIDER_CONTRACTS', `üìä R√©partition par statut: ${JSON.stringify(byStatus)}`);

  // Statistiques des contrats actifs
  const activeContracts = finalContracts.filter(c => c.status === 'ACTIVE');
  logger.info('PROVIDER_CONTRACTS', `‚úÖ Contrats actifs: ${activeContracts.length} (${Math.round(activeContracts.length / finalContracts.length * 100)}%)`);

  logger.endSeed('PROVIDER_CONTRACTS', result);
  return result;
}

/**
 * G√©n√®re le contenu du contrat prestataire en format JSON
 */
function generateProviderContractContent(
  provider: any,
  serviceType: string,
  contractStatus: string,
  yearsInBusiness: number
): string {
  const contractData = {
    header: {
      title: "Contrat de Prestation de Services EcoDeli",
      contractNumber: `PS-${Date.now()}-${faker.string.alphanumeric(6).toUpperCase()}`,
      parties: {
        ecodeli: "EcoDeli SAS, plateforme de mise en relation de services",
        provider: `${provider.provider?.companyName || provider.name}, prestataire de ${serviceType}`
      },
      date: new Date().toISOString().split('T')[0]
    },
    terms: {
      duration: yearsInBusiness >= 5 ? "24 mois renouvelable" : "12 mois renouvelable",
      commission: `${faker.number.float({ min: 8, max: 25 }).toFixed(2)}% par prestation`,
      hourlyRate: `${faker.number.float({ min: 15, max: 80 }).toFixed(2)}‚Ç¨ HT par heure`,
      minimumBookings: `${faker.number.int({ min: 10, max: 50 })} prestations par mois minimum`,
      serviceRadius: `${provider.provider?.serviceRadius || faker.number.int({ min: 10, max: 50 })}km de rayon maximum`,
      availability: provider.provider?.availability || "Flexible selon planning"
    },
    services: {
      platform: [
        "Profil prestataire d√©taill√© sur la plateforme",
        "Syst√®me de r√©servation en ligne",
        "Calendrier de disponibilit√©s int√©gr√©",
        "Messagerie client s√©curis√©e",
        "Notifications en temps r√©el"
      ],
      matching: [
        "Mise en relation avec clients qualifi√©s",
        "G√©olocalisation des interventions",
        "Syst√®me d'√©valuation et avis clients",
        "Historique des prestations"
      ],
      payment: [
        "Paiement s√©curis√© par la plateforme",
        "Virement automatique post-prestation",
        "Gestion automatique des factures",
        "Tableau de bord financier"
      ],
      support: yearsInBusiness >= 5 ? [
        "Support prioritaire 24h/7j",
        "Manager de compte d√©di√©",
        "Formation continue incluse",
        "API avanc√©e disponible"
      ] : [
        "Support technique 7j/7",
        "Formation initiale incluse",
        "Documentation compl√®te"
      ]
    },
    qualifications: {
      required: [
        "Justificatifs d'identit√© valides",
        "Assurance responsabilit√© civile professionnelle",
        "Qualifications m√©tier selon secteur d'activit√©",
        "Extrait de casier judiciaire",
        "Justificatif de domicile r√©cent"
      ],
      additional: yearsInBusiness >= 3 ? [
        "Certifications professionnelles reconnues",
        "R√©f√©rences clients v√©rifi√©es",
        "Portfolio de r√©alisations",
        "Formation sp√©cialis√©e continue"
      ] : [
        "Exp√©rience dans le domaine justifi√©e",
        "R√©f√©rences professionnelles"
      ]
    },
    obligations: {
      provider: [
        "Respecter les cr√©neaux de disponibilit√© annonc√©s",
        "Fournir une prestation de qualit√© professionnelle",
        "Respecter les tarifs convenus avec les clients",
        "Maintenir ses qualifications et assurances √† jour",
        "R√©pondre aux demandes clients dans les 24h",
        "Respecter la confidentialit√© des informations clients"
      ],
      ecodeli: [
        "Fournir un flux r√©gulier de demandes clients",
        "Assurer le paiement des prestations selon d√©lais convenus",
        "Maintenir la confidentialit√© des donn√©es prestataire",
        "Fournir un support technique et commercial",
        "Promouvoir les services prestataires sur la plateforme"
      ]
    },
    zones: {
      intervention: generateInterventionZones(),
      exclusions: [
        "Zones √† risque selon √©valuation s√©curitaire",
        "Territoires non couverts par l'assurance"
      ]
    },
    pricing: {
      structure: "Commission sur prestations r√©alis√©es uniquement",
      billing: "D√©duction automatique lors du paiement client",
      payment: "Virement hebdomadaire sur compte bancaire",
      penalties: contractStatus === 'ACTIVE' ? 
        "P√©nalit√©s en cas d'annulation tardive (48h)" : 
        "Syst√®me de p√©nalit√©s suspendu"
    },
    status: {
      current: contractStatus,
      lastUpdate: new Date().toISOString(),
      notes: getProviderContractStatusNote(contractStatus)
    }
  };

  return JSON.stringify(contractData, null, 2);
}

/**
 * G√©n√®re les zones d'intervention du prestataire
 */
function generateInterventionZones(): string[] {
  const zones = [
    'Centre-ville et hypercentre',
    'Quartiers r√©sidentiels p√©riph√©riques',
    'Zones commerciales et d\'activit√©s',
    'Communes limitrophes (rayon 15km)',
    'Zones rurales accessibles'
  ];
  
  // Retourner 2-4 zones al√©atoires
  const numZones = faker.number.int({ min: 2, max: 4 });
  return faker.helpers.arrayElements(zones, numZones);
}

/**
 * G√©n√®re une note selon le statut du contrat prestataire
 */
function getProviderContractStatusNote(status: string): string {
  const notes = {
    'DRAFT': "Contrat en cours de r√©daction - n√©gociation des conditions tarifaires",
    'PENDING_SIGNATURE': "En attente de signature √©lectronique et documents requis",
    'ACTIVE': "Contrat actif - prestataire autoris√© √† recevoir des demandes",
    'SUSPENDED': "Contrat suspendu - qualit√© de service insuffisante ou non-conformit√©",
    'EXPIRED': "Contrat arriv√© √† expiration - renouvellement en cours de n√©gociation",
    'TERMINATED': "Contrat r√©sili√© - non-respect des obligations contractuelles",
    'CANCELLED': "Contrat annul√© avant activation - conditions non accept√©es"
  };
  
  return notes[status as keyof typeof notes] || "Statut de contrat ind√©termin√©";
}

/**
 * Valide l'int√©grit√© des contrats prestataires
 */
export async function validateProviderContracts(
  prisma: PrismaClient,
  logger: SeedLogger
): Promise<boolean> {
  logger.info('VALIDATION', 'üîç Validation des contrats prestataires...');
  
  let isValid = true;

  // V√©rifier les contrats prestataires
  const providerContracts = await prisma.contract.findMany({
    include: {
      merchant: {
        include: { user: true }
      }
    },
    where: {
      merchant: {
        user: {
          role: UserRole.PROVIDER
        }
      }
    }
  });

  const providersCount = await prisma.user.count({ 
    where: { role: UserRole.PROVIDER } 
  });

  if (providerContracts.length === 0) {
    logger.error('VALIDATION', '‚ùå Aucun contrat prestataire trouv√©');
    isValid = false;
  } else {
    logger.success('VALIDATION', `‚úÖ ${providerContracts.length} contrats prestataires trouv√©s pour ${providersCount} prestataires`);
  }

  // V√©rifier les contrats actifs expir√©s
  const expiredActiveContracts = providerContracts.filter(contract => 
    contract.status === 'ACTIVE' && 
    contract.expiresAt && 
    contract.expiresAt < new Date()
  );

  if (expiredActiveContracts.length > 0) {
    logger.warning('VALIDATION', `‚ö†Ô∏è ${expiredActiveContracts.length} contrats prestataires actifs expir√©s √† traiter`);
  }

  // V√©rifier la coh√©rence des donn√©es JSON
  const invalidContentContracts = providerContracts.filter(contract => {
    try {
      JSON.parse(contract.content);
      return false;
    } catch {
      return true;
    }
  });

  if (invalidContentContracts.length > 0) {
    logger.error('VALIDATION', `‚ùå ${invalidContentContracts.length} contrats avec contenu JSON invalide`);
    isValid = false;
  }

  logger.success('VALIDATION', '‚úÖ Validation des contrats prestataires termin√©e');
  return isValid;
} 