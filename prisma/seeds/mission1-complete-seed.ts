#!/usr/bin/env node

/**
 * üéØ MISSION 1 - SEED COMPLET ECODELI
 *
 * Script orchestrateur principal qui ex√©cute tous les seeds
 * dans l'ordre correct et g√©n√®re un rapport de mission complet.
 *
 * Ordre d'ex√©cution :
 * 1. V√©rification environnement
 * 2. Seeds de base (permissions, cat√©gories)
 * 3. Seeds de services (types, disponibilit√©s, notations)
 * 4. Seeds d'audit et notifications
 * 5. Seeds de configuration syst√®me
 * 6. Seeds de tarification
 * 7. Rapport final et validation globale
 */

import { PrismaClient } from '@prisma/client';
import { performance } from 'perf_hooks';

// Import des utilitaires
import { SeedLogger } from './utils/seed-logger';
import { SeedCleaner } from './utils/seed-cleaner';
import { SeedValidator } from './utils/seed-validator';
import { SeedResult, SeedOptions } from './utils/seed-helpers';

// Import des seeds de base
import { seedPermissions } from './base/permissions-seed';
import { seedServiceCategories } from './base/service-categories-seed';

// Import des seeds de services
import { seedServiceTypes } from './services/service-types-seed';
import { seedProviderAvailability } from './services/provider-availability-seed';
import { seedServiceRatings } from './services/service-ratings-seed';

// Import des seeds d'infrastructure
import { seedNotificationTemplates } from './notifications/notification-templates-seed';
import { seedAuditLogs } from './audit/audit-logs-seed';
import { seedSystemSettings } from './config/system-settings-seed';
import { seedPricingRules } from './config/pricing-rules-seed';

// Import des validateurs
import { validateAuditLogs } from './audit/audit-logs-seed';
import { validateSystemSettings } from './config/system-settings-seed';
import { validatePricingRules } from './config/pricing-rules-seed';

/**
 * Interface pour le r√©sultat de mission
 */
interface MissionResult {
  success: boolean;
  totalSeeds: number;
  totalCreated: number;
  totalSkipped: number;
  totalErrors: number;
  executionTime: number;
  seedResults: Record<string, SeedResult>;
  environment: any;
  summary: string[];
}

/**
 * Configuration de la mission
 */
interface MissionConfig {
  clean: boolean;
  verbose: boolean;
  validate: boolean;
  dryRun: boolean;
  force: boolean;
  skipValidation: boolean;
}

/**
 * Script principal de la Mission 1
 */
async function executeMission1(config: MissionConfig): Promise<MissionResult> {
  const startTime = performance.now();
  const logger = new SeedLogger(config.verbose);
  const prisma = new PrismaClient();

  logger.info('MISSION1', 'üöÄ D√âMARRAGE MISSION 1 - SEED COMPLET ECODELI');
  logger.info('MISSION1', '='.repeat(80));

  const result: MissionResult = {
    success: false,
    totalSeeds: 0,
    totalCreated: 0,
    totalSkipped: 0,
    totalErrors: 0,
    executionTime: 0,
    seedResults: {},
    environment: {},
    summary: [],
  };

  try {
    // === PHASE 1: V√âRIFICATION ENVIRONNEMENT ===
    logger.info('MISSION1', "üîç PHASE 1: V√©rification de l'environnement...");

    result.environment = await checkEnvironment(prisma, logger);

    if (!result.environment.isValid && !config.force) {
      throw new Error('Environnement non valide - utiliser --force pour continuer');
    }

    // === PHASE 2: NETTOYAGE (OPTIONNEL) ===
    if (config.clean) {
      logger.info('MISSION1', 'üßπ PHASE 2: Nettoyage de la base de donn√©es...');

      const cleaner = new SeedCleaner();
      await cleaner.cleanAll(prisma, logger, { dryRun: config.dryRun });
    }

    // === PHASE 3: SEEDS DE BASE ===
    logger.info('MISSION1', 'üèóÔ∏è PHASE 3: Ex√©cution des seeds de base...');

    const baseOptions: SeedOptions = {
      verbose: config.verbose,
      force: config.force,
      dryRun: config.dryRun,
    };

    // Seeds de base
    result.seedResults.permissions = await seedPermissions(prisma, logger, baseOptions);
    result.seedResults.serviceCategories = await seedServiceCategories(prisma, logger, baseOptions);

    // === PHASE 4: SEEDS DE SERVICES ===
    logger.info('MISSION1', '‚öôÔ∏è PHASE 4: Ex√©cution des seeds de services...');

    result.seedResults.serviceTypes = await seedServiceTypes(prisma, logger, baseOptions);
    result.seedResults.providerAvailability = await seedProviderAvailability(
      prisma,
      logger,
      baseOptions
    );
    result.seedResults.serviceRatings = await seedServiceRatings(prisma, logger, baseOptions);

    // === PHASE 5: SEEDS D'INFRASTRUCTURE ===
    logger.info('MISSION1', "üì° PHASE 5: Ex√©cution des seeds d'infrastructure...");

    result.seedResults.notificationTemplates = await seedNotificationTemplates(
      prisma,
      logger,
      baseOptions
    );
    result.seedResults.auditLogs = await seedAuditLogs(prisma, logger, baseOptions);

    // === PHASE 6: SEEDS DE CONFIGURATION ===
    logger.info('MISSION1', '‚öôÔ∏è PHASE 6: Ex√©cution des seeds de configuration...');

    result.seedResults.systemSettings = await seedSystemSettings(prisma, logger, baseOptions);
    result.seedResults.pricingRules = await seedPricingRules(prisma, logger, baseOptions);

    // === PHASE 7: VALIDATION GLOBALE ===
    if (config.validate && !config.skipValidation) {
      logger.info('MISSION1', '‚úÖ PHASE 7: Validation globale...');

      const validator = new SeedValidator();
      const validationResults = await validator.validateAll(prisma, logger);

      // Validations sp√©cialis√©es
      await validateAuditLogs(prisma, logger);
      await validateSystemSettings(prisma, logger);
      await validatePricingRules(prisma, logger);

      result.environment.validationResults = validationResults;
    }

    // === CALCUL DES STATISTIQUES ===
    result.totalSeeds = Object.keys(result.seedResults).length;

    for (const seedResult of Object.values(result.seedResults)) {
      result.totalCreated += seedResult.created;
      result.totalSkipped += seedResult.skipped;
      result.totalErrors += seedResult.errors;
    }

    result.success = result.totalErrors === 0;
    result.executionTime = performance.now() - startTime;

    // === PHASE 8: RAPPORT FINAL ===
    logger.info('MISSION1', 'üìä PHASE 8: G√©n√©ration du rapport final...');
    await generateFinalReport(result, logger, config);
  } catch (error: any) {
    logger.error('MISSION1', `‚ùå Erreur critique: ${error.message}`);
    result.success = false;
    result.summary.push(`√âCHEC: ${error.message}`);
  } finally {
    await prisma.$disconnect();
    result.executionTime = performance.now() - startTime;
  }

  return result;
}

/**
 * V√©rifie l'environnement de d√©ploiement
 */
async function checkEnvironment(prisma: PrismaClient, logger: SeedLogger): Promise<any> {
  logger.info('ENV_CHECK', "üîç V√©rification de l'environnement...");

  const environment = {
    isValid: true,
    checks: {},
    warnings: [],
    errors: [],
  };

  try {
    // V√©rifier la connexion base de donn√©es
    await prisma.$connect();
    environment.checks.database = '‚úÖ Connexion base de donn√©es OK';
    logger.success('ENV_CHECK', 'Connexion base de donn√©es √©tablie');
  } catch (error: any) {
    environment.checks.database = `‚ùå Erreur connexion: ${error.message}`;
    environment.errors.push('Base de donn√©es inaccessible');
    environment.isValid = false;
    logger.error('ENV_CHECK', `Erreur connexion BD: ${error.message}`);
  }

  // V√©rifier les variables d'environnement critiques
  const requiredEnvVars = ['DATABASE_URL', 'NODE_ENV'];
  const missingEnvVars: string[] = [];

  for (const envVar of requiredEnvVars) {
    if (!process.env[envVar]) {
      missingEnvVars.push(envVar);
    }
  }

  if (missingEnvVars.length > 0) {
    environment.checks.envVars = `‚ö†Ô∏è Variables manquantes: ${missingEnvVars.join(', ')}`;
    environment.warnings.push(`Variables d'environnement manquantes: ${missingEnvVars.join(', ')}`);
    logger.warning('ENV_CHECK', `Variables manquantes: ${missingEnvVars.join(', ')}`);
  } else {
    environment.checks.envVars = "‚úÖ Variables d'environnement OK";
    logger.success('ENV_CHECK', "Variables d'environnement configur√©es");
  }

  // V√©rifier l'espace disque (simulation)
  const diskSpace = Math.random() * 100; // Simulation
  if (diskSpace < 10) {
    environment.checks.disk = `‚ö†Ô∏è Espace disque faible: ${diskSpace.toFixed(1)}%`;
    environment.warnings.push('Espace disque faible');
    logger.warning('ENV_CHECK', `Espace disque: ${diskSpace.toFixed(1)}%`);
  } else {
    environment.checks.disk = `‚úÖ Espace disque OK: ${diskSpace.toFixed(1)}%`;
    logger.success('ENV_CHECK', `Espace disque: ${diskSpace.toFixed(1)}%`);
  }

  // V√©rifier les permissions (simulation)
  environment.checks.permissions = '‚úÖ Permissions fichiers OK';
  logger.success('ENV_CHECK', 'Permissions syst√®me valid√©es');

  // Version Node.js
  environment.checks.nodeVersion = `‚úÖ Node.js ${process.version}`;
  logger.success('ENV_CHECK', `Node.js version: ${process.version}`);

  // R√©sum√© de l'environnement
  if (environment.isValid) {
    logger.success('ENV_CHECK', "‚úÖ Environnement valid√© pour l'ex√©cution");
  } else {
    logger.error('ENV_CHECK', `‚ùå Environnement non valide: ${environment.errors.join(', ')}`);
  }

  if (environment.warnings.length > 0) {
    logger.warning('ENV_CHECK', `‚ö†Ô∏è Avertissements: ${environment.warnings.join(', ')}`);
  }

  return environment;
}

/**
 * G√©n√®re le rapport final de mission
 */
async function generateFinalReport(
  result: MissionResult,
  logger: SeedLogger,
  config: MissionConfig
): Promise<void> {
  logger.info('REPORT', 'üìä G√©n√©ration du rapport de mission...');
  logger.info('REPORT', '='.repeat(80));

  // En-t√™te du rapport
  const successIcon = result.success ? '‚úÖ' : '‚ùå';
  const statusText = result.success ? 'SUCC√àS' : '√âCHEC';

  logger.info('REPORT', `${successIcon} MISSION 1 TERMIN√âE - STATUT: ${statusText}`);
  logger.info('REPORT', '');

  // Statistiques globales
  logger.info('REPORT', 'üìä STATISTIQUES GLOBALES:');
  logger.info('REPORT', `   ‚Ä¢ Seeds ex√©cut√©s: ${result.totalSeeds}`);
  logger.info('REPORT', `   ‚Ä¢ Entit√©s cr√©√©es: ${result.totalCreated.toLocaleString('fr-FR')}`);
  logger.info('REPORT', `   ‚Ä¢ Entit√©s ignor√©es: ${result.totalSkipped.toLocaleString('fr-FR')}`);
  logger.info('REPORT', `   ‚Ä¢ Erreurs: ${result.totalErrors}`);
  logger.info('REPORT', `   ‚Ä¢ Temps d'ex√©cution: ${(result.executionTime / 1000).toFixed(2)}s`);
  logger.info('REPORT', '');

  // D√©tail par seed
  logger.info('REPORT', 'üìã D√âTAIL PAR SEED:');
  for (const [seedName, seedResult] of Object.entries(result.seedResults)) {
    const icon = seedResult.errors > 0 ? '‚ùå' : '‚úÖ';
    const successRate =
      seedResult.created + seedResult.skipped > 0
        ? ((seedResult.created / (seedResult.created + seedResult.skipped)) * 100).toFixed(1)
        : '0';

    logger.info(
      'REPORT',
      `   ${icon} ${seedName}: ${seedResult.created} cr√©√©s, ${seedResult.skipped} ignor√©s, ${seedResult.errors} erreurs (${successRate}%)`
    );
  }
  logger.info('REPORT', '');

  // Configuration utilis√©e
  logger.info('REPORT', '‚öôÔ∏è CONFIGURATION:');
  logger.info('REPORT', `   ‚Ä¢ Mode nettoyage: ${config.clean ? 'OUI' : 'NON'}`);
  logger.info('REPORT', `   ‚Ä¢ Mode verbeux: ${config.verbose ? 'OUI' : 'NON'}`);
  logger.info('REPORT', `   ‚Ä¢ Validation: ${config.validate ? 'OUI' : 'NON'}`);
  logger.info('REPORT', `   ‚Ä¢ Mode test: ${config.dryRun ? 'OUI' : 'NON'}`);
  logger.info('REPORT', `   ‚Ä¢ Mode force: ${config.force ? 'OUI' : 'NON'}`);
  logger.info('REPORT', '');

  // Environnement
  logger.info('REPORT', 'üåç ENVIRONNEMENT:');
  for (const [check, status] of Object.entries(result.environment.checks)) {
    logger.info('REPORT', `   ‚Ä¢ ${check}: ${status}`);
  }

  if (result.environment.warnings.length > 0) {
    logger.info('REPORT', '');
    logger.info('REPORT', '‚ö†Ô∏è AVERTISSEMENTS:');
    result.environment.warnings.forEach((warning: string) => {
      logger.info('REPORT', `   ‚Ä¢ ${warning}`);
    });
  }

  if (result.environment.errors.length > 0) {
    logger.info('REPORT', '');
    logger.info('REPORT', '‚ùå ERREURS:');
    result.environment.errors.forEach((error: string) => {
      logger.info('REPORT', `   ‚Ä¢ ${error}`);
    });
  }

  // Recommandations
  logger.info('REPORT', '');
  logger.info('REPORT', 'üí° RECOMMANDATIONS:');

  if (result.success) {
    logger.info('REPORT', '   ‚úÖ Mission accomplie avec succ√®s !');
    logger.info('REPORT', "   üìù Vous pouvez maintenant utiliser l'application EcoDeli");
    logger.info('REPORT', '   üöÄ Prochaine √©tape: D√©marrer le serveur de d√©veloppement');
  } else {
    logger.info('REPORT', '   ‚ùå Mission √©chou√©e - r√©solution requise');
    logger.info('REPORT', '   üîß Corriger les erreurs et relancer avec --force');
    logger.info('REPORT', "   üìû Contacter l'√©quipe technique si les probl√®mes persistent");
  }

  // Informations sur les commandes utiles
  logger.info('REPORT', '');
  logger.info('REPORT', 'üõ†Ô∏è COMMANDES UTILES:');
  logger.info('REPORT', '   ‚Ä¢ Validation seule: pnpm seed:validate');
  logger.info('REPORT', '   ‚Ä¢ Nettoyage: pnpm seed:clean');
  logger.info('REPORT', '   ‚Ä¢ Seeds de base: pnpm seed:base');
  logger.info('REPORT', '   ‚Ä¢ Relancer mission: pnpm seed:mission1 --force');

  logger.info('REPORT', '');
  logger.info('REPORT', '='.repeat(80));
  logger.info('REPORT', `üéØ MISSION 1 TERMIN√âE - ${statusText}`);
  logger.info('REPORT', '='.repeat(80));
}

/**
 * Parse les arguments de ligne de commande
 */
function parseArguments(): MissionConfig {
  const args = process.argv.slice(2);

  return {
    clean: args.includes('--clean'),
    verbose: args.includes('--verbose') || args.includes('-v'),
    validate: !args.includes('--no-validate'),
    dryRun: args.includes('--dry-run'),
    force: args.includes('--force'),
    skipValidation: args.includes('--skip-validation'),
  };
}

/**
 * Affiche l'aide
 */
function showHelp(): void {
  console.log(`
üéØ MISSION 1 - SEED COMPLET ECODELI

USAGE:
  node mission1-complete-seed.ts [OPTIONS]
  pnpm seed:mission1 [OPTIONS]

OPTIONS:
  --clean             Nettoyer la base avant d'ex√©cuter les seeds
  --verbose, -v       Mode verbeux (affichage d√©taill√©)
  --no-validate       D√©sactiver la validation post-seed
  --dry-run           Mode test (simulation sans modification BD)
  --force             Forcer l'ex√©cution m√™me en cas d'avertissements
  --skip-validation   Ignorer les validations sp√©cialis√©es
  --help, -h          Afficher cette aide

EXEMPLES:
  pnpm seed:mission1                    # Ex√©cution standard
  pnpm seed:mission1 --clean --verbose  # Nettoyage + mode verbeux
  pnpm seed:mission1 --dry-run          # Test sans modification
  pnpm seed:mission1 --force            # Forcer l'ex√©cution

DESCRIPTION:
  Ex√©cute tous les seeds EcoDeli dans l'ordre optimal :
  1. V√©rification environnement
  2. Seeds de base (permissions, cat√©gories)
  3. Seeds de services (types, disponibilit√©s, notations)  
  4. Seeds d'infrastructure (notifications, audit)
  5. Seeds de configuration (syst√®me, tarification)
  6. Validation globale et rapport final

SUPPORT:
  Documentation: docs/seeds/
  Issues: github.com/ecodeli/seeds/issues
`);
}

/**
 * Point d'entr√©e principal
 */
async function main(): Promise<void> {
  const args = process.argv.slice(2);

  // Afficher l'aide si demand√©e
  if (args.includes('--help') || args.includes('-h')) {
    showHelp();
    process.exit(0);
  }

  const config = parseArguments();

  try {
    const result = await executeMission1(config);

    // Code de sortie selon le r√©sultat
    process.exit(result.success ? 0 : 1);
  } catch (error: any) {
    console.error(`‚ùå Erreur fatale: ${error.message}`);
    console.error(error.stack);
    process.exit(1);
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erreur non g√©r√©e:', error);
    process.exit(1);
  });
}

export { executeMission1, MissionConfig, MissionResult };
