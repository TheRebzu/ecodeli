#!/bin/bash

# Script de test complet du workflow d'annonces EcoDeli
# Teste le cycle complet: cr√©ation ‚Üí paiement ‚Üí matching ‚Üí livraison ‚Üí validation ‚Üí facture

set -e

# Configuration
BASE_URL="http://localhost:3000"
API_BASE="$BASE_URL/api"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables globales
CLIENT_TOKEN=""
DELIVERER_TOKEN=""
ADMIN_TOKEN=""
ANNOUNCEMENT_ID=""
PAYMENT_INTENT_ID=""
VALIDATION_CODE=""

echo -e "${BLUE}üöÄ Test du workflow complet d'annonces EcoDeli${NC}"
echo "=========================================="

# Fonction d'affichage des r√©sultats
print_result() {
    local status=$1
    local message=$2
    local response=$3
    
    if [ "$status" = "success" ]; then
        echo -e "${GREEN}‚úÖ $message${NC}"
    else
        echo -e "${RED}‚ùå $message${NC}"
        if [ ! -z "$response" ]; then
            echo -e "${YELLOW}R√©ponse: $response${NC}"
        fi
        exit 1
    fi
}

# Fonction pour faire une requ√™te HTTP
make_request() {
    local method=$1
    local url=$2
    local headers=$3
    local data=$4
    local expected_status=${5:-200}
    
    echo -e "${BLUE}‚û°Ô∏è  $method $url${NC}"
    
    local response=$(curl -s -w "\n%{http_code}" \
        -X "$method" \
        -H "Content-Type: application/json" \
        $headers \
        ${data:+-d "$data"} \
        "$url")
    
    local body=$(echo "$response" | head -n -1)
    local status_code=$(echo "$response" | tail -n 1)
    
    if [ "$status_code" -eq "$expected_status" ]; then
        echo -e "${GREEN}‚úÖ Status: $status_code${NC}"
        echo "$body"
        return 0
    else
        echo -e "${RED}‚ùå Status: $status_code (attendu: $expected_status)${NC}"
        echo -e "${YELLOW}Body: $body${NC}"
        return 1
    fi
}

# Test 1: V√©rifier l'√©tat du serveur
echo -e "\n${YELLOW}üìä 1. V√©rification de l'√©tat du serveur${NC}"
echo "============================================"

if make_request "GET" "$API_BASE/health" "" "" 200; then
    print_result "success" "Serveur op√©rationnel"
else
    print_result "error" "Serveur inaccessible"
fi

# Test 2: Authentification des utilisateurs de test
echo -e "\n${YELLOW}üîê 2. Authentification des utilisateurs${NC}"
echo "========================================"

# Login client
echo -e "\n${BLUE}üßë‚Äçüíº Connexion client...${NC}"
CLIENT_AUTH=$(make_request "POST" "$API_BASE/auth/login" "" '{
    "email": "client-complete@test.com",
    "password": "Test123!"
}' 200)

if echo "$CLIENT_AUTH" | grep -q "token"; then
    CLIENT_TOKEN=$(echo "$CLIENT_AUTH" | jq -r '.token // .access_token // .sessionToken')
    print_result "success" "Client connect√©"
else
    print_result "error" "√âchec connexion client" "$CLIENT_AUTH"
fi

# Login livreur
echo -e "\n${BLUE}üöö Connexion livreur...${NC}"
DELIVERER_AUTH=$(make_request "POST" "$API_BASE/auth/login" "" '{
    "email": "deliverer-complete@test.com", 
    "password": "Test123!"
}' 200)

if echo "$DELIVERER_AUTH" | grep -q "token"; then
    DELIVERER_TOKEN=$(echo "$DELIVERER_AUTH" | jq -r '.token // .access_token // .sessionToken')
    print_result "success" "Livreur connect√©"
else
    print_result "error" "√âchec connexion livreur" "$DELIVERER_AUTH"
fi

# Login admin
echo -e "\n${BLUE}üëë Connexion admin...${NC}"
ADMIN_AUTH=$(make_request "POST" "$API_BASE/auth/login" "" '{
    "email": "admin-complete@test.com",
    "password": "Test123!"
}' 200)

if echo "$ADMIN_AUTH" | grep -q "token"; then
    ADMIN_TOKEN=$(echo "$ADMIN_AUTH" | jq -r '.token // .access_token // .sessionToken')
    print_result "success" "Admin connect√©"
else
    print_result "error" "√âchec connexion admin" "$ADMIN_AUTH"
fi

# Test 3: Cr√©ation d'une annonce
echo -e "\n${YELLOW}üì¶ 3. Cr√©ation d'une annonce${NC}"
echo "============================="

ANNOUNCEMENT_DATA='{
    "title": "Test livraison documents urgents",
    "description": "Livraison de documents importants pour test API",
    "type": "DOCUMENT",
    "isUrgent": true,
    "pickupAddress": "110 rue de Flandre, 75019 Paris",
    "deliveryAddress": "1 Place du Ch√¢telet, 75001 Paris",
    "pickupDate": "'$(date -d '+1 day' -Iseconds)'",
    "deliveryDate": "'$(date -d '+1 day +2 hours' -Iseconds)'",
    "basePrice": 15.50,
    "currency": "EUR",
    "weight": 0.5,
    "dimensions": {
        "length": 30,
        "width": 20,
        "height": 5
    },
    "specialInstructions": "Fragile - √Ä manipuler avec pr√©caution"
}'

ANNOUNCEMENT_RESPONSE=$(make_request "POST" "$API_BASE/client/announcements" \
    "-H \"Authorization: Bearer $CLIENT_TOKEN\"" \
    "$ANNOUNCEMENT_DATA" 201)

if echo "$ANNOUNCEMENT_RESPONSE" | grep -q "id"; then
    ANNOUNCEMENT_ID=$(echo "$ANNOUNCEMENT_RESPONSE" | jq -r '.id')
    print_result "success" "Annonce cr√©√©e (ID: $ANNOUNCEMENT_ID)"
else
    print_result "error" "√âchec cr√©ation annonce" "$ANNOUNCEMENT_RESPONSE"
fi

# Test 4: Cr√©ation du PaymentIntent
echo -e "\n${YELLOW}üí≥ 4. Cr√©ation du paiement${NC}"
echo "============================"

PAYMENT_RESPONSE=$(make_request "POST" "$API_BASE/client/announcements/$ANNOUNCEMENT_ID/payment" \
    "-H \"Authorization: Bearer $CLIENT_TOKEN\"" \
    '{"confirmImmediately": false}' 201)

if echo "$PAYMENT_RESPONSE" | grep -q "paymentIntent"; then
    PAYMENT_INTENT_ID=$(echo "$PAYMENT_RESPONSE" | jq -r '.paymentIntent.id')
    CLIENT_SECRET=$(echo "$PAYMENT_RESPONSE" | jq -r '.paymentIntent.clientSecret')
    print_result "success" "PaymentIntent cr√©√© (ID: $PAYMENT_INTENT_ID)"
else
    print_result "error" "√âchec cr√©ation PaymentIntent" "$PAYMENT_RESPONSE"
fi

# Test 5: Confirmation du paiement (simulation)
echo -e "\n${YELLOW}‚úÖ 5. Confirmation du paiement${NC}"
echo "================================="

# Simulation d'un payment method (normalement fait c√¥t√© client avec Stripe)
PAYMENT_CONFIRM=$(make_request "PUT" "$API_BASE/client/announcements/$ANNOUNCEMENT_ID/payment" \
    "-H \"Authorization: Bearer $CLIENT_TOKEN\"" \
    '{"paymentMethodId": "pm_card_visa_test", "returnUrl": "https://ecodeli.fr/success"}' 200)

if echo "$PAYMENT_CONFIRM" | grep -q "success"; then
    print_result "success" "Paiement confirm√© - Annonce activ√©e"
else
    print_result "error" "√âchec confirmation paiement" "$PAYMENT_CONFIRM"
fi

# Test 6: R√©cup√©ration de l'annonce active
echo -e "\n${YELLOW}üìã 6. V√©rification de l'annonce activ√©e${NC}"
echo "======================================="

ANNOUNCEMENT_STATUS=$(make_request "GET" "$API_BASE/client/announcements/$ANNOUNCEMENT_ID" \
    "-H \"Authorization: Bearer $CLIENT_TOKEN\"" "" 200)

if echo "$ANNOUNCEMENT_STATUS" | grep -q "ACTIVE"; then
    print_result "success" "Annonce bien activ√©e apr√®s paiement"
else
    print_result "error" "Statut d'annonce incorrect" "$ANNOUNCEMENT_STATUS"
fi

# Test 7: Matching et acceptation par livreur (simulation)
echo -e "\n${YELLOW}üöö 7. Simulation matching et acceptation${NC}"
echo "========================================"

# Note: En vrai, ceci serait fait via l'interface livreur ou notifications push
# Ici on simule l'acceptation directe par API admin
DELIVERY_CREATION=$(make_request "POST" "$API_BASE/admin/deliveries" \
    "-H \"Authorization: Bearer $ADMIN_TOKEN\"" \
    '{
        "announcementId": "'$ANNOUNCEMENT_ID'",
        "delivererId": "deliverer-test-id",
        "estimatedPickupTime": "'$(date -d '+30 minutes' -Iseconds)'",
        "estimatedDeliveryTime": "'$(date -d '+90 minutes' -Iseconds)'"
    }' 201)

if echo "$DELIVERY_CREATION" | grep -q "id"; then
    DELIVERY_ID=$(echo "$DELIVERY_CREATION" | jq -r '.id')
    print_result "success" "Livraison cr√©√©e et assign√©e (ID: $DELIVERY_ID)"
else
    print_result "error" "√âchec cr√©ation livraison" "$DELIVERY_CREATION"
fi

# Test 8: Suivi en temps r√©el
echo -e "\n${YELLOW}üìç 8. Test du suivi en temps r√©el${NC}"
echo "================================="

TRACKING_RESPONSE=$(make_request "GET" "$API_BASE/client/announcements/$ANNOUNCEMENT_ID/tracking" \
    "-H \"Authorization: Bearer $CLIENT_TOKEN\"" "" 200)

if echo "$TRACKING_RESPONSE" | grep -q "delivery"; then
    print_result "success" "Donn√©es de tracking r√©cup√©r√©es"
    
    # Afficher un r√©sum√© du tracking
    echo -e "${BLUE}üìä R√©sum√© du tracking:${NC}"
    echo "$TRACKING_RESPONSE" | jq -r '
        "Status: " + .delivery.status + 
        "\nProgr√®s: " + (.delivery.progress.percentage | tostring) + "%" +
        "\n√âtape: " + .delivery.progress.currentStep
    '
else
    print_result "error" "√âchec r√©cup√©ration tracking" "$TRACKING_RESPONSE"
fi

# Test 9: Simulation progression livraison
echo -e "\n${YELLOW}üîÑ 9. Simulation de la progression${NC}"
echo "================================="

# Simulation des √©tapes de livraison
DELIVERY_STATUSES=("ACCEPTED" "PICKED_UP" "IN_TRANSIT" "OUT_FOR_DELIVERY")

for status in "${DELIVERY_STATUSES[@]}"; do
    echo -e "\n${BLUE}üì¶ Mise √† jour statut: $status${NC}"
    
    STATUS_UPDATE=$(make_request "PUT" "$API_BASE/admin/deliveries/$DELIVERY_ID" \
        "-H \"Authorization: Bearer $ADMIN_TOKEN\"" \
        '{
            "status": "'$status'",
            "message": "Statut mis √† jour automatiquement - Test API",
            "location": {"lat": 48.8566, "lng": 2.3522}
        }' 200)
    
    if echo "$STATUS_UPDATE" | grep -q "success\|updated"; then
        print_result "success" "Statut mis √† jour: $status"
        sleep 1
    else
        print_result "error" "√âchec mise √† jour statut $status" "$STATUS_UPDATE"
    fi
done

# Test 10: G√©n√©ration du code de validation
echo -e "\n${YELLOW}üî¢ 10. R√©cup√©ration du code de validation${NC}"
echo "========================================="

VALIDATION_CODE_RESPONSE=$(make_request "GET" "$API_BASE/client/announcements/$ANNOUNCEMENT_ID/validation-code" \
    "-H \"Authorization: Bearer $CLIENT_TOKEN\"" "" 200)

if echo "$VALIDATION_CODE_RESPONSE" | grep -q "validation"; then
    VALIDATION_CODE=$(echo "$VALIDATION_CODE_RESPONSE" | jq -r '.validation.code')
    print_result "success" "Code de validation g√©n√©r√©: $VALIDATION_CODE"
    
    # Afficher les d√©tails du code
    echo -e "${BLUE}üìã D√©tails du code:${NC}"
    echo "$VALIDATION_CODE_RESPONSE" | jq -r '
        "Code: " + .validation.code +
        "\nExpire: " + .validation.expiresAt +
        "\nTemps restant: " + .validation.timeRemainingFormatted
    '
else
    print_result "error" "√âchec g√©n√©ration code validation" "$VALIDATION_CODE_RESPONSE"
fi

# Test 11: Validation de la livraison
echo -e "\n${YELLOW}‚úÖ 11. Validation de la livraison${NC}"
echo "================================="

VALIDATION_RESPONSE=$(make_request "POST" "$API_BASE/client/announcements/$ANNOUNCEMENT_ID/validate" \
    "-H \"Authorization: Bearer $CLIENT_TOKEN\"" \
    '{
        "validationCode": "'$VALIDATION_CODE'",
        "location": {"lat": 48.857, "lng": 2.352},
        "notes": "Livraison re√ßue en parfait √©tat - Test API"
    }' 200)

if echo "$VALIDATION_RESPONSE" | grep -q "success"; then
    print_result "success" "Livraison valid√©e avec succ√®s"
    
    # Afficher les prochaines √©tapes
    echo -e "${BLUE}üìã Prochaines √©tapes:${NC}"
    echo "$VALIDATION_RESPONSE" | jq -r '.nextSteps[]'
else
    print_result "error" "√âchec validation livraison" "$VALIDATION_RESPONSE"
fi

# Test 12: V√©rification de la facture
echo -e "\n${YELLOW}üßæ 12. V√©rification de la facture${NC}"
echo "================================="

# Attendre un peu pour que la facture soit g√©n√©r√©e
sleep 2

INVOICE_RESPONSE=$(make_request "GET" "$API_BASE/client/announcements/$ANNOUNCEMENT_ID/invoice" \
    "-H \"Authorization: Bearer $CLIENT_TOKEN\"" "" 200)

if echo "$INVOICE_RESPONSE" | grep -q "invoice"; then
    print_result "success" "Facture g√©n√©r√©e automatiquement"
    
    # Afficher les d√©tails de la facture
    echo -e "${BLUE}üìã D√©tails de la facture:${NC}"
    echo "$INVOICE_RESPONSE" | jq -r '
        "Num√©ro: " + .invoice.invoiceNumber +
        "\nMontant: " + (.invoice.total | tostring) + " " + .invoice.currency +
        "\nStatut: " + .invoice.status +
        "\nURL PDF: " + .invoice.pdfUrl
    '
else
    print_result "error" "√âchec r√©cup√©ration facture" "$INVOICE_RESPONSE"
fi

# Test 13: Test de l'annulation (sur une nouvelle annonce)
echo -e "\n${YELLOW}‚ùå 13. Test d'annulation d'annonce${NC}"
echo "==================================="

# Cr√©er une nouvelle annonce pour tester l'annulation
CANCEL_ANNOUNCEMENT=$(make_request "POST" "$API_BASE/client/announcements" \
    "-H \"Authorization: Bearer $CLIENT_TOKEN\"" \
    '{
        "title": "Test annulation", 
        "description": "Annonce pour test annulation",
        "type": "PACKAGE",
        "pickupAddress": "110 rue de Flandre, 75019 Paris",
        "deliveryAddress": "1 Place du Ch√¢telet, 75001 Paris",
        "basePrice": 10.00
    }' 201)

if echo "$CANCEL_ANNOUNCEMENT" | grep -q "id"; then
    CANCEL_ID=$(echo "$CANCEL_ANNOUNCEMENT" | jq -r '.id')
    
    # Tester l'annulation
    CANCELLATION_RESPONSE=$(make_request "POST" "$API_BASE/client/announcements/$CANCEL_ID/cancel" \
        "-H \"Authorization: Bearer $CLIENT_TOKEN\"" \
        '{
            "reason": "Test annulation automatique via script API",
            "confirmCancel": true
        }' 200)
    
    if echo "$CANCELLATION_RESPONSE" | grep -q "success"; then
        print_result "success" "Annulation test√©e avec succ√®s"
    else
        print_result "error" "√âchec test annulation" "$CANCELLATION_RESPONSE"
    fi
else
    print_result "error" "√âchec cr√©ation annonce test annulation"
fi

# Test 14: V√©rification finale
echo -e "\n${YELLOW}üîç 14. V√©rification finale du workflow${NC}"
echo "======================================"

FINAL_CHECK=$(make_request "GET" "$API_BASE/client/announcements/$ANNOUNCEMENT_ID" \
    "-H \"Authorization: Bearer $CLIENT_TOKEN\"" "" 200)

if echo "$FINAL_CHECK" | grep -q "COMPLETED"; then
    print_result "success" "Workflow termin√© - Annonce en statut COMPLETED"
    
    # R√©sum√© final
    echo -e "\n${GREEN}üéâ R√âSUM√â DU TEST COMPLET${NC}"
    echo "========================="
    echo -e "${GREEN}‚úÖ Cr√©ation d'annonce${NC}"
    echo -e "${GREEN}‚úÖ Paiement Stripe${NC}"
    echo -e "${GREEN}‚úÖ G√©ocodage d'adresses${NC}"
    echo -e "${GREEN}‚úÖ Matching et assignation${NC}"
    echo -e "${GREEN}‚úÖ Suivi en temps r√©el${NC}"
    echo -e "${GREEN}‚úÖ Code de validation${NC}"
    echo -e "${GREEN}‚úÖ Validation de livraison${NC}"
    echo -e "${GREEN}‚úÖ G√©n√©ration de facture PDF${NC}"
    echo -e "${GREEN}‚úÖ Test d'annulation${NC}"
    echo ""
    echo -e "${BLUE}üìä Statistiques:${NC}"
    echo "- Annonce principale: $ANNOUNCEMENT_ID"
    echo "- Code de validation: $VALIDATION_CODE"
    echo "- Tous les endpoints test√©s avec succ√®s"
    echo ""
    echo -e "${GREEN}üöÄ L'API EcoDeli est enti√®rement fonctionnelle !${NC}"
else
    print_result "error" "√âtat final incorrect" "$FINAL_CHECK"
fi

echo -e "\n${BLUE}üèÅ Test termin√©${NC}"