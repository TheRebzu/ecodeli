---
description:
globs:
alwaysApply: false
---
# EcoDeli - Interdiction Donn√©es Mock√©es/Simul√©es

## R√®gle Stricte : Aucune Donn√©e Factice

**INTERDICTION ABSOLUE** de cr√©er, utiliser ou maintenir des donn√©es :
- **Mock√©es** (mock data)
- **Hardcod√©es** (hard-coded)
- **Simul√©es** (simulated data)
- **Factices** (fake data)
- **De test en dur** (hardcoded test data)

## Donn√©es Interdites

### ‚ùå Types de Donn√©es Interdites
- Utilisateurs factices avec emails/mots de passe en dur
- Annonces simul√©es avec prix/descriptions invent√©s
- Livraisons mock√©es avec adresses fictives
- Paiements simul√©s avec montants hardcod√©s
- Documents de test avec noms/donn√©es personnelles factices
- Trajets livreurs avec coordonn√©es GPS invent√©es
- √âvaluations/notes simul√©es
- Factures avec donn√©es comptables fictives

### ‚ùå Patterns de Code Interdits
```typescript
// INTERDIT - Donn√©es hardcod√©es
const mockUsers = [
  { email: 'test@test.com', password: 'password123' },
  { email: 'client@example.com', name: 'Jean Dupont' }
]

// INTERDIT - Prix simul√©s
const mockPrices = { delivery: 25.50, service: 45.00 }

// INTERDIT - Adresses factices
const fakeAddresses = [
  '123 rue de la Paix, Paris',
  '456 avenue des Champs, Lyon'
]
```

## Alternatives Obligatoires

### ‚úÖ G√©n√©ration Dynamique
```typescript
// CORRECT - G√©n√©ration avec Faker.js ou similaire
import { faker } from '@faker-js/faker'

const generateUser = () => ({
  email: faker.internet.email(),
  firstName: faker.person.firstName(),
  lastName: faker.person.lastName()
})

// CORRECT - Donn√©es depuis base de donn√©es
const users = await prisma.user.findMany()
```

### ‚úÖ Variables d'Environnement
```typescript
// CORRECT - Configuration via .env
const STRIPE_WEBHOOK_SECRET = process.env.STRIPE_WEBHOOK_SECRET
const ONESIGNAL_API_KEY = process.env.ONESIGNAL_API_KEY
```

### ‚úÖ Factories et Seeders
```typescript
// CORRECT - Factory pattern
export class UserFactory {
  static create(overrides = {}) {
    return {
      id: crypto.randomUUID(),
      email: faker.internet.email(),
      createdAt: new Date(),
      ...overrides
    }
  }
}

// CORRECT - Seeder pour d√©veloppement
export async function seedDatabase() {
  const users = Array.from({ length: 10 }, () => UserFactory.create())
  await prisma.user.createMany({ data: users })
}
```

## Fichiers Concern√©s

### Base de Donn√©es
- [prisma/seed.ts](mdc:prisma/seed.ts) - Doit utiliser des g√©n√©rateurs
- [prisma/schema.prisma](mdc:prisma/schema.prisma) - Pas de valeurs par d√©faut hardcod√©es

### Services
- [src/features/*/services/*.service.ts](mdc:src/features) - Aucune donn√©e simul√©e
- [src/lib/*.ts](mdc:src/lib) - Configuration dynamique uniquement

### API Routes
- [src/app/api/*/route.ts](mdc:src/app/api) - Donn√©es depuis DB ou g√©n√©ration
- Tests API avec donn√©es g√©n√©r√©es dynamiquement

### Tests
- [src/features/*/tests/*.test.ts](mdc:src/features) - Factories et mocks appropri√©s
- Pas de donn√©es hardcod√©es dans les assertions

## Exceptions Autoris√©es

### ‚úÖ Configuration Syst√®me
```typescript
// AUTORIS√â - Constantes syst√®me
export const SUBSCRIPTION_PLANS = {
  FREE: { price: 0, features: ['basic'] },
  STARTER: { price: 9.90, features: ['basic', 'insurance'] },
  PREMIUM: { price: 19.99, features: ['all'] }
} as const
```

### ‚úÖ √ânum√©rations M√©tier
```typescript
// AUTORIS√â - Enums business
export enum DeliveryStatus {
  PENDING = 'PENDING',
  IN_TRANSIT = 'IN_TRANSIT',
  DELIVERED = 'DELIVERED'
}
```

### ‚úÖ Messages d'Interface
```typescript
// AUTORIS√â - Messages UI
export const ERROR_MESSAGES = {
  INVALID_EMAIL: 'Email invalide',
  REQUIRED_FIELD: 'Champ obligatoire'
} as const
```

## Validation et Contr√¥les

### R√®gles de Review
1. **Aucun commit** avec donn√©es personnelles factices
2. **V√©rification syst√©matique** des PR pour donn√©es hardcod√©es
3. **Tests automatis√©s** pour d√©tecter les patterns interdits
4. **Documentation** des sources de donn√©es l√©gitimes

### Outils de D√©tection
```bash
# Recherche de patterns suspects
grep -r "test@" src/ --exclude-dir=node_modules
grep -r "password.*123" src/ --exclude-dir=node_modules
grep -r "Jean.*Dupont" src/ --exclude-dir=node_modules
```

## Cons√©quences

### Sanctions Imm√©diates
- **Refus automatique** des PR contenant des donn√©es factices
- **Nettoyage obligatoire** du code avant merge
- **R√©√©criture** avec g√©n√©ration dynamique

### Standards Professionnels
- **Conformit√© RGPD** : Pas de donn√©es personnelles factices
- **S√©curit√©** : Pas de credentials hardcod√©s
- **Maintenabilit√©** : Code √©volutif et configurable
- **Qualit√©** : Tests reproductibles et fiables

## Ressources Recommand√©es

### G√©n√©rateurs de Donn√©es
- **@faker-js/faker** : G√©n√©ration r√©aliste
- **uuid** : Identifiants uniques
- **crypto** : Donn√©es cryptographiques

### Patterns Recommand√©s
- **Factory Pattern** : Cr√©ation d'objets configurables
- **Builder Pattern** : Construction progressive
- **Seeder Pattern** : Population base de donn√©es
- **Environment Configuration** : Variables externes

---

**üö® R√àGLE CRITIQUE : Z√©ro tol√©rance pour les donn√©es factices dans EcoDeli**

Cette r√®gle garantit :
- **Professionnalisme** du code
- **S√©curit√©** des donn√©es
- **Conformit√©** r√©glementaire
- **Maintenabilit√©** √† long terme
