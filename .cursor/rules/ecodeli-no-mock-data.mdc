---
description: 
globs: 
alwaysApply: false
---
# EcoDeli - Interdiction Stricte des Donn√©es Mock

## üö´ INTERDICTIONS ABSOLUES

### Donn√©es Mock/Simul√©es/Hardcod√©es INTERDITES
- **AUCUNE** donn√©e hardcod√©e dans le code
- **AUCUNE** simulation de donn√©es
- **AUCUN** mock de services
- **AUCUNE** r√©ponse statique
- **AUCUN** placeholder de donn√©es

### Examples d'Interdictions
```typescript
// ‚ùå INTERDIT - Donn√©es hardcod√©es
const users = [
  { id: 1, name: "John Doe", email: "john@example.com" },
  { id: 2, name: "Jane Smith", email: "jane@example.com" }
]

// ‚ùå INTERDIT - Mock de service
const mockStripePayment = () => ({ success: true, transactionId: "fake_123" })

// ‚ùå INTERDIT - Donn√©es simul√©es
const generateFakeDeliveries = () => Array.from({length: 10}, () => ({...}))

// ‚ùå INTERDIT - R√©ponses statiques
return NextResponse.json({ message: "Simulated success" })
```

## ‚úÖ IMPLEMENTATIONS OBLIGATOIRES

### Base de Donn√©es R√©elle
- Toutes les donn√©es DOIVENT provenir de [prisma/schema.prisma](mdc:prisma/schema.prisma)
- Utilisation obligatoire de PostgreSQL
- Requ√™tes Prisma r√©elles uniquement
- Pas de donn√©es en m√©moire

### API Routes Fonctionnelles
- Toutes les routes dans [src/app/api/](mdc:src/app/api) DOIVENT √™tre fonctionnelles
- Connexion r√©elle √† la base de donn√©es
- Validation Zod obligatoire
- Gestion d'erreurs compl√®te

### Int√©grations Externes R√©elles
- **Stripe** : Paiements r√©els avec webhooks fonctionnels
- **OneSignal** : Notifications push r√©elles
- **jsPDF** : G√©n√©ration PDF r√©elle
- **Upload** : Stockage de fichiers r√©el

## üìã FONCTIONNALIT√âS OBLIGATOIRES R√âELLES

### Espace Livreurs
- [ ] **Inscription r√©elle** avec validation documents
- [ ] **Upload documents** avec stockage s√©curis√©
- [ ] **Validation admin** avec workflow complet
- [ ] **Matching trajets** avec algorithme fonctionnel
- [ ] **Code validation 6 chiffres** g√©n√©r√© et v√©rifi√©
- [ ] **Portefeuille** avec transactions r√©elles
- [ ] **Notifications** OneSignal fonctionnelles

### Espace Clients
- [ ] **Tutoriel overlay** bloquant premi√®re connexion
- [ ] **Annonces** CRUD complet avec base de donn√©es
- [ ] **Abonnements Stripe** fonctionnels (Free/Starter/Premium)
- [ ] **R√©servations** avec prestataires r√©els
- [ ] **Box de stockage** avec disponibilit√© r√©elle
- [ ] **Suivi livraisons** temps r√©el

### Espace Commer√ßants
- [ ] **Contrats** avec g√©n√©ration PDF automatique
- [ ] **L√¢cher de chariot** avec configuration zones
- [ ] **Facturation** avec calculs r√©els
- [ ] **Import bulk** CSV/Excel fonctionnel
- [ ] **Paiements** Stripe int√©gr√©s

### Espace Prestataires
- [ ] **Validation certifications** avec v√©rification
- [ ] **Calendrier disponibilit√©s** avec r√©servations
- [ ] **Facturation automatique** le 30 de chaque mois
- [ ] **G√©n√©ration PDF** factures avec archives
- [ ] **Virement bancaire simul√©** mais tra√ßable
- [ ] **√âvaluations** clients avec notes r√©elles

### Back Office Admin
- [ ] **Validation documents** avec workflow complet
- [ ] **Monitoring livraisons** en temps r√©el
- [ ] **Gestion utilisateurs** CRUD complet
- [ ] **Configuration 6 entrep√¥ts** avec donn√©es r√©elles
- [ ] **Analytics** avec donn√©es de la base

## üîß SERVICES OBLIGATOIRES FONCTIONNELS

### Authentification
- NextAuth avec [src/lib/auth.ts](mdc:src/lib/auth.ts)
- Sessions r√©elles avec cookies s√©curis√©s
- Permissions par r√¥le v√©rifi√©es

### Paiements Stripe
- Webhooks configur√©s dans [src/app/api/payments/webhook/route.ts](mdc:src/app/api/payments/webhook/route.ts)
- √âv√©nements : `payment_succeeded`, `payment_failed`, `subscription_updated`
- Gestion des erreurs et des remboursements

### Notifications OneSignal
- Service dans [src/features/notifications/services/](mdc:src/features/notifications/services)
- Templates dans [src/features/notifications/templates/](mdc:src/features/notifications/templates)
- Envoi r√©el aux utilisateurs cibl√©s

### G√©n√©ration PDF
- Service dans [src/features/invoices/services/](mdc:src/features/invoices/services)
- Templates dans [src/features/invoices/templates/](mdc:src/features/invoices/templates)
- Archive dans la base de donn√©es

### Upload Documents
- Route [src/app/api/upload/route.ts](mdc:src/app/api/upload/route.ts)
- Stockage s√©curis√© (local ou cloud)
- Validation MIME types

## üö® VALIDATION ET TESTS

### Tests API Obligatoires
```bash
# Tous les endpoints DOIVENT r√©pondre avec de vraies donn√©es
curl -X GET http://localhost:3000/api/users/profile
curl -X POST http://localhost:3000/api/announcements
curl -X POST http://localhost:3000/api/deliveries/[id]/validate
```

### Donn√©es de Test R√©elles
- Utiliser [prisma/seed.ts](mdc:prisma/seed.ts) pour donn√©es initiales
- Comptes de test dans la base de donn√©es
- Pas de donn√©es hardcod√©es dans les composants

### Workflow Complet Obligatoire
1. **Inscription livreur** ‚Üí Upload documents ‚Üí Validation admin ‚Üí Activation
2. **Cr√©ation annonce** ‚Üí Matching ‚Üí Notification ‚Üí Acceptation ‚Üí Livraison ‚Üí Paiement
3. **Facturation prestataire** ‚Üí Cron job 30/mois ‚Üí PDF ‚Üí Archive ‚Üí Virement

## üîç CONTR√îLES QUALIT√â

### V√©rifications Automatiques
- Aucun `// TODO: Mock data`
- Aucun `const mockData = []`
- Aucun `return { fake: true }`
- Toutes les API routes connect√©es √† Prisma

### Standards de Code
- Toujours utiliser `await prisma.[model].[operation]()`
- Toujours valider avec sch√©mas Zod
- Toujours g√©rer les erreurs
- Toujours logger les op√©rations

## üìà M√âTRIQUES DE SUCC√àS

### Crit√®res d'Acceptation
- [ ] **100%** des fonctionnalit√©s op√©rationnelles
- [ ] **0** donn√©e hardcod√©e
- [ ] **0** mock de service
- [ ] **Toutes** les int√©grations fonctionnelles
- [ ] **Workflow complet** de bout en bout

### Tests End-to-End Obligatoires
- Inscription compl√®te d'un livreur
- Cr√©ation et livraison d'une annonce
- Facturation automatique prestataire
- Paiement Stripe avec webhook
- Notification OneSignal re√ßue

## ‚ö†Ô∏è SANCTIONS

### Non-Respect des R√®gles
- **Rejet imm√©diat** du code avec donn√©es mock
- **Refactoring obligatoire** avant validation
- **Documentation** de l'erreur dans le rapport
- **Tests de r√©gression** sur toute la cha√Æne

Cette r√®gle est **NON-N√âGOCIABLE** pour le projet EcoDeli Mission 1.

