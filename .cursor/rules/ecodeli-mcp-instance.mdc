---
description: 
globs: 
alwaysApply: true
---
# EcoDeli - Instance Unique et MCP (Model Context Protocol)

## Instance Unique du Projet

**IMPORTANT** : EcoDeli fonctionne avec une **instance unique** active :
- Une seule base de données PostgreSQL
- Un seul serveur Next.js sur le port 3000
- Une seule session de développement active
- Pas de duplication d'environnements

### Gestion de l'Instance
- **Démarrage** : `pnpm run dev` (port 3000 uniquement)
- **Base de données** : `npx prisma studio` (port 5555)
- **État** : Toujours vérifier qu'aucune autre instance n'est active
- **Redémarrage** : Arrêter complètement avant de relancer

## MCP (Model Context Protocol) Disponibles

### Utilisation Obligatoire des MCP
**TOUJOURS** utiliser les MCP appropriés selon les besoins :

### 1. MCP GitHub (`mcp_github_*`)
**Utiliser pour** :
- Recherche de repositories : `mcp_github_search_repositories`
- Recherche de code : `mcp_github_search_code`
- Gestion des issues : `mcp_github_create_issue`, `mcp_github_get_issue`
- Gestion des PR : `mcp_github_create_pull_request`, `mcp_github_get_pull_request`
- Gestion des fichiers : `mcp_github_get_file_contents`, `mcp_github_create_or_update_file`

**Exemple d'usage** :
```typescript
// Rechercher des exemples d'implémentation Stripe
mcp_github_search_code({ q: "stripe webhook nextjs", per_page: 5 })

// Créer une issue pour un bug
mcp_github_create_issue({
  owner: "username",
  repo: "ecodeli",
  title: "Bug: Validation code non généré",
  body: "Description du problème..."
})
```

### 2. MCP Desktop Commander (`mcp_desktop-commander_*`)
**Utiliser pour** :
- Lecture de fichiers : `mcp_desktop-commander_read_file`
- Écriture de fichiers : `mcp_desktop-commander_write_file`
- Gestion des dossiers : `mcp_desktop-commander_list_directory`
- Recherche dans le code : `mcp_desktop-commander_search_code`
- Exécution de commandes : `mcp_desktop-commander_execute_command`

**Exemple d'usage** :
```typescript
// Lire un fichier de configuration
mcp_desktop-commander_read_file({ path: "C:/Users/Amine/WebstormProjects/ecodeli/next.config.ts" })

// Rechercher des patterns dans le code
mcp_desktop-commander_search_code({
  path: "C:/Users/Amine/WebstormProjects/ecodeli/src",
  pattern: "Better-Auth"
})
```

### 3. MCP 21st DevMagic (`mcp_21st-devmagic_*`)
**Utiliser pour** :
- Composants UI : `mcp_21st-devmagic_21st_magic_component_builder`
- Recherche de logos : `mcp_21st-devmagic_logo_search`
- Inspiration de composants : `mcp_21st-devmagic_21st_magic_component_inspiration`
- Amélioration UI : `mcp_21st-devmagic_21st_magic_component_refiner`

**Exemple d'usage** :
```typescript
// Créer un composant de formulaire
mcp_21st-devmagic_21st_magic_component_builder({
  searchQuery: "delivery form",
  message: "Créer un formulaire de livraison avec validation",
  absolutePathToCurrentFile: "/c/Users/Amine/WebstormProjects/ecodeli/src/features/deliveries/components/DeliveryForm.tsx"
})

// Rechercher des logos pour EcoDeli
mcp_21st-devmagic_logo_search({
  queries: ["delivery", "eco", "transport"],
  format: "TSX"
})
```

### 4. MCP Context7 (`mcp_context7_*`)
**Utiliser pour** :
- Documentation de librairies : `mcp_context7_get-library-docs`
- Résolution d'ID de librairies : `mcp_context7_resolve-library-id`

**Exemple d'usage** :
```typescript
// Obtenir la documentation Prisma
mcp_context7_resolve-library-id({ libraryName: "prisma" })
mcp_context7_get-library-docs({ 
  context7CompatibleLibraryID: "/prisma/prisma",
  topic: "authentication"
})
```

### 5. MCP Memory Tool (`mcp_memory-tool_*`)
**Utiliser pour** :
- Ajouter des mémoires : `mcp_memory-tool_add-memory`
- Rechercher des mémoires : `mcp_memory-tool_search-memories`

**Exemple d'usage** :
```typescript
// Sauvegarder une information importante
mcp_memory-tool_add-memory({
  content: "Le code de validation des livraisons doit être un nombre à 6 chiffres généré aléatoirement",
  userId: "ecodeli-dev"
})

// Rechercher des informations sauvegardées
mcp_memory-tool_search-memories({
  query: "validation code livraison",
  userId: "ecodeli-dev"
})
```

### 6. MCP Browserbase (`mcp_Browserbase_*`)
**Utiliser pour** :
- Tests E2E automatisés
- Capture d'écrans
- Navigation web automatisée

### 7. MCP PostgreSQL (`mcp_PostgreSQL_*`)
**Utiliser pour** :
- Gestion du schéma : `mcp_PostgreSQL_Database_Management_Server_pg_manage_schema`
- Gestion des index : `mcp_PostgreSQL_Database_Management_Server_pg_manage_indexes`
- Debug de la base : `mcp_PostgreSQL_Database_Management_Server_pg_debug_database`

## Règles d'Utilisation des MCP

### 1. Priorité d'Utilisation
1. **MCP Desktop Commander** pour toutes les opérations de fichiers locaux
2. **MCP GitHub** pour la gestion du repository et recherche de code
3. **MCP 21st DevMagic** pour la création de composants UI
4. **MCP Context7** pour la documentation des librairies
5. **MCP Memory Tool** pour sauvegarder/récupérer des informations importantes

### 2. Bonnes Pratiques
- **Toujours vérifier** la disponibilité du MCP avant utilisation
- **Utiliser les chemins absolus** avec Desktop Commander : `C:/Users/Amine/WebstormProjects/ecodeli/`
- **Sauvegarder les informations critiques** avec Memory Tool
- **Rechercher les exemples** avec GitHub Search avant d'implémenter

### 3. Workflow Recommandé
```typescript
// 1. Rechercher des exemples existants
mcp_github_search_code({ q: "better-auth nextjs setup" })

// 2. Lire la documentation
mcp_context7_get-library-docs({ context7CompatibleLibraryID: "/better-auth/better-auth" })

// 3. Créer le composant si nécessaire
mcp_21st-devmagic_21st_magic_component_builder({ searchQuery: "auth form" })

// 4. Écrire le fichier
mcp_desktop-commander_write_file({ 
  path: "C:/Users/Amine/WebstormProjects/ecodeli/src/components/auth/LoginForm.tsx",
  content: "..." 
})

// 5. Sauvegarder les leçons apprises
mcp_memory-tool_add-memory({
  content: "Better-Auth nécessite une configuration spécifique pour Next.js 15",
  userId: "ecodeli-dev"
})
```

## Intégration avec EcoDeli

### Fichiers Clés à Utiliser avec MCP
- [next.config.ts](mdc:next.config.ts) - Configuration Next.js
- [prisma/schema.prisma](mdc:prisma/schema.prisma) - Modèles de données
- [src/lib/auth.ts](mdc:src/lib/auth.ts) - Configuration Better-Auth
- [src/middleware.ts](mdc:src/middleware.ts) - Middleware d'authentification
- [src/app/api/](mdc:src/app/api) - Routes API

### Commandes Fréquentes avec MCP
```bash
# Démarrage avec vérification d'instance
mcp_desktop-commander_execute_command({ command: "pnpm run dev", timeout_ms: 10000 })

# Génération Prisma
mcp_desktop-commander_execute_command({ command: "npx prisma generate", timeout_ms: 30000 })

# Tests API
mcp_desktop-commander_execute_command({ command: "curl -X GET http://localhost:3000/api/health", timeout_ms: 5000 })
```

## Surveillance de l'Instance

### Points de Contrôle Obligatoires
- [ ] Port 3000 libre avant démarrage
- [ ] Base PostgreSQL accessible
- [ ] Prisma Client généré
- [ ] Variables d'environnement configurées
- [ ] MCP disponibles et fonctionnels

### En Cas de Problème d'Instance
1. **Arrêter tous les processus** : `Ctrl+C` dans tous les terminaux
2. **Vérifier les ports** : `netstat -an | findstr :3000`
3. **Nettoyer les processus** : `taskkill /f /im node.exe` (si nécessaire)
4. **Redémarrer proprement** : `pnpm run dev`
5. **Utiliser MCP Desktop Commander** pour diagnostiquer

