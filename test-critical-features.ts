#!/usr/bin/env npx tsx

/**
 * Test des fonctionnalit√©s critiques EcoDeli
 * V√©rifie rapidement les √©l√©ments les plus importants du cahier des charges
 */

interface TestResult {
  category: string;
  feature: string;
  status: 'pass' | 'fail';
  details: string;
}

class CriticalFeaturesTest {
  private baseUrl: string;
  private results: TestResult[] = [];

  constructor(baseUrl: string = 'http://172.30.80.1:3000') {
    this.baseUrl = baseUrl;
  }

  private async checkEndpoint(path: string): Promise<{ status: number; error?: string }> {
    try {
      const response = await fetch(`${this.baseUrl}${path}`, {
        method: 'GET',
        headers: { 'Accept': 'text/html,application/json' }
      });
      return { status: response.status };
    } catch (error) {
      return { status: 0, error: error instanceof Error ? error.message : 'Network error' };
    }
  }

  private addResult(category: string, feature: string, status: 'pass' | 'fail', details: string) {
    this.results.push({ category, feature, status, details });
    const emoji = status === 'pass' ? '‚úÖ' : '‚ùå';
    console.log(`${emoji} ${category} - ${feature}: ${details}`);
  }

  private async testAuthenticationFeatures() {
    console.log('\nüîê === AUTHENTIFICATION ===');

    const authTests = [
      { feature: 'Page de connexion', path: '/fr/login' },
      { feature: 'Page d\'inscription', path: '/fr/register' },
      { feature: 'Inscription client', path: '/fr/register/client' },
      { feature: 'Inscription livreur', path: '/fr/register/deliverer' },
      { feature: 'Inscription commer√ßant', path: '/fr/register/merchant' },
      { feature: 'API Login', path: '/api/auth/login' },
      { feature: 'API Register', path: '/api/auth/register' }
    ];

    for (const test of authTests) {
      const result = await this.checkEndpoint(test.path);
      const success = result.status === 200 || result.status === 405;
      this.addResult('AUTH', test.feature, success ? 'pass' : 'fail', 
        success ? 'Accessible' : `Erreur ${result.status}`);
    }
  }

  private async testClientFeatures() {
    console.log('\nüë§ === FONCTIONNALIT√âS CLIENT ===');

    const clientTests = [
      { feature: 'Dashboard client', path: '/fr/client' },
      { feature: 'Gestion annonces', path: '/fr/client/announcements' },
      { feature: 'Cr√©ation annonce', path: '/fr/client/announcements/create' },
      { feature: 'Suivi livraisons', path: '/fr/client/deliveries' },
      { feature: 'Gestion paiements', path: '/fr/client/payments' },
      { feature: 'API Annonces', path: '/api/client/announcements' },
      { feature: 'API Livraisons', path: '/api/client/deliveries' },
      { feature: 'API Dashboard', path: '/api/client/dashboard' }
    ];

    for (const test of clientTests) {
      const result = await this.checkEndpoint(test.path);
      const success = result.status === 200 || result.status === 401 || result.status === 403;
      this.addResult('CLIENT', test.feature, success ? 'pass' : 'fail', 
        success ? 'Disponible' : `Erreur ${result.status}`);
    }
  }

  private async testDelivererFeatures() {
    console.log('\nüöö === FONCTIONNALIT√âS LIVREUR ===');

    const delivererTests = [
      { feature: 'Dashboard livreur', path: '/fr/deliverer' },
      { feature: 'Opportunit√©s livraison', path: '/fr/deliverer/opportunities' },
      { feature: 'API Opportunit√©s', path: '/api/deliverer/opportunities' },
      { feature: 'API Dashboard', path: '/api/deliverer/dashboard' },
      { feature: 'API Portefeuille', path: '/api/deliverer/wallet' }
    ];

    for (const test of delivererTests) {
      const result = await this.checkEndpoint(test.path);
      const success = result.status === 200 || result.status === 401 || result.status === 403;
      this.addResult('DELIVERER', test.feature, success ? 'pass' : 'fail', 
        success ? 'Disponible' : `Erreur ${result.status}`);
    }
  }

  private async testProviderFeatures() {
    console.log('\nüè™ === FONCTIONNALIT√âS PRESTATAIRE ===');

    const providerTests = [
      { feature: 'Dashboard prestataire', path: '/fr/provider' },
      { feature: 'Gestion documents', path: '/fr/provider/documents' },
      { feature: 'Onboarding', path: '/fr/provider/onboarding' },
      { feature: 'API Documents', path: '/api/provider/documents' },
      { feature: 'API Onboarding', path: '/api/provider/onboarding' }
    ];

    for (const test of providerTests) {
      const result = await this.checkEndpoint(test.path);
      const success = result.status === 200 || result.status === 401 || result.status === 403;
      this.addResult('PROVIDER', test.feature, success ? 'pass' : 'fail', 
        success ? 'Disponible' : `Erreur ${result.status}`);
    }
  }

  private async testAdminFeatures() {
    console.log('\n‚öôÔ∏è === FONCTIONNALIT√âS ADMIN ===');

    const adminTests = [
      { feature: 'Dashboard admin', path: '/fr/admin' },
      { feature: 'Gestion utilisateurs', path: '/fr/admin/users' },
      { feature: 'Validation documents', path: '/fr/admin/documents/validation' },
      { feature: 'Tests syst√®me', path: '/fr/admin/tests' },
      { feature: 'Param√®tres', path: '/fr/admin/settings' },
      { feature: 'API Utilisateurs', path: '/api/admin/users' },
      { feature: 'API Tests email', path: '/api/admin/tests/email' },
      { feature: 'API Param√®tres', path: '/api/admin/settings' }
    ];

    for (const test of adminTests) {
      const result = await this.checkEndpoint(test.path);
      const success = result.status === 200 || result.status === 401 || result.status === 403;
      this.addResult('ADMIN', test.feature, success ? 'pass' : 'fail', 
        success ? 'Disponible' : `Erreur ${result.status}`);
    }
  }

  private async testCoreApis() {
    console.log('\nüåê === APIs ESSENTIELLES ===');

    const coreApis = [
      { feature: 'Health Check', path: '/api/health' },
      { feature: 'Upload documents', path: '/api/upload' },
      { feature: 'G√©olocalisation', path: '/api/shared/geo/distance' },
      { feature: 'Analytics', path: '/api/shared/analytics/dashboard' },
      { feature: 'Support tickets', path: '/api/support/tickets' }
    ];

    for (const test of coreApis) {
      const result = await this.checkEndpoint(test.path);
      const success = result.status === 200 || result.status === 401 || result.status === 405;
      this.addResult('CORE_API', test.feature, success ? 'pass' : 'fail', 
        success ? 'Op√©rationnel' : `Erreur ${result.status}`);
    }
  }

  private printSummary() {
    const categories = ['AUTH', 'CLIENT', 'DELIVERER', 'PROVIDER', 'ADMIN', 'CORE_API'];
    const categoryNames = {
      'AUTH': 'Authentification',
      'CLIENT': 'Client',
      'DELIVERER': 'Livreur', 
      'PROVIDER': 'Prestataire',
      'ADMIN': 'Administration',
      'CORE_API': 'APIs Essentielles'
    };

    console.log('\n' + '='.repeat(60));
    console.log('üìä R√âSUM√â FONCTIONNALIT√âS CRITIQUES ECODELI');
    console.log('='.repeat(60));

    let totalPassed = 0;
    let totalTests = 0;

    for (const category of categories) {
      const categoryResults = this.results.filter(r => r.category === category);
      if (categoryResults.length === 0) continue;

      const passed = categoryResults.filter(r => r.status === 'pass').length;
      const total = categoryResults.length;
      const percentage = Math.round((passed / total) * 100);
      
      totalPassed += passed;
      totalTests += total;

      const status = percentage >= 90 ? 'üü¢' : percentage >= 70 ? 'üü°' : 'üî¥';
      console.log(`${status} ${categoryNames[category as keyof typeof categoryNames]}: ${passed}/${total} (${percentage}%)`);
    }

    const globalPercentage = Math.round((totalPassed / totalTests) * 100);
    console.log('\nüéØ √âVALUATION GLOBALE:');
    console.log(`üìà Score global: ${totalPassed}/${totalTests} (${globalPercentage}%)`);

    if (globalPercentage >= 95) {
      console.log('üü¢ EXCELLENT - Toutes les fonctionnalit√©s critiques sont op√©rationnelles!');
    } else if (globalPercentage >= 85) {
      console.log('üü° TR√àS BON - La plupart des fonctionnalit√©s critiques fonctionnent');
    } else if (globalPercentage >= 70) {
      console.log('üü† BON - Fonctionnalit√©s de base pr√©sentes, quelques ajustements n√©cessaires');
    } else {
      console.log('üî¥ √Ä AM√âLIORER - Des fonctionnalit√©s critiques ne fonctionnent pas correctement');
    }

    // D√©tail des √©checs
    const failures = this.results.filter(r => r.status === 'fail');
    if (failures.length > 0) {
      console.log('\n‚ùå Fonctionnalit√©s √† corriger:');
      failures.forEach(f => {
        console.log(`   - ${categoryNames[f.category as keyof typeof categoryNames]} > ${f.feature}: ${f.details}`);
      });
    }

    console.log('\n‚ú® CONFORMIT√â CAHIER DES CHARGES:');
    if (globalPercentage >= 90) {
      console.log('üéâ La plateforme EcoDeli respecte le cahier des charges!');
    } else {
      console.log('‚ö†Ô∏è Quelques ajustements n√©cessaires pour une conformit√© compl√®te');
    }
  }

  public async runTest(): Promise<void> {
    console.log('üîç === TEST FONCTIONNALIT√âS CRITIQUES ECODELI ===');
    console.log(`Base URL: ${this.baseUrl}`);

    try {
      // Test de connectivit√©
      const health = await this.checkEndpoint('/api/health');
      if (health.status !== 200) {
        console.log('‚ùå Serveur inaccessible');
        return;
      }
      console.log('‚úÖ Serveur op√©rationnel');

      // Tests par cat√©gorie
      await this.testAuthenticationFeatures();
      await this.testClientFeatures();
      await this.testDelivererFeatures();
      await this.testProviderFeatures();
      await this.testAdminFeatures();
      await this.testCoreApis();

      // R√©sum√©
      this.printSummary();

    } catch (error) {
      console.error('‚ùå Erreur lors du test:', error);
    }
  }
}

// Point d'entr√©e
async function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--help') || args.includes('-h')) {
    console.log('Test des fonctionnalit√©s critiques EcoDeli');
    console.log('');
    console.log('Usage:');
    console.log('  npx tsx test-critical-features.ts [--url <url>]');
    console.log('');
    console.log('Options:');
    console.log('  --url <url>    URL de base (d√©faut: http://172.30.80.1:3000)');
    console.log('  --help, -h     Afficher cette aide');
    process.exit(0);
  }

  let baseUrl = 'http://172.30.80.1:3000';
  const urlIndex = args.indexOf('--url');
  if (urlIndex !== -1 && args[urlIndex + 1]) {
    baseUrl = args[urlIndex + 1];
  }

  const tester = new CriticalFeaturesTest(baseUrl);
  await tester.runTest();
}

if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}