#!/usr/bin/env tsx

import { execSync } from "child_process";
import chalk from "chalk";

console.log(chalk.blue("üîß Configuration ESLint pour EcoDeli"));
console.log(chalk.blue("=====================================\n"));

// Liste des packages ESLint n√©cessaires
const eslintPackages = [
  // Base ESLint
  "eslint@^9.28.0",
  "eslint-config-next@^15.3.3",
  
  // TypeScript
  "@typescript-eslint/parser@^8.0.0",
  "@typescript-eslint/eslint-plugin@^8.0.0",
  
  // React
  "eslint-plugin-react@^7.37.0",
  "eslint-plugin-react-hooks@^5.0.0",
  "eslint-plugin-jsx-a11y@^6.10.0",
  
  // Import/Export
  "eslint-plugin-import@^2.31.0",
  "eslint-import-resolver-typescript@^4.4.3",
  "eslint-plugin-unused-imports@^4.1.4",
  
  // S√©curit√© et qualit√©
  "eslint-plugin-security@^3.0.1",
  "eslint-plugin-unicorn@^56.0.0",
  
  // Outils suppl√©mentaires
  "eslint-plugin-simple-import-sort@^12.1.1"
];

async function installPackages() {
  console.log(chalk.yellow("üì¶ Installation des packages ESLint..."));
  
  try {
    const command = `pnpm add -D ${eslintPackages.join(" ")}`;
    console.log(chalk.gray(`Commande: ${command}\n`));
    
    execSync(command, { 
      stdio: "inherit",
      cwd: process.cwd()
    });
    
    console.log(chalk.green("‚úÖ Tous les packages ESLint ont √©t√© install√©s avec succ√®s!"));
  } catch (error) {
    console.error(chalk.red("‚ùå Erreur lors de l'installation:"), error);
    process.exit(1);
  }
}

async function verifyConfig() {
  console.log(chalk.yellow("\nüîç V√©rification de la configuration ESLint..."));
  
  try {
    execSync("pnpm eslint --version", { stdio: "pipe" });
    console.log(chalk.green("‚úÖ ESLint est configur√© correctement"));
    
    // Test rapide de la configuration
    execSync("pnpm eslint --print-config .eslintrc.json > /dev/null", { stdio: "pipe" });
    console.log(chalk.green("‚úÖ Configuration ESLint valide"));
    
  } catch (error) {
    console.warn(chalk.yellow("‚ö†Ô∏è  Quelques ajustements peuvent √™tre n√©cessaires"));
    console.log(chalk.gray("Cela peut √™tre normal si certains plugins ne sont pas encore install√©s"));
  }
}

async function showUsage() {
  console.log(chalk.blue("\nüìã Utilisation d'ESLint:"));
  console.log(chalk.white("‚Ä¢ Linter le code:        ") + chalk.cyan("pnpm lint"));
  console.log(chalk.white("‚Ä¢ Corriger automatique:  ") + chalk.cyan("pnpm lint --fix"));
  console.log(chalk.white("‚Ä¢ Linter un fichier:     ") + chalk.cyan("pnpm eslint src/path/to/file.ts"));
  console.log(chalk.white("‚Ä¢ Mode watch:            ") + chalk.cyan("pnpm eslint src/ --watch"));
  
  console.log(chalk.blue("\nüõ†Ô∏è  Plugins install√©s:"));
  console.log(chalk.white("‚Ä¢ @typescript-eslint    - R√®gles TypeScript avanc√©es"));
  console.log(chalk.white("‚Ä¢ react/react-hooks     - R√®gles React et Hooks"));
  console.log(chalk.white("‚Ä¢ jsx-a11y              - Accessibilit√©"));
  console.log(chalk.white("‚Ä¢ import                - Gestion des imports"));
  console.log(chalk.white("‚Ä¢ security              - R√®gles de s√©curit√©"));
  console.log(chalk.white("‚Ä¢ unicorn               - R√®gles modernes JS/TS"));
  console.log(chalk.white("‚Ä¢ unused-imports        - Nettoyage automatique"));
  
  console.log(chalk.blue("\n‚öôÔ∏è  Configuration:"));
  console.log(chalk.white("‚Ä¢ Fichier principal:     ") + chalk.cyan(".eslintrc.json"));
  console.log(chalk.white("‚Ä¢ Fichiers ignor√©s:      ") + chalk.cyan(".eslintignore"));
  console.log(chalk.white("‚Ä¢ Scripts disponibles:   ") + chalk.cyan("package.json"));
}

async function main() {
  try {
    await installPackages();
    await verifyConfig();
    await showUsage();
    
    console.log(chalk.green("\nüéâ Configuration ESLint termin√©e avec succ√®s!"));
    console.log(chalk.blue("Vous pouvez maintenant utiliser:") + chalk.cyan(" pnpm lint"));
    
  } catch (error) {
    console.error(chalk.red("‚ùå Erreur lors de la configuration:"), error);
    process.exit(1);
  }
}

// Ex√©cuter le script
main().catch(console.error); 