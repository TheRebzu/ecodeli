const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

async function createUnverifiedUser() {
  try {
    console.log('üë§ Cr√©ation d\'un utilisateur test non v√©rifi√©...')
    
    const testEmail = 'test-unverified@ecodeli.test'
    const testPassword = 'Test123!'
    
    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await prisma.user.findUnique({
      where: { email: testEmail }
    })

    if (existingUser) {
      console.log('‚ö†Ô∏è Utilisateur test existe d√©j√†, mise √† jour...')
      
      // Marquer comme non v√©rifi√©
      await prisma.user.update({
        where: { id: existingUser.id },
        data: {
          emailVerified: false,
          emailVerifiedAt: null
        }
      })
      
      console.log('‚úÖ Utilisateur test mis √† jour (non v√©rifi√©)')
      console.log('üìß Email:', testEmail)
      console.log('üîë Mot de passe:', testPassword)
      return
    }

    // Hasher le mot de passe
    const hashedPassword = await bcrypt.hash(testPassword, 12)

    // Transaction pour cr√©er l'utilisateur complet
    const result = await prisma.$transaction(async (tx) => {
      // Cr√©er l'utilisateur principal
      const user = await tx.user.create({
        data: {
          email: testEmail,
          password: hashedPassword,
          role: 'CLIENT',
          emailVerified: false, // Explicitement non v√©rifi√©
          language: 'fr'
        }
      })

      // Cr√©er le profil g√©n√©ral
      const profile = await tx.profile.create({
        data: {
          userId: user.id,
          firstName: 'Test',
          lastName: 'User',
          phone: '+33612345678',
          address: '123 Rue de Test',
          city: 'Paris',
          postalCode: '75001',
          country: 'FR',
          language: 'fr'
        }
      })

      // Cr√©er le profil client
      const client = await tx.client.create({
        data: {
          userId: user.id,
          subscriptionPlan: 'FREE',
          tutorialCompleted: false,
          emailNotifications: true,
          pushNotifications: true,
          smsNotifications: false
        }
      })

      // Cr√©er l'enregistrement Account pour Better Auth
      const account = await tx.account.create({
        data: {
          userId: user.id,
          type: 'email',
          provider: 'credential',
          providerAccountId: user.email
        }
      })

      // Cr√©er un token de v√©rification d'email
      const verificationToken = require('@paralleldrive/cuid2').createId()
      const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 heures

      await tx.verificationToken.create({
        data: {
          identifier: user.email,
          token: verificationToken,
          expires: expiresAt,
          type: 'email_verification'
        }
      })

      return { user, profile, client, account, verificationToken }
    })

    console.log('‚úÖ Utilisateur test cr√©√© avec succ√®s!')
    console.log('üìß Email:', testEmail)
    console.log('üîë Mot de passe:', testPassword)
    console.log('üë§ ID utilisateur:', result.user.id)
    console.log('üîê Email v√©rifi√©:', result.user.emailVerified)
    console.log('üîó Token de v√©rification:', result.verificationToken)
    console.log('')
    console.log('üß™ Pour tester:')
    console.log('1. Essayez de vous connecter avec ces identifiants')
    console.log('2. Le bouton "Renvoyer email" devrait appara√Ætre')
    console.log('3. URL de v√©rification test:', `http://localhost:3000/api/auth/verify-email?token=${result.verificationToken}&email=${encodeURIComponent(testEmail)}`)

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createUnverifiedUser() 