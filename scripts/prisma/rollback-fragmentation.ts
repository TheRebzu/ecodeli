#!/usr/bin/env node
/**
 * Script de rollback de la fragmentation du sch√©ma Prisma
 *
 * Ce script annule la migration vers le sch√©ma fragment√© et
 * permet de revenir au sch√©ma monolithique pr√©c√©dent.
 */

import fs from "fs";
import path from "path";
import { execSync } from "child_process";
import chalk from "chalk";
import { globSync } from "glob";

// Configuration
const ROOT_DIR = process.cwd();
const BACKUP_DIR = path.join(ROOT_DIR, "prisma/backups");
const SCHEMA_PATH = path.join(ROOT_DIR, "prisma/schema.prisma");
const SCHEMAS_DIR = path.join(ROOT_DIR, "prisma/schemas");

// Fonction principale
async function main() {
  console.log(chalk.yellow("üîÑ Rollback de la fragmentation du sch√©ma Prisma"));
  console.log(chalk.gray("=============================================="));

  try {
    // 1. Trouver le dernier backup de sch√©ma
    const latestBackup = await findLatestSchemaBackup();
    if (!latestBackup) {
      throw new Error(
        "Aucun backup de sch√©ma trouv√©. Impossible de proc√©der au rollback.",
      );
    }

    // 2. Confirmer le rollback
    await confirmRollback(latestBackup);

    // 3. Restaurer le sch√©ma depuis le backup
    await restoreSchema(latestBackup);

    // 4. Sauvegarder les fragments actuels (au cas o√π)
    await backupCurrentFragments();

    // 5. R√©g√©n√©rer le client Prisma
    await regeneratePrismaClient();

    // 6. V√©rifier le sch√©ma restaur√©
    await validateRestoredSchema();

    console.log(chalk.green("\n‚úÖ Rollback effectu√© avec succ√®s !"));
    console.log(
      chalk.gray(
        "Les fragments de sch√©ma ont √©t√© conserv√©s dans le r√©pertoire des backups.",
      ),
    );
  } catch (error) {
    console.error(chalk.red("\n‚ùå Erreur durant le rollback:"), error);
    console.log(
      chalk.red(
        "‚ö†Ô∏è Le rollback a √©chou√©. Une intervention manuelle peut √™tre n√©cessaire.",
      ),
    );
    process.exit(1);
  }
}

// Trouver le dernier backup de sch√©ma
async function findLatestSchemaBackup(): Promise<string | null> {
  console.log(chalk.gray("üîç Recherche du dernier backup de sch√©ma..."));

  if (!fs.existsSync(BACKUP_DIR)) {
    console.log(chalk.yellow("  ‚ö†Ô∏è R√©pertoire de backup inexistant."));
    return null;
  }

  const backupFiles = globSync(path.join(BACKUP_DIR, "schema_backup_*.prisma"));

  if (backupFiles.length === 0) {
    console.log(chalk.yellow("  ‚ö†Ô∏è Aucun fichier de backup trouv√©."));
    return null;
  }

  // Trier les fichiers par date de modification (le plus r√©cent en premier)
  backupFiles.sort((a: string, b: string) => {
    const statA = fs.statSync(a);
    const statB = fs.statSync(b);
    return statB.mtime.getTime() - statA.mtime.getTime();
  });

  const latestBackup = backupFiles[0];
  console.log(
    chalk.green(
      `  ‚úÖ Dernier backup trouv√©: ${path.relative(ROOT_DIR, latestBackup)}`,
    ),
  );

  return latestBackup;
}

// Confirmer le rollback
async function confirmRollback(backupFile: string): Promise<void> {
  console.log(
    chalk.yellow(
      "‚ö†Ô∏è Vous √™tes sur le point d'annuler la fragmentation du sch√©ma Prisma.",
    ),
  );
  console.log(
    chalk.yellow(
      "   Cette op√©ration va restaurer le sch√©ma monolithique pr√©c√©dent.",
    ),
  );
  console.log(
    chalk.gray(
      `   Le sch√©ma sera restaur√© depuis: ${path.relative(ROOT_DIR, backupFile)}`,
    ),
  );

  // Utiliser un import dynamique au lieu de require
  const readline = await import("readline").then((module) =>
    module.default.createInterface({
      input: process.stdin,
      output: process.stdout,
    }),
  );

  return new Promise<void>((resolve, reject) => {
    readline.question(
      chalk.yellow("   Confirmez-vous cette op√©ration ? (y/N) "),
      (answer: string) => {
        readline.close();

        if (answer.toLowerCase() === "y") {
          console.log(chalk.gray("   Rollback confirm√©."));
          resolve();
        } else {
          reject(new Error("Rollback annul√© par l'utilisateur."));
        }
      },
    );
  });
}

// Restaurer le sch√©ma depuis le backup
async function restoreSchema(backupFile: string): Promise<void> {
  console.log(chalk.gray("üîÑ Restauration du sch√©ma monolithique..."));

  // Copier le fichier de backup vers le sch√©ma principal
  fs.copyFileSync(backupFile, SCHEMA_PATH);

  console.log(
    chalk.green(
      `  ‚úÖ Sch√©ma restaur√© depuis ${path.relative(ROOT_DIR, backupFile)}`,
    ),
  );
}

// Sauvegarder les fragments actuels
async function backupCurrentFragments(): Promise<void> {
  console.log(chalk.gray("üíæ Sauvegarde des fragments actuels..."));

  if (!fs.existsSync(SCHEMAS_DIR)) {
    console.log(
      chalk.yellow(
        "  ‚ö†Ô∏è R√©pertoire des fragments inexistant. Rien √† sauvegarder.",
      ),
    );
    return;
  }

  const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
  const fragmentsBackupDir = path.join(
    BACKUP_DIR,
    `fragments_backup_${timestamp}`,
  );

  // Cr√©er le r√©pertoire de backup pour les fragments
  fs.mkdirSync(fragmentsBackupDir, { recursive: true });

  // Copier les r√©pertoires de fragments
  const domains = fs.readdirSync(SCHEMAS_DIR);

  for (const domain of domains) {
    const domainPath = path.join(SCHEMAS_DIR, domain);
    const domainStat = fs.statSync(domainPath);

    if (domainStat.isDirectory()) {
      const domainBackupPath = path.join(fragmentsBackupDir, domain);
      fs.mkdirSync(domainBackupPath, { recursive: true });

      // Copier les fichiers de sch√©ma
      const schemaFiles = globSync(path.join(domainPath, "*.prisma"));

      for (const schemaFile of schemaFiles) {
        const fileName = path.basename(schemaFile);
        fs.copyFileSync(schemaFile, path.join(domainBackupPath, fileName));
      }
    }
  }

  console.log(
    chalk.green(
      `  ‚úÖ Fragments sauvegard√©s dans ${path.relative(ROOT_DIR, fragmentsBackupDir)}`,
    ),
  );
}

// R√©g√©n√©rer le client Prisma
async function regeneratePrismaClient(): Promise<void> {
  console.log(chalk.gray("üîß R√©g√©n√©ration du client Prisma..."));

  try {
    execSync("prisma generate", { stdio: "inherit" });
    console.log(chalk.green("  ‚úÖ Client Prisma r√©g√©n√©r√© avec succ√®s"));
  } catch (error) {
    throw new Error("La r√©g√©n√©ration du client Prisma a √©chou√©.");
  }
}

// Valider le sch√©ma restaur√©
async function validateRestoredSchema(): Promise<void> {
  console.log(chalk.gray("üîç Validation du sch√©ma restaur√©..."));

  try {
    execSync("prisma validate", { stdio: "inherit" });
    console.log(chalk.green("  ‚úÖ Sch√©ma Prisma valid√© avec succ√®s"));
  } catch (error) {
    throw new Error("La validation du sch√©ma restaur√© a √©chou√©.");
  }
}

// Ex√©cuter le script
main().catch((err) => {
  console.error(chalk.red("‚ùå Erreur fatale:"), err);
  process.exit(1);
});
