#!/usr/bin/env node

/**
 * Script CLI pour remplacer automatiquement les labels hardcod√©s
 * Usage: node scripts/i18n/replace-labels.js [options]
 */

const { replaceLabels } = require('../../src/lib/utils/replace-labels')
const { Command } = require('commander')
const path = require('path')
const fs = require('fs')

const program = new Command()

program
  .name('replace-labels')
  .description('Remplacer automatiquement les labels hardcod√©s par des appels de traduction')
  .version('1.0.0')

program
  .option('-i, --input <file>', 'Fichier JSON des labels extraits', 'scripts/i18n/extracted-labels.json')
  .option('-f, --function <name>', 'Nom de la fonction de traduction', 't')
  .option('-n, --namespace <name>', 'Namespace par d√©faut', 'common')
  .option('--no-backup', 'Ne pas cr√©er de backups')
  .option('--dry-run', 'Mode simulation (aucun fichier modifi√©)')
  .option('--verbose', 'Mode verbeux')

program.parse()

const options = program.opts()

async function main() {
  try {
    console.log('üîÑ EcoDeli Label Replacer')
    console.log('=========================')
    
    // V√©rifier que le fichier d'entr√©e existe
    if (!fs.existsSync(options.input)) {
      throw new Error(`Le fichier d'entr√©e n'existe pas: ${options.input}`)
    }

    if (options.verbose) {
      console.log('Configuration:')
      console.log(`  Fichier d'entr√©e: ${options.input}`)
      console.log(`  Fonction de traduction: ${options.function}`)
      console.log(`  Namespace par d√©faut: ${options.namespace}`)
      console.log(`  Cr√©er des backups: ${options.backup}`)
      console.log(`  Mode dry-run: ${options.dryRun || false}`)
      console.log('')
    }

    // Pr√©visualiser les labels √† remplacer
    const labelsContent = fs.readFileSync(options.input, 'utf-8')
    const labels = JSON.parse(labelsContent)
    
    console.log(`üìã Chargement de ${labels.length} labels √† remplacer`)
    
    // Grouper par fichier pour un aper√ßu
    const fileGroups = labels.reduce((acc, label) => {
      if (!acc[label.file]) acc[label.file] = 0
      acc[label.file]++
      return acc
    }, {})

    console.log('')
    console.log('üìÅ Fichiers √† modifier:')
    Object.entries(fileGroups)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 10) // Limiter l'affichage
      .forEach(([file, count]) => {
        console.log(`  ${file}: ${count} labels`)
      })
    
    if (Object.keys(fileGroups).length > 10) {
      console.log(`  ... et ${Object.keys(fileGroups).length - 10} autres fichiers`)
    }

    if (options.dryRun) {
      console.log('')
      console.log('üß™ MODE DRY RUN - Aucun fichier ne sera modifi√©')
    } else {
      console.log('')
      console.log('‚ö†Ô∏è  ATTENTION: Cette op√©ration va modifier vos fichiers source!')
      console.log('   Des backups seront cr√©√©s si --no-backup n\'est pas sp√©cifi√©.')
      
      // Demander confirmation si ce n'est pas un dry run
      const readline = require('readline')
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      })

      const answer = await new Promise(resolve => {
        rl.question('Continuer ? (y/N): ', resolve)
      })
      rl.close()

      if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
        console.log('‚ùå Op√©ration annul√©e')
        process.exit(0)
      }
    }

    const config = {
      labelsFile: options.input,
      translationFunction: options.function,
      defaultNamespace: options.namespace,
      createBackups: options.backup,
      dryRun: options.dryRun
    }

    console.log('')
    console.log('üöÄ D√©marrage du remplacement...')
    
    const startTime = Date.now()
    const replacements = await replaceLabels(config)
    const duration = Date.now() - startTime

    console.log('')
    console.log('üìä R√©sultats:')
    console.log(`  ‚úÖ ${replacements.length} remplacements effectu√©s`)
    console.log(`  ‚è±Ô∏è  Temps d'ex√©cution: ${duration}ms`)
    
    // Statistiques par fichier
    const replacementsByFile = replacements.reduce((acc, replacement) => {
      acc[replacement.file] = (acc[replacement.file] || 0) + 1
      return acc
    }, {})

    console.log('')
    console.log('üìÇ Remplacements par fichier:')
    Object.entries(replacementsByFile)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 10)
      .forEach(([file, count]) => {
        console.log(`  ${file}: ${count}`)
      })

    if (!options.dryRun) {
      console.log('')
      console.log('üìù Fichiers de traduction mis √† jour:')
      console.log('  src/messages/fr.json')
      console.log('  src/messages/en.json')
      
      console.log('')
      console.log('üìä Rapport g√©n√©r√©:')
      console.log(`  ${path.join(path.dirname(options.input), 'replacement-report.md')}`)
    }

    console.log('')
    console.log('‚ú® Remplacement termin√© avec succ√®s!')
    console.log('')
    console.log('üìå Prochaines √©tapes:')
    console.log('  1. V√©rifier les fichiers modifi√©s')
    console.log('  2. Tester que l\'application compile et fonctionne')
    console.log('  3. Compl√©ter les traductions EN marqu√©es [TO_TRANSLATE]')
    console.log('  4. Commit les changements')

    if (options.dryRun) {
      console.log('')
      console.log('üí° Pour appliquer r√©ellement les changements:')
      console.log(`   node scripts/i18n/replace-labels.js ${process.argv.slice(2).filter(arg => arg !== '--dry-run').join(' ')}`)
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du remplacement:', error.message)
    if (options.verbose) {
      console.error(error.stack)
    }
    process.exit(1)
  }
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error)
  process.exit(1)
})

process.on('uncaughtException', (error) => {
  console.error('‚ùå Exception non captur√©e:', error)
  process.exit(1)
})

main() 