#!/usr/bin/env node
import { execSync } from 'child_process';
import chalk from 'chalk';
import path from 'path';
import { fileURLToPath } from 'url';
import { extractAllTranslations, generateTranslationFiles } from './extract-labels';
import { program } from 'commander';

// Pour remplacer __dirname dans les modules ES
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Options de la ligne de commande
program
  .option('-c, --check', 'Ex√©cuter en mode v√©rification (sans modification des fichiers)')
  .option('-v, --verbose', 'Afficher des informations d√©taill√©es')
  .option('-f, --force', "Forcer l'extraction m√™me en cas d'erreur")
  .option('-o, --output <dir>', 'R√©pertoire de sortie pour les traductions', 'src/messages')
  .parse(process.argv);

const options = program.opts();

/**
 * Ex√©cute l'extraction des cl√©s de traduction
 */
async function runExtraction() {
  console.log(chalk.blue("üöÄ D√©marrage de l'extraction des cl√©s de traduction..."));

  try {
    // Afficher le mode d'ex√©cution
    if (options.check) {
      console.log(chalk.blue('‚ÑπÔ∏è Mode v√©rification activ√©, aucune modification ne sera effectu√©e'));
    }

    if (options.verbose) {
      console.log(chalk.blue('‚ÑπÔ∏è Mode verbeux activ√©'));
    }

    // Extraire les cl√©s de traduction
    console.log(chalk.blue('üîç Extraction des cl√©s de traduction...'));
    const translationMap = await extractAllTranslations();

    if (Object.keys(translationMap).length === 0) {
      console.warn(chalk.yellow('‚ö†Ô∏è Aucune cl√© de traduction trouv√©e'));
      if (!options.force) {
        console.error(
          chalk.red("‚ùå Arr√™t de l'extraction. Utilisez --force pour continuer m√™me sans cl√©s")
        );
        process.exit(1);
      }
    }

    // G√©n√©rer les fichiers de traduction seulement si pas en mode check
    if (!options.check) {
      console.log(chalk.blue('üìù G√©n√©ration des fichiers de traduction...'));
      await generateTranslationFiles(translationMap);
    } else {
      // En mode check, juste afficher les statistiques
      const totalKeys = Object.keys(translationMap).length;

      console.log(chalk.blue("üìä Statistiques d'extraction:"));
      console.log(`   Total des cl√©s: ${totalKeys}`);

      if (options.verbose && totalKeys > 0) {
        // Afficher quelques exemples de cl√©s
        const keyExamples = Object.keys(translationMap).slice(0, 10);
        console.log(chalk.blue('üìù Exemples de cl√©s:'));
        keyExamples.forEach(key => {
          const occurrences = translationMap[key].occurrences.length;
          console.log(`   - ${key} (${occurrences} occurrence${occurrences > 1 ? 's' : ''})`);
        });
      }
    }

    console.log(chalk.green('‚úÖ Extraction des cl√©s de traduction termin√©e avec succ√®s'));

    // G√©n√©rer automatiquement les traductions si demand√©
    if (!options.check && options.generate) {
      console.log(chalk.blue('üîÑ D√©marrage de la g√©n√©ration des traductions...'));
      try {
        execSync('npx tsx scripts/i18n/run-generation.ts', { stdio: 'inherit' });
        console.log(chalk.green('‚úÖ G√©n√©ration des traductions termin√©e avec succ√®s'));
      } catch (error) {
        console.error(chalk.red(`‚ùå Erreur lors de la g√©n√©ration des traductions: ${error}`));
        // Ne pas quitter pour ne pas perdre le travail d'extraction
      }
    }

    // Valider les traductions si demand√©
    if (options.validate) {
      console.log(chalk.blue('üîç D√©marrage de la validation des traductions...'));
      try {
        execSync('npx tsx scripts/i18n/run-validation.ts', { stdio: 'inherit' });
        console.log(chalk.green('‚úÖ Validation des traductions termin√©e avec succ√®s'));
      } catch (error) {
        console.error(chalk.red(`‚ùå Erreur lors de la validation des traductions: ${error}`));
        // Ne pas quitter pour ne pas perdre le travail pr√©c√©dent
      }
    }
  } catch (error) {
    console.error(chalk.red(`‚ùå Erreur lors de l'extraction: ${error}`));
    process.exit(1);
  }
}

// Ex√©cuter le script
runExtraction().catch(error => {
  console.error(chalk.red(`‚ùå Erreur non g√©r√©e: ${error}`));
  process.exit(1);
});
