#!/bin/bash

# Script de v√©rification rapide de sant√© EcoDeli

echo "======================================"
echo "üìä RAPPORT DE MONITORING ECODELI"
echo "======================================"
echo "Date : $(date +'%d/%m/%Y %H:%M:%S')"
echo ""

BASE_URL="http://localhost:3000"
ERRORS=0
TOTAL=0

# Fonction pour tester un endpoint
test_endpoint() {
    local endpoint=$1
    local expected_code=$2
    local description=$3
    
    TOTAL=$((TOTAL + 1))
    
    response=$(curl -s -o /dev/null -w "%{http_code},%{time_total}" -L --max-time 10 "$BASE_URL$endpoint" 2>/dev/null)
    http_code=$(echo $response | cut -d',' -f1)
    response_time=$(echo $response | cut -d',' -f2)
    
    if [ -z "$http_code" ] || [ "$http_code" = "000" ]; then
        echo "‚ùå $description ($endpoint) : Serveur inaccessible"
        ERRORS=$((ERRORS + 1))
    elif [ "$http_code" = "$expected_code" ]; then
        echo "‚úÖ $description ($endpoint) : HTTP $http_code - ${response_time}s"
    else
        echo "‚ö†Ô∏è  $description ($endpoint) : HTTP $http_code (attendu: $expected_code) - ${response_time}s"
        ERRORS=$((ERRORS + 1))
    fi
}

echo "üåê PAGES PUBLIQUES"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
test_endpoint "/" "200" "Page d'accueil"
test_endpoint "/login" "200" "Page de connexion"
test_endpoint "/register" "200" "Page d'inscription"
test_endpoint "/about" "200" "√Ä propos"
test_endpoint "/contact" "200" "Contact"

echo ""
echo "üîí PAGES PROT√âG√âES (redirection attendue)"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
test_endpoint "/client/dashboard" "302" "Dashboard client"
test_endpoint "/deliverer/dashboard" "302" "Dashboard livreur"
test_endpoint "/merchant/dashboard" "302" "Dashboard marchand"
test_endpoint "/admin/dashboard" "302" "Dashboard admin"

echo ""
echo "üîå ENDPOINTS API"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
test_endpoint "/api/health" "200" "API Health"

echo ""
echo "üìà R√âSUM√â"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
echo "Pages test√©es : $TOTAL"
echo "Erreurs : $ERRORS"

if [ $ERRORS -eq 0 ]; then
    echo "Statut global : ‚úÖ Sain"
elif [ $ERRORS -lt 3 ]; then
    echo "Statut global : ‚ö†Ô∏è  D√©grad√©"
else
    echo "Statut global : ‚ùå Critique"
fi

echo ""
echo "======================================"

# V√©rifier si le serveur Next.js est en cours d'ex√©cution
echo ""
echo "üîß √âTAT DU SERVEUR"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
if pgrep -f "next dev" > /dev/null; then
    echo "‚úÖ Serveur Next.js en cours d'ex√©cution"
    echo "PID: $(pgrep -f "next dev")"
else
    echo "‚ùå Serveur Next.js non d√©tect√©"
    echo "üí° Lancez 'npm run dev' pour d√©marrer le serveur"
fi

# V√©rifier la connexion √† la base de donn√©es via prisma
echo ""
echo "üóÑÔ∏è  BASE DE DONN√âES"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
if command -v npx &> /dev/null; then
    if npx prisma db push --skip-generate --accept-data-loss=false 2>&1 | grep -q "error"; then
        echo "‚ùå Connexion √† la base de donn√©es √©chou√©e"
    else
        echo "‚úÖ Connexion √† la base de donn√©es OK"
    fi
else
    echo "‚ö†Ô∏è  Impossible de v√©rifier la base de donn√©es (npx non disponible)"
fi