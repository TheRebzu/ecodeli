#!/bin/bash

# =============================================================================
# SCRIPT DE D√âPLOIEMENT ECODELI
# =============================================================================

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
ENVIRONMENT="${ENVIRONMENT:-production}"
VERSION="${VERSION:-latest}"
COMPOSE_FILE="docker-compose.yml"
COMPOSE_OVERRIDE=""

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de logging avec couleurs
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ $*${NC}"
}

log_warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $*${NC}"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå $*${NC}"
}

# Fonction d'affichage de l'aide
show_help() {
    cat << EOF
D√©ploiement EcoDeli - Script de d√©ploiement automatis√©

Usage: $0 [OPTIONS] COMMAND

COMMANDS:
    init        Initialisation compl√®te de l'environnement
    deploy      D√©ploiement de l'application
    update      Mise √† jour de l'application
    restart     Red√©marrage des services
    stop        Arr√™t des services
    start       D√©marrage des services
    logs        Affichage des logs
    status      Statut des services
    backup      D√©clenchement d'un backup manuel
    restore     Restauration depuis un backup
    cleanup     Nettoyage des resources inutilis√©es

OPTIONS:
    -e, --env ENV           Environnement (development|staging|production)
    -v, --version VERSION   Version √† d√©ployer
    -f, --force            Forcer le d√©ploiement
    -h, --help             Afficher cette aide
    --dry-run              Simulation sans ex√©cution
    --verbose              Mode verbeux

EXAMPLES:
    $0 init                                 # Initialisation compl√®te
    $0 deploy --env production              # D√©ploiement en production
    $0 update --version 1.2.0              # Mise √† jour vers v1.2.0
    $0 logs web                            # Logs du service web
    $0 backup                              # Backup manuel

Variables d'environnement:
    ENVIRONMENT            Environnement de d√©ploiement
    VERSION               Version √† d√©ployer
    DOCKER_REGISTRY       Registry Docker personnalis√©
    BACKUP_BEFORE_DEPLOY  Backup automatique avant d√©ploiement (true/false)

EOF
}

# Fonction de v√©rification des pr√©requis
check_prerequisites() {
    log "üîç V√©rification des pr√©requis..."
    
    # V√©rifier Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier Docker Compose
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        log_error "Docker Compose n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier l'espace disque (minimum 5GB)
    local available_space=$(df . | awk 'NR==2 {print $4}')
    if [ "$available_space" -lt 5242880 ]; then # 5GB en KB
        log_warning "Espace disque faible: $(echo "$available_space" | awk '{print $1/1024/1024 " GB"}')"
    fi
    
    # V√©rifier les fichiers de configuration
    if [ ! -f "$PROJECT_ROOT/$COMPOSE_FILE" ]; then
        log_error "Fichier docker-compose.yml introuvable"
        exit 1
    fi
    
    # V√©rifier le fichier .env
    if [ ! -f "$PROJECT_ROOT/.env" ]; then
        if [ -f "$PROJECT_ROOT/.env.example" ]; then
            log_warning "Fichier .env introuvable, copie depuis .env.example"
            cp "$PROJECT_ROOT/.env.example" "$PROJECT_ROOT/.env"
        else
            log_error "Fichier .env introuvable"
            exit 1
        fi
    fi
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Fonction de configuration de l'environnement
setup_environment() {
    log "‚öôÔ∏è  Configuration de l'environnement: $ENVIRONMENT"
    
    case "$ENVIRONMENT" in
        "development")
            COMPOSE_OVERRIDE="docker-compose.dev.yml"
            ;;
        "staging")
            COMPOSE_OVERRIDE="docker-compose.staging.yml"
            ;;
        "production")
            COMPOSE_OVERRIDE="docker-compose.prod.yml"
            ;;
        *)
            log_error "Environnement non support√©: $ENVIRONMENT"
            exit 1
            ;;
    esac
    
    # Configuration des variables d'environnement
    export ENVIRONMENT
    export VERSION
    
    log_success "Environnement configur√©: $ENVIRONMENT"
}

# Fonction de construction des images
build_images() {
    log "üî® Construction des images Docker..."
    
    local build_args=""
    if [ "$ENVIRONMENT" = "development" ]; then
        build_args="--no-cache"
    fi
    
    if [ -f "$PROJECT_ROOT/$COMPOSE_OVERRIDE" ]; then
        docker-compose -f "$PROJECT_ROOT/$COMPOSE_FILE" -f "$PROJECT_ROOT/$COMPOSE_OVERRIDE" build $build_args
    else
        docker-compose -f "$PROJECT_ROOT/$COMPOSE_FILE" build $build_args
    fi
    
    log_success "Images construites"
}

# Fonction de backup pr√©-d√©ploiement
pre_deploy_backup() {
    if [ "${BACKUP_BEFORE_DEPLOY:-true}" = "true" ] && [ "$ENVIRONMENT" = "production" ]; then
        log "üíæ Backup pr√©-d√©ploiement..."
        
        # V√©rifier si les services sont en cours
        if docker-compose -f "$PROJECT_ROOT/$COMPOSE_FILE" ps | grep -q "Up"; then
            # D√©clenchement du backup
            docker-compose -f "$PROJECT_ROOT/$COMPOSE_FILE" exec -T backup /app/scripts/backup-all.sh
            log_success "Backup pr√©-d√©ploiement termin√©"
        else
            log_warning "Services non actifs, backup ignor√©"
        fi
    fi
}

# Fonction d'initialisation de la base de donn√©es
init_database() {
    log "üóÉÔ∏è  Initialisation de la base de donn√©es..."
    
    # Attendre que PostgreSQL soit pr√™t
    log "‚è≥ Attente de PostgreSQL..."
    timeout 60 bash -c 'until docker-compose -f "$1/$2" exec -T postgres pg_isready -U postgres; do sleep 2; done' -- "$PROJECT_ROOT" "$COMPOSE_FILE"
    
    # Ex√©cution des migrations Prisma
    log "üîÑ Ex√©cution des migrations..."
    docker-compose -f "$PROJECT_ROOT/$COMPOSE_FILE" exec -T web sh -c "cd apps/web && npx prisma migrate deploy"
    
    # G√©n√©ration du client Prisma
    docker-compose -f "$PROJECT_ROOT/$COMPOSE_FILE" exec -T web sh -c "cd apps/web && npx prisma generate"
    
    # Seeding (uniquement en d√©veloppement)
    if [ "$ENVIRONMENT" = "development" ]; then
        log "üå± Seeding de la base de donn√©es..."
        docker-compose -f "$PROJECT_ROOT/$COMPOSE_FILE" exec -T web sh -c "cd apps/web && npx prisma db seed"
    fi
    
    log_success "Base de donn√©es initialis√©e"
}

# Fonction de d√©ploiement
deploy_services() {
    log "üöÄ D√©ploiement des services..."
    
    local compose_files="-f $PROJECT_ROOT/$COMPOSE_FILE"
    if [ -f "$PROJECT_ROOT/$COMPOSE_OVERRIDE" ]; then
        compose_files="$compose_files -f $PROJECT_ROOT/$COMPOSE_OVERRIDE"
    fi
    
    # Arr√™t en douceur des anciens conteneurs
    docker-compose $compose_files down --remove-orphans
    
    # D√©marrage des nouveaux services
    docker-compose $compose_files up -d
    
    # V√©rification du d√©marrage
    log "‚è≥ V√©rification du d√©marrage des services..."
    sleep 10
    
    # Health checks
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        local healthy_services=0
        local total_services=0
        
        while IFS= read -r line; do
            if [[ $line == *"healthy"* ]]; then
                ((healthy_services++))
            fi
            ((total_services++))
        done < <(docker-compose $compose_files ps --format "table {{.Service}}\t{{.Status}}" | tail -n +2)
        
        if [ $healthy_services -eq $total_services ] && [ $total_services -gt 0 ]; then
            log_success "Tous les services sont op√©rationnels"
            break
        fi
        
        log "‚è≥ Services en cours de d√©marrage ($healthy_services/$total_services) - Tentative $attempt/$max_attempts"
        sleep 5
        ((attempt++))
    done
    
    if [ $attempt -gt $max_attempts ]; then
        log_error "Timeout lors du d√©marrage des services"
        return 1
    fi
    
    log_success "Services d√©ploy√©s avec succ√®s"
}

# Fonction de v√©rification post-d√©ploiement
post_deploy_verification() {
    log "üîç V√©rification post-d√©ploiement..."
    
    # Test de l'application web
    local web_url="http://localhost:3000"
    if curl -s --max-time 10 "$web_url/api/health" >/dev/null; then
        log_success "Application web accessible"
    else
        log_error "Application web non accessible"
        return 1
    fi
    
    # Test de l'API desktop (si en mode production)
    if [ "$ENVIRONMENT" = "production" ]; then
        local desktop_url="http://localhost:8080"
        if curl -s --max-time 10 "$desktop_url/health" >/dev/null; then
            log_success "Application desktop accessible"
        else
            log_warning "Application desktop non accessible"
        fi
    fi
    
    # V√©rification des m√©triques
    local metrics_url="http://localhost:9090"
    if curl -s --max-time 10 "$metrics_url/-/healthy" >/dev/null; then
        log_success "Syst√®me de monitoring op√©rationnel"
    else
        log_warning "Syst√®me de monitoring non accessible"
    fi
    
    log_success "V√©rifications post-d√©ploiement termin√©es"
}

# Fonction d'affichage du statut
show_status() {
    log "üìä Statut des services EcoDeli"
    echo ""
    
    local compose_files="-f $PROJECT_ROOT/$COMPOSE_FILE"
    if [ -f "$PROJECT_ROOT/$COMPOSE_OVERRIDE" ]; then
        compose_files="$compose_files -f $PROJECT_ROOT/$COMPOSE_OVERRIDE"
    fi
    
    docker-compose $compose_files ps
    echo ""
    
    # Affichage des URLs d'acc√®s
    log "üåê URLs d'acc√®s:"
    echo "  - Application Web: http://localhost"
    echo "  - Monitoring: http://localhost/monitoring"
    echo "  - Prometheus: http://localhost:9090"
    echo "  - Application Desktop: http://localhost:8080 (si d√©ploy√©e)"
}

# Fonction d'affichage des logs
show_logs() {
    local service="${1:-}"
    local compose_files="-f $PROJECT_ROOT/$COMPOSE_FILE"
    if [ -f "$PROJECT_ROOT/$COMPOSE_OVERRIDE" ]; then
        compose_files="$compose_files -f $PROJECT_ROOT/$COMPOSE_OVERRIDE"
    fi
    
    if [ -n "$service" ]; then
        docker-compose $compose_files logs -f "$service"
    else
        docker-compose $compose_files logs -f
    fi
}

# Fonction de nettoyage
cleanup() {
    log "üßπ Nettoyage des ressources Docker..."
    
    # Supprimer les images non utilis√©es
    docker image prune -f
    
    # Supprimer les volumes orphelins
    docker volume prune -f
    
    # Supprimer les r√©seaux non utilis√©s
    docker network prune -f
    
    log_success "Nettoyage termin√©"
}

# Fonction principale d'initialisation
init_project() {
    log "üéØ Initialisation compl√®te du projet EcoDeli"
    
    check_prerequisites
    setup_environment
    build_images
    deploy_services
    init_database
    post_deploy_verification
    show_status
    
    log_success "üéâ Initialisation termin√©e avec succ√®s!"
    log "üìñ Consultez la documentation pour les prochaines √©tapes"
}

# Fonction principale de d√©ploiement
deploy_project() {
    log "üöÄ D√©ploiement EcoDeli v$VERSION en $ENVIRONMENT"
    
    check_prerequisites
    setup_environment
    pre_deploy_backup
    build_images
    deploy_services
    post_deploy_verification
    show_status
    
    log_success "üéâ D√©ploiement termin√© avec succ√®s!"
}

# Parsing des arguments
FORCE=false
DRY_RUN=false
VERBOSE=false
COMMAND=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -e|--env)
            ENVIRONMENT="$2"
            shift 2
            ;;
        -v|--version)
            VERSION="$2"
            shift 2
            ;;
        -f|--force)
            FORCE=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            set -x
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        init|deploy|update|restart|stop|start|logs|status|backup|restore|cleanup)
            COMMAND="$1"
            shift
            break
            ;;
        *)
            log_error "Option inconnue: $1"
            show_help
            exit 1
            ;;
    esac
done

# Changement vers le r√©pertoire du projet
cd "$PROJECT_ROOT"

# Traitement des commandes
case "$COMMAND" in
    "init")
        init_project
        ;;
    "deploy")
        deploy_project
        ;;
    "update")
        deploy_project
        ;;
    "restart")
        docker-compose -f "$COMPOSE_FILE" restart
        ;;
    "stop")
        docker-compose -f "$COMPOSE_FILE" down
        ;;
    "start")
        docker-compose -f "$COMPOSE_FILE" up -d
        ;;
    "logs")
        show_logs "$1"
        ;;
    "status")
        show_status
        ;;
    "backup")
        docker-compose -f "$COMPOSE_FILE" exec backup /app/scripts/backup-all.sh
        ;;
    "cleanup")
        cleanup
        ;;
    "")
        log_error "Commande requise"
        show_help
        exit 1
        ;;
    *)
        log_error "Commande inconnue: $COMMAND"
        show_help
        exit 1
        ;;
esac