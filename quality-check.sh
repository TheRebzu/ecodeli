#!/bin/bash

# Script de v√©rification de la qualit√© du code EcoDeli
# √Ä ex√©cuter avant chaque commit ou dans la CI/CD

set -e

echo "üîç V√âRIFICATION DE LA QUALIT√â DU CODE ECODELI"
echo "=============================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Compteurs
ERRORS=0
WARNINGS=0

# Fonction pour afficher les erreurs
error() {
    echo -e "${RED}‚ùå ERREUR: $1${NC}"
    ((ERRORS++))
}

# Fonction pour afficher les avertissements
warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  AVERTISSEMENT: $1${NC}"
    ((WARNINGS++))
}

# Fonction pour afficher les succ√®s
success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# Fonction pour afficher l'info
info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

echo ""
info "V√©rification des anti-patterns de donn√©es mock√©es..."

# 1. V√©rifier Math.random() dans les routers
echo "V√©rification de Math.random() dans les routers..."
MATH_RANDOM_COUNT=$(find apps/web/src/server/api/routers -name "*.ts" -exec grep -l "Math\.random()" {} \; 2>/dev/null | wc -l)
if [ "$MATH_RANDOM_COUNT" -gt 0 ]; then
    error "Math.random() trouv√© dans $MATH_RANDOM_COUNT router(s)"
    find apps/web/src/server/api/routers -name "*.ts" -exec grep -l "Math\.random()" {} \; 2>/dev/null | while read file; do
        echo "  üìç $file"
    done
else
    success "Aucun Math.random() dans les routers"
fi

# 2. V√©rifier setTimeout() dans les routers
echo "V√©rification de setTimeout() dans les routers..."
SETTIMEOUT_COUNT=$(find apps/web/src/server/api/routers -name "*.ts" -exec grep -l "setTimeout" {} \; 2>/dev/null | wc -l)
if [ "$SETTIMEOUT_COUNT" -gt 0 ]; then
    error "setTimeout() trouv√© dans $SETTIMEOUT_COUNT router(s)"
    find apps/web/src/server/api/routers -name "*.ts" -exec grep -l "setTimeout" {} \; 2>/dev/null | while read file; do
        echo "  üìç $file"
    done
else
    success "Aucun setTimeout() dans les routers"
fi

# 3. V√©rifier les fonctions vides qui retournent []
echo "V√©rification des fonctions vides..."
EMPTY_FUNCTIONS=$(find apps/web/src/server/api/routers -name "*.ts" -exec grep -l "return \[\]" {} \; 2>/dev/null | wc -l)
if [ "$EMPTY_FUNCTIONS" -gt 0 ]; then
    warning "Fonctions retournant [] trouv√©es dans $EMPTY_FUNCTIONS fichier(s)"
    find apps/web/src/server/api/routers -name "*.ts" -exec grep -l "return \[\]" {} \; 2>/dev/null | while read file; do
        echo "  üìç $file"
    done
fi

# 4. V√©rifier les TODO/FIXME critiques
echo "V√©rification des TODO critiques..."
TODO_COUNT=$(find apps/web/src/server/api/routers -name "*.ts" -exec grep -i "todo.*implement\|fixme.*implement" {} \; 2>/dev/null | wc -l)
if [ "$TODO_COUNT" -gt 0 ]; then
    warning "$TODO_COUNT TODO d'impl√©mentation trouv√©s"
fi

# 5. V√©rifier l'utilisation des utilitaires optimis√©s
echo "V√©rification de l'utilisation des utilitaires..."

# V√©rifier si calculateDistance est import√© correctement
CORRECT_IMPORTS=$(find apps/web/src/server/api/routers -name "*.ts" -exec grep -l "from '@/server/utils/geo-calculations'" {} \; 2>/dev/null | wc -l)
LOCAL_DISTANCE_FUNCS=$(find apps/web/src/server/api/routers -name "*.ts" -exec grep -l "function calculateDistance" {} \; 2>/dev/null | wc -l)

if [ "$LOCAL_DISTANCE_FUNCS" -gt 0 ]; then
    warning "Fonctions calculateDistance locales trouv√©es (utilisez l'utilitaire centralis√©)"
    find apps/web/src/server/api/routers -name "*.ts" -exec grep -l "function calculateDistance" {} \; 2>/dev/null | while read file; do
        echo "  üìç $file"
    done
fi

if [ "$CORRECT_IMPORTS" -gt 0 ]; then
    success "$CORRECT_IMPORTS fichier(s) utilisent les utilitaires optimis√©s"
fi

echo ""
info "V√©rification de la structure du code..."

# 6. V√©rifier la pr√©sence des utilitaires
if [ -f "apps/web/src/server/utils/geo-calculations.ts" ]; then
    success "Utilitaire geo-calculations.ts pr√©sent"
else
    error "Utilitaire geo-calculations.ts manquant"
fi

if [ -f "apps/web/src/server/utils/validation-helpers.ts" ]; then
    success "Utilitaire validation-helpers.ts pr√©sent"
else
    error "Utilitaire validation-helpers.ts manquant"
fi

if [ -f "apps/web/src/server/utils/database-helpers.ts" ]; then
    success "Utilitaire database-helpers.ts pr√©sent"
else
    error "Utilitaire database-helpers.ts manquant"
fi

# 7. V√©rifier la documentation
if [ -f "MOCK_DATA_ELIMINATION_REPORT.md" ]; then
    success "Rapport d'√©limination pr√©sent"
else
    warning "Rapport d'√©limination manquant"
fi

if [ -f "DEVELOPMENT_BEST_PRACTICES.md" ]; then
    success "Guide des bonnes pratiques pr√©sent"
else
    warning "Guide des bonnes pratiques manquant"
fi

echo ""
info "V√©rification TypeScript (si disponible)..."

# 8. V√©rification TypeScript basique
if command -v tsc >/dev/null 2>&1; then
    echo "Compilation TypeScript des utilitaires..."
    cd apps/web
    
    # V√©rifier seulement les utilitaires pour √©viter les timeouts
    if npx tsc --noEmit src/server/utils/*.ts 2>/dev/null; then
        success "Utilitaires TypeScript compilent sans erreur"
    else
        error "Erreurs de compilation TypeScript dans les utilitaires"
    fi
    cd ../..
else
    info "TypeScript non disponible, v√©rification ignor√©e"
fi

echo ""
echo "=============================================="

# R√©sum√© final
if [ "$ERRORS" -eq 0 ] && [ "$WARNINGS" -eq 0 ]; then
    echo -e "${GREEN}üéâ PARFAIT! Aucun probl√®me d√©tect√©${NC}"
    exit 0
elif [ "$ERRORS" -eq 0 ]; then
    echo -e "${YELLOW}üìù CODE ACCEPTABLE: $WARNINGS avertissement(s)${NC}"
    exit 0
else
    echo -e "${RED}üö® PROBL√àMES D√âTECT√âS: $ERRORS erreur(s), $WARNINGS avertissement(s)${NC}"
    echo -e "${RED}Veuillez corriger les erreurs avant de continuer${NC}"
    exit 1
fi