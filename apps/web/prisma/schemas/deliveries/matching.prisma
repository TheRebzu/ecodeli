// ===== SYSTÈME DE MATCHING AUTOMATIQUE =====

/// Algorithme de matching utilisé
enum MatchingAlgorithm {
  DISTANCE_BASED    // Basé sur la distance
  TIME_OPTIMIZED    // Optimisé pour le temps
  COST_EFFICIENT    // Efficace en coût
  HYBRID            // Hybride (distance + temps + coût)
  AI_ENHANCED       // Amélioré par IA
  MANUAL            // Attribution manuelle
}

/// Type de critère de matching
enum MatchingCriteriaType {
  DISTANCE          // Distance maximale
  TIME_WINDOW       // Fenêtre de temps
  VEHICLE_TYPE      // Type de véhicule
  PACKAGE_TYPE      // Type de colis
  WEIGHT_LIMIT      // Limite de poids
  PRICE_RANGE       // Fourchette de prix
  RATING_MINIMUM    // Note minimale
  LANGUAGE          // Langue
  GENDER_PREFERENCE // Préférence de genre
  CUSTOM            // Critère personnalisé
}

/// Priorité de matching
enum MatchingPriority {
  LOW       // Faible - matching automatique
  NORMAL    // Normal - matching standard
  HIGH      // Élevé - matching prioritaire
  URGENT    // Urgent - matching immédiat
  CRITICAL  // Critique - matching manuel requis
}

/// Statut de résultat de matching
enum MatchingResultStatus {
  PENDING       // En attente
  SUGGESTED     // Suggéré
  ACCEPTED      // Accepté
  REJECTED      // Rejeté
  EXPIRED       // Expiré
  CANCELLED     // Annulé
  AUTO_ASSIGNED // Assigné automatiquement
}

/// Modèle de critères de matching
model MatchingCriteria {
  id                String              @id @default(cuid())
  announcementId    String              @unique
  algorithm         MatchingAlgorithm   @default(HYBRID)
  priority          MatchingPriority    @default(NORMAL)
  
  // Critères géographiques
  maxDistance       Float?              // Distance maximale en km
  preferredRadius   Float?              // Rayon préféré en km
  allowPartialRoute Boolean             @default(true) // Autoriser les trajets partiels
  
  // Critères temporels
  timeWindowStart   DateTime?           // Début de la fenêtre temporelle
  timeWindowEnd     DateTime?           // Fin de la fenêtre temporelle
  maxDelay          Int?                // Retard maximum accepté (en minutes)
  
  // Critères de véhicule
  requiredVehicleTypes VehicleType[]    // Types de véhicules requis
  minVehicleCapacity   Float?           // Capacité minimale du véhicule
  
  // Critères de livreur
  minDelivererRating   Float?           // Note minimale du livreur
  preferredLanguages   String[]         // Langues préférées
  genderPreference     Gender?          // Préférence de genre
  
  // Critères de prix
  maxPrice          Decimal?            @db.Decimal(10, 2) // Prix maximum
  minPrice          Decimal?            @db.Decimal(10, 2) // Prix minimum
  allowNegotiation  Boolean             @default(true)     // Autoriser la négociation
  
  // Critères de colis
  packageTypes      PackageType[]       // Types de colis acceptés
  maxWeight         Float?              // Poids maximum
  requiresHandling  Boolean             @default(false)    // Nécessite une manipulation spéciale
  
  // Configuration avancée
  autoAssignAfter   Int?                // Auto-assignation après X minutes
  maxSuggestions    Int                 @default(5)        // Nombre maximum de suggestions
  scoreThreshold    Float               @default(0.6)      // Seuil de score minimum
  
  // Relations
  announcement      Announcement        @relation("MatchingCriteriaToAnnouncement", fields: [announcementId], references: [id], onDelete: Cascade)
  results           MatchingResult[]
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@map("matching_criteria")
}

/// Modèle de résultat de matching
model MatchingResult {
  id               String               @id @default(cuid())
  criteriaId       String
  delivererId      String
  announcementId   String
  status           MatchingResultStatus @default(PENDING)
  
  // Scores de matching
  overallScore     Float                // Score global (0-1)
  distanceScore    Float                // Score de distance (0-1)
  timeScore        Float                // Score de temps (0-1)
  priceScore       Float                // Score de prix (0-1)
  ratingScore      Float                // Score de notation (0-1)
  
  // Détails du matching
  calculatedDistance Float              // Distance calculée en km
  estimatedDuration  Int                // Durée estimée en minutes
  suggestedPrice     Decimal            @db.Decimal(10, 2) // Prix suggéré
  
  // Métadonnées de matching
  algorithm        MatchingAlgorithm    // Algorithme utilisé
  processingTime   Int                  // Temps de traitement en ms
  confidenceLevel  Float               // Niveau de confiance (0-1)
  
  // Timestamps
  suggestedAt      DateTime            @default(now())
  respondedAt      DateTime?           // Date de réponse du livreur
  expiresAt        DateTime            // Date d'expiration de la suggestion
  
  // Raison du rejet si applicable
  rejectionReason  String?
  
  // Relations
  criteria         MatchingCriteria    @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
  deliverer        User                @relation("MatchingResultToDeliverer", fields: [delivererId], references: [id], onDelete: Cascade)
  announcement     Announcement        @relation("MatchingResultToAnnouncement", fields: [announcementId], references: [id], onDelete: Cascade)
  
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@unique([criteriaId, delivererId])
  @@map("matching_results")
}

/// Modèle de préférences de matching pour les livreurs
model DelivererMatchingPreferences {
  id                    String        @id @default(cuid())
  delivererId           String        @unique
  
  // Préférences géographiques
  preferredRadius       Float         @default(10.0) // Rayon préféré en km
  maxRadius             Float         @default(25.0) // Rayon maximum en km
  homeLatitude          Float?        // Latitude du domicile
  homeLongitude         Float?        // Longitude du domicile
  
  // Préférences temporelles
  availableFrom         String?       // Heure de début (format HH:MM)
  availableTo           String?       // Heure de fin (format HH:MM)
  availableDays         Int[]         // Jours disponibles (0=dimanche, 6=samedi)
  maxWorkingHours       Int           @default(8)    // Heures de travail max par jour
  
  // Préférences de colis
  acceptedPackageTypes  PackageType[] // Types de colis acceptés
  maxPackageWeight      Float         @default(20.0) // Poids maximum en kg
  acceptFragile         Boolean       @default(true)  // Accepter les colis fragiles
  acceptRefrigerated    Boolean       @default(false) // Accepter les colis réfrigérés
  
  // Préférences financières
  minPrice              Decimal       @db.Decimal(10, 2) @default(5.00) // Prix minimum
  maxPrice              Decimal?      @db.Decimal(10, 2) // Prix maximum
  acceptNegotiation     Boolean       @default(true)     // Accepter la négociation
  
  // Préférences de notification
  instantNotification   Boolean       @default(true)  // Notification instantanée
  maxSuggestions        Int           @default(10)    // Nombre max de suggestions par jour
  autoDeclineAfter      Int           @default(60)    // Auto-refus après X minutes
  
  // Statistiques de performance
  averageResponseTime   Int           @default(0)     // Temps de réponse moyen en minutes
  acceptanceRate        Float         @default(0.0)   // Taux d'acceptation (0-1)
  completionRate        Float         @default(0.0)   // Taux de completion (0-1)
  
  // Relations
  deliverer             User          @relation("DelivererMatchingPreferences", fields: [delivererId], references: [id], onDelete: Cascade)
  
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@map("deliverer_matching_preferences")
}

/// Modèle de route planifiée pour les livreurs


/// Modèle de liaison entre route et annonce
model RouteAnnouncement {
  id             String       @id @default(cuid())
  routeId        String
  announcementId String
  
  // Détails du match
  matchScore     Float        // Score de compatibilité (0-1)
  detourDistance Float        // Distance de détour en km
  detourTime     Int          // Temps de détour en minutes
  priceOffered   Decimal      @db.Decimal(10, 2) // Prix proposé
  
  // Statut
  status         MatchingStatus @default(SUGGESTED)
  matchedAt      DateTime       @default(now())
  respondedAt    DateTime?
  
  // Relations
  route          DelivererPlannedRoute   @relation(fields: [routeId], references: [id], onDelete: Cascade)
  announcement   Announcement   @relation("RouteAnnouncementToAnnouncement", fields: [announcementId], references: [id], onDelete: Cascade)
  
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([routeId, announcementId])
  @@map("route_announcements")
}