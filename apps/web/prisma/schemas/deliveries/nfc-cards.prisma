// ===== NFC CARD MANAGEMENT =====

/// Statut d'une carte NFC
enum NFCCardStatus {
  ACTIVE      // Active
  INACTIVE    // Inactive
  BLOCKED     // Bloquée
  LOST        // Perdue
  STOLEN      // Volée
  DAMAGED     // Endommagée
  EXPIRED     // Expirée
}

/// Type de transaction NFC
enum NFCTransactionType {
  DELIVERY_START    // Début de livraison
  DELIVERY_END      // Fin de livraison
  PACKAGE_PICKUP    // Récupération de colis
  PACKAGE_DELIVERY  // Livraison de colis
  VALIDATION        // Validation
  ACCESS_GRANT      // Autorisation d'accès
  SYSTEM_CHECK      // Vérification système
}

/// Statut d'assignation de carte NFC
enum NFCAssignmentStatus {
  ASSIGNED   // Assignée
  UNASSIGNED // Non assignée
  PENDING    // En attente
  REVOKED    // Révoquée
}

/// Modèle de carte NFC pour les livreurs
model NFCCard {
  id           String        @id @default(cuid())
  cardNumber   String        @unique // Numéro unique de la carte
  serialNumber String?       @unique // Numéro de série physique
  status       NFCCardStatus @default(INACTIVE)
  issuedAt     DateTime      @default(now())
  expiresAt    DateTime?     // Date d'expiration
  lastUsedAt   DateTime?     // Dernière utilisation

  // Relations
  delivererId String?
  deliverer   User?   @relation("NFCCardToDeliverer", fields: [delivererId], references: [id], onDelete: SetNull)

  // Historique des assignations
  assignments NFCCardAssignment[]
  
  // Transactions effectuées avec cette carte
  transactions NFCCardTransaction[]

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("nfc_cards")
}

/// Modèle d'assignation de carte NFC
model NFCCardAssignment {
  id          String              @id @default(cuid())
  cardId      String
  delivererId String
  status      NFCAssignmentStatus @default(PENDING)
  assignedAt  DateTime            @default(now())
  unassignedAt DateTime?
  reason      String?             // Raison de l'assignation/révocation
  assignedBy  String?             // ID de l'admin qui a fait l'assignation

  // Relations
  card      NFCCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  deliverer User    @relation("NFCAssignmentToDeliverer", fields: [delivererId], references: [id], onDelete: Cascade)
  admin     User?   @relation("NFCAssignmentToAdmin", fields: [assignedBy], references: [id], onDelete: SetNull)

  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("nfc_card_assignments")
}

/// Modèle de transaction NFC
model NFCCardTransaction {
  id            String             @id @default(cuid())
  cardId        String
  delivererId   String
  transactionType NFCTransactionType
  amount        Decimal?           @db.Decimal(10, 2) // Montant si applicable
  description   String?
  location      String?            // Localisation de la transaction
  gpsLatitude   Float?
  gpsLongitude  Float?
  deviceInfo    String?            // Informations sur le dispositif de lecture
  isSuccessful  Boolean            @default(true)
  errorMessage  String?            // Message d'erreur si échec

  // Relations
  card        NFCCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
  deliverer   User    @relation("NFCTransactionToDeliverer", fields: [delivererId], references: [id], onDelete: Cascade)
  
  // Relation optionnelle avec une livraison
  deliveryId  String?
  delivery    Delivery? @relation("NFCTransactionToDelivery", fields: [deliveryId], references: [id], onDelete: SetNull)

  // Métadonnées
  transactionAt DateTime @default(now())
  createdAt     DateTime @default(now())

  @@map("nfc_card_transactions")
}

/// Modèle de validation de code de livraison
model DeliveryValidationCode {
  id          String  @id @default(cuid())
  deliveryId  String  @unique
  code        String  @unique // Code de validation (6-8 chiffres)
  isUsed      Boolean @default(false)
  usedAt      DateTime?
  expiresAt   DateTime // Date d'expiration du code
  
  // Relations
  delivery    Delivery @relation("DeliveryValidationCodeToDelivery", fields: [deliveryId], references: [id], onDelete: Cascade)
  
  // Métadonnées de validation
  generatedBy String? // ID de l'utilisateur qui a généré le code
  validatedBy String? // ID de l'utilisateur qui a utilisé le code
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("delivery_validation_codes")
}