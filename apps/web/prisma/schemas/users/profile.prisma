// ===== MODÈLES DE PROFILS UTILISATEURS =====
// Ces modèles définissent les profils spécifiques pour chaque type d'utilisateur,
// avec leurs attributs et relations propres.

/// Profil client: utilisateur qui demande des livraisons et stockage
model Client {
  id                String    @id @default(cuid())
  userId            String    @unique
  address           String?
  phone             String?
  preferences       Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  city              String?
  state             String?
  postalCode        String?
  country           String?
  preferredLanguage String?
  newsletterOptIn   Boolean   @default(false)
  notificationPrefs Json?
  avatarUrl         String?
  
  // Relations
  deliveryAddresses Address[]
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("clients")
}

/// Profil livreur: utilisateur qui effectue les livraisons
model Deliverer {
  id                  String    @id @default(cuid())
  userId              String    @unique
  address             String?
  phone               String
  vehicleType         String?
  licensePlate        String?
  isVerified          Boolean   @default(false)
  availableHours      Json?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  verificationDate    DateTime?
  maxCapacity         Float?
  currentLocation     String?
  isActive            Boolean   @default(false)
  rating              Float?
  serviceZones        Json?
  bio                 String?
  yearsOfExperience   Int?
  preferredVehicle    String?
  maxWeightCapacity   Float?
  availableDays       String[]
  bankInfo            Json?
  taxIdentifier       String?
  deliveryPreferences Json?
  
  // Relations
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deliverers")
}

/// Profil commerçant: utilisateur qui propose des produits
model Merchant {
  id               String     @id @default(cuid())
  userId           String     @unique
  companyName      String
  address          String
  phone            String
  businessType     String?
  vatNumber        String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  businessName     String?
  businessAddress  String?
  businessCity     String?
  businessState    String?
  businessPostal   String?
  businessCountry  String?
  taxId            String?
  websiteUrl       String?
  isVerified       Boolean    @default(false)
  verificationDate DateTime?
  logoUrl          String?
  coverPhotoUrl    String?
  openingHours     Json?
  description      String?
  socialLinks      Json?
  paymentMethods   String[]
  deliveryOptions  String[]
  certifications   String[]
  foundingYear     Int?
  employeeCount    Int?
  
  // Relations
  contracts        Contract[]
  verification     MerchantVerification?
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("merchants")
}

/// Profil prestataire: utilisateur qui offre des services
model Provider {
  id                 String    @id @default(cuid())
  userId             String    @unique
  companyName        String?
  address            String
  phone              String
  services           String[]
  isVerified         Boolean   @default(false)
  rating             Float?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  serviceType        String?
  description        String?
  availability       String?
  verificationDate   DateTime?
  professionalBio    String?
  serviceRadius      Int?
  portfolioUrls      String[]
  qualifications     String[]
  yearsInBusiness    Int?
  insuranceInfo      Json?
  workSchedule       Json?
  serviceFees        Json?
  cancellationPolicy String?
  languages          String[]
  
  // Relations
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills             Skill[]
  verification       ProviderVerification?

  @@map("providers")
}

/// Profil administrateur: utilisateur qui gère la plateforme
model Admin {
  id               String   @id @default(cuid())
  userId           String   @unique
  permissions      String[]
  department       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?
  
  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

/// Adresses de livraison associées à un client
model Address {
  id         String  @id @default(cuid())
  label      String
  street     String
  city       String
  state      String?
  postalCode String
  country    String
  isDefault  Boolean @default(false)
  clientId   String
  
  // Relations
  client       Client              @relation(fields: [clientId], references: [id], onDelete: Cascade)
  appointments ClientAppointment[] // Rendez-vous se déroulant à cette adresse

  @@map("addresses")
} 