#!/usr/bin/env node
import fs from 'fs/promises';
import path from 'path';
import chalk from 'chalk';
import { glob } from 'glob';
import { fileURLToPath } from 'url';

// Pour remplacer __dirname dans les modules ES
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '../..');

async function testFileDetection() {
  console.log(chalk.blue('üîç Test de d√©tection des fichiers...'));
  console.log(chalk.blue(`üìÅ R√©pertoire racine du projet: ${projectRoot}`));

  // R√©pertoires √† analyser
  const directories = ['src/app', 'src/components', 'src/hooks', 'src/lib', 'src/server'];

  // Extensions √† rechercher
  const extensions = ['ts', 'tsx', 'js', 'jsx'];

  // R√©sultats par extension
  const resultsByExt: Record<string, string[]> = {};

  // Pour chaque r√©pertoire et extension
  for (const directory of directories) {
    const fullDirPath = path.resolve(projectRoot, directory);
    console.log(chalk.blue(`üìÅ Test du r√©pertoire: ${fullDirPath}`));

    // V√©rifier si le r√©pertoire existe
    try {
      await fs.access(fullDirPath);
    } catch (error) {
      console.log(
        chalk.yellow(`‚ö†Ô∏è Le r√©pertoire ${fullDirPath} n'existe pas ou n'est pas accessible`)
      );
      continue;
    }

    for (const ext of extensions) {
      // Test avec diff√©rentes m√©thodes de pattern
      const patterns = [
        `${fullDirPath}/**/*.${ext}`, // M√©thode 1: chemin absolu + pattern glob
        path.join(fullDirPath, '**', `*.${ext}`), // M√©thode 2: path.join
        `${directory}/**/*.${ext}`, // M√©thode 3: chemin relatif (√† partir de la racine)
      ];

      console.log(chalk.blue(`üîç Test de l'extension .${ext}:`));

      for (const [index, pattern] of patterns.entries()) {
        try {
          console.log(chalk.blue(`  [${index + 1}] Pattern: ${pattern}`));

          // M√©thode 1: utiliser glob directement
          const files = await glob(pattern, {
            ignore: ['**/node_modules/**'],
            cwd: index === 2 ? projectRoot : undefined, // Utiliser cwd uniquement pour le pattern relatif
          });

          console.log(
            chalk.green(`  ‚úÖ ${files.length} fichiers trouv√©s avec la m√©thode ${index + 1}`)
          );

          // Stocker les r√©sultats
          if (!resultsByExt[ext]) {
            resultsByExt[ext] = [];
          }

          // Afficher quelques fichiers trouv√©s
          if (files.length > 0) {
            console.log(chalk.green(`  üìÑ Exemples de fichiers trouv√©s:`));
            files.slice(0, 3).forEach(file => {
              console.log(chalk.green(`    - ${file}`));
              resultsByExt[ext].push(file);
            });
          }

          // Recherche sp√©cifique de todo
          const todoFiles = files.filter(file => file.includes('todo') || file.includes('Todo'));
          if (todoFiles.length > 0) {
            console.log(chalk.green(`  üéØ Fichiers Todo trouv√©s (${todoFiles.length}):`));
            todoFiles.forEach(file => {
              console.log(chalk.green(`    - ${file}`));
            });
          } else if (files.length > 0) {
            console.log(chalk.yellow(`  ‚ö†Ô∏è Aucun fichier Todo trouv√© avec ce pattern`));
          }
        } catch (error) {
          console.error(chalk.red(`  ‚ùå Erreur avec le pattern ${pattern}: ${error}`));
        }
      }
    }
  }

  // R√©sum√©
  console.log(chalk.blue('\nüìä R√©sum√© des fichiers trouv√©s:'));
  for (const ext of extensions) {
    const files = resultsByExt[ext] || [];
    console.log(chalk.blue(`  .${ext}: ${files.length} fichiers uniques`));
  }
}

// Ex√©cuter le test
testFileDetection().catch(error => {
  console.error(chalk.red(`‚ùå Erreur d'ex√©cution: ${error}`));
});
