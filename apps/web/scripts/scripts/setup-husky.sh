#!/bin/bash
# scripts/setup-husky.sh

echo "üöÄ Configuration de Husky pour EcoDeli"

# Installer les d√©pendances n√©cessaires
echo "üì¶ Installation des d√©pendances..."
pnpm add -D husky lint-staged @commitlint/cli @commitlint/config-conventional

# Initialiser Husky
echo "üîß Initialisation de Husky..."
pnpm husky install

# Cr√©er le hook pre-commit
echo "üìù Cr√©ation du hook pre-commit..."
cat > .husky/pre-commit << 'EOF'
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üîç V√©rification du code avant commit..."

# Ex√©cuter lint-staged
pnpm lint-staged

# V√©rifier les types TypeScript
echo "üìä V√©rification des types TypeScript..."
pnpm typecheck || {
  echo "‚ùå Erreurs de type d√©tect√©es. Tentative de correction automatique..."
  pnpm fix:types
  pnpm typecheck || {
    echo "‚ùå Impossible de corriger automatiquement. Veuillez corriger manuellement."
    exit 1
  }
}

echo "‚úÖ Pr√©-commit termin√© avec succ√®s!"
EOF

# Cr√©er le hook commit-msg
echo "üìù Cr√©ation du hook commit-msg..."
cat > .husky/commit-msg << 'EOF'
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

pnpm commitlint --edit "$1"
EOF

# Cr√©er le hook pre-push
echo "üìù Cr√©ation du hook pre-push..."
cat > .husky/pre-push << 'EOF'
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "üöÄ V√©rification avant push..."

# Construire le projet
echo "üèóÔ∏è Test de build..."
pnpm build || {
  echo "‚ùå Le build a √©chou√©. Tentative de correction automatique..."
  pnpm fix:build
  pnpm build || {
    echo "‚ùå Impossible de construire le projet. Push annul√©."
    exit 1
  }
}

echo "‚úÖ Pr√©-push termin√© avec succ√®s!"
EOF

# Rendre les hooks ex√©cutables
chmod +x .husky/pre-commit
chmod +x .husky/commit-msg
chmod +x .husky/pre-push

# Cr√©er la configuration lint-staged
echo "üìù Cr√©ation de la configuration lint-staged..."
cat > .lintstagedrc.js << 'EOF'
module.exports = {
  // TypeScript et TSX
  '*.{ts,tsx}': [
    // Corriger les imports
    'tsx scripts/fix-imports.ts',
    // Corriger avec ESLint
    'eslint --fix',
    // Formater avec Prettier
    'prettier --write',
    // V√©rifier les types (sans bloquer)
    () => 'pnpm typecheck',
  ],
  
  // JavaScript et JSX
  '*.{js,jsx}': [
    'eslint --fix',
    'prettier --write',
  ],
  
  // JSON
  '*.json': [
    'prettier --write',
  ],
  
  // CSS et SCSS
  '*.{css,scss}': [
    'prettier --write',
  ],
  
  // Markdown
  '*.md': [
    'prettier --write',
  ],
  
  // Prisma
  'prisma/schema.prisma': [
    'prisma format',
  ],
};
EOF

# Cr√©er la configuration commitlint
echo "üìù Cr√©ation de la configuration commitlint..."
cat > commitlint.config.js << 'EOF'
module.exports = {
  extends: ['@commitlint/config-conventional'],
  rules: {
    'type-enum': [
      2,
      'always',
      [
        'feat',     // Nouvelle fonctionnalit√©
        'fix',      // Correction de bug
        'docs',     // Documentation
        'style',    // Formatage, point-virgule manquant, etc.
        'refactor', // Refactoring du code
        'perf',     // Am√©lioration des performances
        'test',     // Ajout ou modification de tests
        'build',    // Changements du syst√®me de build
        'ci',       // Changements CI/CD
        'chore',    // Autres changements
        'revert',   // Revert d'un commit pr√©c√©dent
      ],
    ],
    'type-case': [2, 'always', 'lower-case'],
    'type-empty': [2, 'never'],
    'scope-case': [2, 'always', 'lower-case'],
    'subject-case': [2, 'never', ['sentence-case', 'start-case', 'pascal-case', 'upper-case']],
    'subject-empty': [2, 'never'],
    'subject-full-stop': [2, 'never', '.'],
    'header-max-length': [2, 'always', 100],
  },
};
EOF

# Cr√©er un script de v√©rification compl√®te
echo "üìù Cr√©ation du script de v√©rification compl√®te..."
cat > scripts/check-all.ts << 'EOF'
#!/usr/bin/env tsx
// scripts/check-all.ts

import { execSync } from 'child_process';
import chalk from 'chalk';

const checks = [
  {
    name: 'Format',
    command: 'pnpm format:check',
    fix: 'pnpm format',
  },
  {
    name: 'Lint',
    command: 'pnpm lint',
    fix: 'pnpm lint --fix',
  },
  {
    name: 'Types',
    command: 'pnpm typecheck',
    fix: 'pnpm fix:types',
  },
  {
    name: 'Imports',
    command: 'tsx scripts/fix-imports.ts --dry-run',
    fix: 'tsx scripts/fix-imports.ts',
  },
  {
    name: 'Build',
    command: 'pnpm build',
    fix: 'pnpm fix:build',
  },
];

async function runChecks() {
  console.log(chalk.bold.cyan('üîç EcoDeli - V√©rification compl√®te du projet\n'));
  
  const results = [];
  
  for (const check of checks) {
    console.log(chalk.blue(`V√©rification : ${check.name}...`));
    
    try {
      execSync(check.command, { stdio: 'pipe' });
      console.log(chalk.green(`‚úÖ ${check.name} : OK\n`));
      results.push({ name: check.name, status: 'pass' });
    } catch (error) {
      console.log(chalk.red(`‚ùå ${check.name} : √âchec`));
      
      if (process.argv.includes('--fix')) {
        console.log(chalk.yellow(`üîß Tentative de correction...`));
        try {
          execSync(check.fix, { stdio: 'inherit' });
          console.log(chalk.green(`‚úÖ Corrig√© !\n`));
          results.push({ name: check.name, status: 'fixed' });
        } catch {
          console.log(chalk.red(`‚ùå Correction impossible\n`));
          results.push({ name: check.name, status: 'failed' });
        }
      } else {
        console.log(chalk.gray(`üí° Utilisez --fix pour corriger automatiquement\n`));
        results.push({ name: check.name, status: 'failed' });
      }
    }
  }
  
  // R√©sum√©
  console.log(chalk.bold.cyan('\nüìä R√©sum√© :\n'));
  results.forEach(result => {
    const icon = result.status === 'pass' ? '‚úÖ' : result.status === 'fixed' ? 'üîß' : '‚ùå';
    const color = result.status === 'pass' ? chalk.green : result.status === 'fixed' ? chalk.yellow : chalk.red;
    console.log(color(`${icon} ${result.name}`));
  });
  
  const failed = results.filter(r => r.status === 'failed').length;
  if (failed > 0) {
    console.log(chalk.red(`\n‚ùå ${failed} v√©rification(s) √©chou√©e(s)`));
    process.exit(1);
  } else {
    console.log(chalk.green('\n‚úÖ Toutes les v√©rifications sont pass√©es !'));
  }
}

runChecks().catch(console.error);
EOF

chmod +x scripts/check-all.ts

echo "‚úÖ Configuration Husky termin√©e !"
echo ""
echo "üìö Commandes disponibles :"
echo "  pnpm fix         - Corriger automatiquement tous les probl√®mes"
echo "  pnpm fix:build   - Corriger les erreurs de build"
echo "  pnpm fix:imports - Corriger les imports"
echo "  pnpm fix:lint    - Corriger les erreurs de lint"
echo "  pnpm fix:format  - Formater le code"
echo ""
echo "üéØ Les corrections automatiques seront appliqu√©es :"
echo "  - Avant chaque commit (pre-commit)"
echo "  - Avant chaque push (pre-push)"
echo "  - Sur demande avec 'pnpm fix'"