# Docker Compose configuration for EcoDeli
# Mode: Development & Production

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ecodeli_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ecodeli
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ecodeli_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d ecodeli"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application Next.js EcoDeli
  ecodeli-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: ecodeli_app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password}@postgres:5432/ecodeli
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-secret-key-here}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET:-}
      ONESIGNAL_APP_ID: ${ONESIGNAL_APP_ID:-}
      ONESIGNAL_API_KEY: ${ONESIGNAL_API_KEY:-}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - uploads_data:/app/public/uploads
      - logs_data:/app/logs
    networks:
      - ecodeli_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PgAdmin pour la gestion de la base de données
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ecodeli_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@ecodeli.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ecodeli_network
    profiles:
      - monitoring

  # Reverse proxy Nginx
  nginx:
    image: nginx:alpine
    container_name: ecodeli_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - ecodeli-app
    networks:
      - ecodeli_network
    profiles:
      - production

  # Monitoring avec Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ecodeli_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - ecodeli_network
    profiles:
      - monitoring

  # Tableau de bord Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ecodeli_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - ecodeli_network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ecodeli_network:
    driver: bridge
