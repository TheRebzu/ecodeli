# Docker Compose pour EcoDeli - Version simplifiée et fonctionnelle

services:
  # Base de données PostgreSQL
  ecodeli-db:
    image: postgres:15-alpine
    container_name: ecodeli-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ecodeli
      POSTGRES_USER: ecodeli
      POSTGRES_PASSWORD: ecodeli_secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecodeli_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ecodeli", "-d", "ecodeli"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application web Next.js
  ecodeli-web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecodeli-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://ecodeli:ecodeli_secure_password@ecodeli-db:5432/ecodeli
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=ecodeli-2024-super-secret-key-for-development
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      ecodeli-db:
        condition: service_healthy
    networks:
      - ecodeli_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  ecodeli_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local