version: '3.8'

services:
  # =============================================================================
  # APPLICATION WEB (Next.js)
  # =============================================================================
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile.simple
      target: development
    container_name: ecodeli-web
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://ecodeli_user:${POSTGRES_PASSWORD}@postgres:5432/ecodeli_db

      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - API_SECRET_KEY=${API_SECRET_KEY}
    depends_on:
      - postgres
    networks:
      - ecodeli-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - web-uploads:/app/public/uploads
      - web-logs:/app/logs

  # =============================================================================
  # APPLICATION DESKTOP (Java)
  # =============================================================================
  desktop:
    build:
      context: ./apps/desktop-java
      dockerfile: Dockerfile
    container_name: ecodeli-desktop
    ports:
      - "8080:8080"
    environment:
      - API_BASE_URL=http://web:3000
      - JAVA_OPTS=-Xmx2g -Djavafx.platform=monocle -Dmonocle.platform=Headless
      - DISPLAY_WIDTH=1920
      - DISPLAY_HEIGHT=1080
    depends_on:
      - web
    networks:
      - ecodeli-network
    restart: unless-stopped
    volumes:
      - desktop-reports:/app/reports
      - desktop-logs:/app/logs

  # =============================================================================
  # BASE DE DONNÉES POSTGRESQL
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: ecodeli-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ecodeli_db
      - POSTGRES_USER=ecodeli_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./docker/postgres/backup:/backups
      - postgres-logs:/var/log/postgresql
    networks:
      - ecodeli-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecodeli_user -d ecodeli_db"]
      interval: 30s
      timeout: 5s
      retries: 3
    command: >
      postgres
      -c log_statement=all
      -c log_duration=on
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
      -c shared_preload_libraries=pg_stat_statements



  # =============================================================================
  # REVERSE PROXY NGINX
  # =============================================================================
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: ecodeli-nginx
    ports:
      - "80:80"
      - "443:443"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
      - web-uploads:/var/www/uploads:ro
    depends_on:
      - web
      - desktop
    networks:
      - ecodeli-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =============================================================================
  # MONITORING - PROMETHEUS
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: ecodeli-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - ecodeli-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =============================================================================
  # MONITORING - GRAFANA
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: ecodeli-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - ecodeli-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =============================================================================
  # EXPORTERS POUR MONITORING
  # =============================================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: ecodeli-node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - ecodeli-network
    restart: unless-stopped

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: ecodeli-postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://ecodeli_user:${POSTGRES_PASSWORD}@postgres:5432/ecodeli_db?sslmode=disable
    depends_on:
      - postgres
    networks:
      - ecodeli-network
    restart: unless-stopped



  # =============================================================================
  # SERVICE DE BACKUP
  # =============================================================================
  backup:
    build:
      context: ./docker/backup
      dockerfile: Dockerfile
    container_name: ecodeli-backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=ecodeli_db
      - POSTGRES_USER=ecodeli_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE_DAILY=0 23 * * *
      - BACKUP_SCHEDULE_MONTHLY=0 23 30 * *
      - BACKUP_RETENTION_DAYS=30
      - BACKUP_LOCATION=/backups
      - NOTIFICATION_EMAIL=${NOTIFICATION_EMAIL}
    volumes:
      - ./docker/postgres/backup:/backups
      - postgres-data:/var/lib/postgresql/data:ro

      - web-uploads:/web-uploads:ro
      - backup-logs:/var/log/backup
    depends_on:
      - postgres
    networks:
      - ecodeli-network
    restart: unless-stopped

  # =============================================================================
  # SERVICE MAIL (MAILHOG pour développement)
  # =============================================================================
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ecodeli-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - ecodeli-network
    restart: unless-stopped

# =============================================================================
# VOLUMES PERSISTANTS
# =============================================================================
volumes:
  postgres-data:
    driver: local

  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  web-uploads:
    driver: local
  desktop-reports:
    driver: local
  postgres-logs:
    driver: local

  nginx-logs:
    driver: local
  web-logs:
    driver: local
  desktop-logs:
    driver: local
  backup-logs:
    driver: local

# =============================================================================
# RÉSEAUX
# =============================================================================
networks:
  ecodeli-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16