# Docker Compose configuration for EcoDeli
# Mode: Development & Production

services:
  postgres:
    image: postgres:15-alpine
    container_name: ecodeli-postgres
    environment:
      POSTGRES_DB: ecodeli
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - ecodeli_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: ecodeli-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - ecodeli_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        DATABASE_URL: ${DATABASE_URL}
        NEXTAUTH_URL: ${NEXTAUTH_URL}
        NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
        STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
        STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
        STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
        ONESIGNAL_APP_ID: ${ONESIGNAL_APP_ID}
        ONESIGNAL_API_KEY: ${ONESIGNAL_API_KEY}
        NODE_ENV: ${NODE_ENV}
        DOCKER: ${DOCKER}
    image: ecodeli-app:latest
    container_name: ecodeli-app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - ONESIGNAL_APP_ID=${ONESIGNAL_APP_ID}
      - ONESIGNAL_API_KEY=${ONESIGNAL_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_SECURE=${SMTP_SECURE}
      - GMAIL_USER=${GMAIL_USER}
      - GMAIL_APP_PASSWORD=${GMAIL_APP_PASSWORD}
      - NODE_ENV=${NODE_ENV}
      - DOCKER=${DOCKER}
      - DEFAULT_LOCALE=${DEFAULT_LOCALE}
      - TZ=${TZ}
      - LOG_LEVEL=${LOG_LEVEL}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - UPLOAD_DIR=${UPLOAD_DIR}
      - ENABLE_TUTORIALS=${ENABLE_TUTORIALS}
      - ENABLE_NOTIFICATIONS=${ENABLE_NOTIFICATIONS}
      - ENABLE_TRACKING=${ENABLE_TRACKING}
      - ENABLE_ANALYTICS=${ENABLE_ANALYTICS}
      - FRONTEND_URL=${FRONTEND_URL}
      - API_URL=${API_URL}
    ports:
      - "3000:3000"
    volumes:
      - ./public/uploads:/app/public/uploads
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - ecodeli_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ecodeli-pgadmin
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - ecodeli_network

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  ecodeli_network:
    driver: bridge
