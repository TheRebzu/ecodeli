# Docker Compose pour EcoDeli - Configuration de production
version: '3.8'

networks:
  ecodeli-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  app_logs:
    driver: local
  uploads:
    driver: local

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: ecodeli-postgres
    restart: unless-stopped
    networks:
      - ecodeli-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ecodeli}
      POSTGRES_USER: ${POSTGRES_USER:-ecodeli_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ecodeli_user} -d ${POSTGRES_DB:-ecodeli}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=mod
      -c log_duration=on
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: ecodeli-redis
    restart: unless-stopped
    networks:
      - ecodeli-network
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    sysctls:
      - net.core.somaxconn=65535

  # Application Next.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: ecodeli-app
    restart: unless-stopped
    networks:
      - ecodeli-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Configuration base de données
      DATABASE_URL: "postgresql://${POSTGRES_USER:-ecodeli_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-ecodeli}?schema=public"
      
      # Configuration Redis
      REDIS_URL: "redis://redis:6379"
      
      # Configuration Next.js
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      
      # Configuration Stripe
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # Configuration OneSignal
      ONESIGNAL_APP_ID: ${ONESIGNAL_APP_ID}
      ONESIGNAL_API_KEY: ${ONESIGNAL_API_KEY}
      
      # Configuration email
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM}
      
      # Configuration cloud monitoring
      DATADOG_API_KEY: ${DATADOG_API_KEY}
      AZURE_MONITOR_CONNECTION_STRING: ${AZURE_MONITOR_CONNECTION_STRING}
      
      # Configuration de l'application
      NODE_ENV: production
      LOG_LEVEL: info
      PORT: 3000
      
    volumes:
      - app_logs:/app/logs
      - uploads:/app/uploads
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Reverse Proxy Nginx
  nginx:
    image: nginx:alpine
    container_name: ecodeli-nginx
    restart: unless-stopped
    networks:
      - ecodeli-network
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./error-pages:/var/www/ecodeli/error-pages:ro
      - nginx_logs:/var/log/nginx
      - uploads:/var/www/ecodeli/uploads:ro
      # Certificats SSL (à configurer pour la production)
      - ./ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: ecodeli-prometheus
    restart: unless-stopped
    networks:
      - ecodeli-network
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana pour la visualisation (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: ecodeli-grafana
    restart: unless-stopped
    networks:
      - ecodeli-network
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - ./monitoring/grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources:ro
    profiles:
      - monitoring

  # Collecteur de logs (optionnel)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: ecodeli-fluentd
    restart: unless-stopped
    networks:
      - ecodeli-network
    ports:
      - "24224:24224"
    volumes:
      - ./logging/fluentd.conf:/fluentd/etc/fluent.conf:ro
      - app_logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
    environment:
      FLUENTD_CONF: fluent.conf
    profiles:
      - logging

  # Backup automatique de la base de données
  postgres-backup:
    image: postgres:15-alpine
    container_name: ecodeli-backup
    restart: "no"
    networks:
      - ecodeli-network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-ecodeli_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-ecodeli}
      BACKUP_RETENTION_DAYS: 7
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: ["/bin/sh", "/backup.sh"]
    profiles:
      - backup

# Configuration des secrets (utiliser Docker Secrets en production)
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  stripe_secret:
    file: ./secrets/stripe_secret.txt
  nextauth_secret:
    file: ./secrets/nextauth_secret.txt