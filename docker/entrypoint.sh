#!/bin/sh
set -e

# Variables avec des valeurs par d√©faut
MAX_RETRIES=${MAX_RETRIES:-30}
RETRY_INTERVAL=${RETRY_INTERVAL:-2}

echo "üöÄ D√©marrage du script d'entr√©e EcoDeli..."

# Fonction pour tester la connexion √† la base de donn√©es
check_database() {
  npx prisma@latest db execute --schema=./prisma/schema.prisma --stdin < /dev/null > /dev/null 2>&1
  return $?
}

# Attendre que la base de donn√©es soit disponible
echo "‚è≥ Attente de la disponibilit√© de la base de donn√©es PostgreSQL..."
RETRIES=0
until check_database || [ $RETRIES -eq $MAX_RETRIES ]; do
  RETRIES=$((RETRIES+1))
  echo "üîÑ Tentative $RETRIES/$MAX_RETRIES - Connexion √† la base de donn√©es impossible, nouvelle tentative dans ${RETRY_INTERVAL}s..."
  sleep $RETRY_INTERVAL
done

if [ $RETRIES -eq $MAX_RETRIES ]; then
  echo "‚ùå Impossible de se connecter √† la base de donn√©es apr√®s $MAX_RETRIES tentatives."
  exit 1
fi

echo "‚úÖ Connexion √† la base de donn√©es √©tablie avec succ√®s!"

# Ex√©cuter les migrations Prisma en production
echo "üîÑ Ex√©cution des migrations Prisma..."
npx prisma@latest migrate deploy --schema=./prisma/schema.prisma

# V√©rifier si le seeding est demand√© (d√©sactiv√© par d√©faut en production)
if [ "$PRISMA_SEED" = "true" ]; then
  echo "üå± D√©marrage du seeding de la base de donn√©es..."
  npx tsx ./prisma/seed.ts
  echo "‚úÖ Seeding termin√© avec succ√®s!"
fi

echo "üöÄ D√©marrage de l'application Next.js..."
# Utiliser exec pour que node re√ßoive les signaux SIGTERM/SIGINT
exec node server.js 