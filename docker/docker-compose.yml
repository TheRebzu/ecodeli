version: '3.8'

services:
  # Application Next.js
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    image: ecodeli-app:latest
    container_name: ecodeli-app
    restart: unless-stopped
    ports:
      - '3000:3000'
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/ecodeli?schema=public
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      # Autres variables d'environnement nécessaires
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - ONESIGNAL_APP_ID=${ONESIGNAL_APP_ID}
      - ONESIGNAL_API_KEY=${ONESIGNAL_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
    volumes:
      # Pour les uploads et fichiers persistants
      - uploads-data:/app/public/uploads
      - ./logs:/app/logs
    networks:
      - ecodeli-network

  # Base de données PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: ecodeli-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=postgres
      - POSTGRES_DB=ecodeli
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - ecodeli-network

  # Redis pour le cache et rate limiting
  redis:
    image: redis:7-alpine
    container_name: ecodeli-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - ecodeli-network

  # Service de sauvegarde (optionnel)
  backup:
    image: postgres:16-alpine
    container_name: ecodeli-backup
    restart: unless-stopped
    depends_on:
      - postgres
    volumes:
      - postgres-backup:/backups
      - ./backup-scripts:/scripts
    command: ['sh', '-c', 'chmod +x /scripts/backup.sh && /scripts/backup.sh']
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=ecodeli
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 0 * * *}
    networks:
      - ecodeli-network

volumes:
  postgres-data:
  redis-data:
  uploads-data:
  postgres-backup:

networks:
  ecodeli-network:
    driver: bridge
