version: '3.8'

services:
  # Application Next.js
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        - NODE_ENV=production
    image: ecodeli-app:production
    container_name: ecodeli-app
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/ecodeli?schema=public
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
      - ONESIGNAL_APP_ID=${ONESIGNAL_APP_ID}
      - ONESIGNAL_API_KEY=${ONESIGNAL_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
    volumes:
      - uploads-volume:/app/public/uploads
      - logs-volume:/app/logs
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '5'
    networks:
      - ecodeli-network
    healthcheck:
      test:
        ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3000/api/health']
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Base de données PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: ecodeli-postgres
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-ecodeli}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecodeli-network
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  # Redis pour le cache et rate limiting
  redis:
    image: redis:7-alpine
    container_name: ecodeli-redis
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', 'ping']
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - ecodeli-network
    logging:
      driver: 'json-file'
      options:
        max-size: '5m'
        max-file: '3'

  # Proxy Nginx (optionnel mais recommandé pour la prod)
  nginx:
    image: nginx:stable-alpine
    container_name: ecodeli-nginx
    restart: always
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - uploads-volume:/var/www/uploads
    depends_on:
      - web
    networks:
      - ecodeli-network
    logging:
      driver: 'json-file'
      options:
        max-size: '5m'
        max-file: '3'

  # Service de sauvegarde
  backup:
    image: postgres:16-alpine
    container_name: ecodeli-backup
    restart: always
    volumes:
      - postgres-backups:/backups
      - ./backup-scripts:/scripts:ro
    command: ['sh', '-c', 'chmod +x /scripts/backup.sh && /scripts/backup.sh']
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-ecodeli}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 0 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
    depends_on:
      - postgres
    networks:
      - ecodeli-network
    logging:
      driver: 'json-file'
      options:
        max-size: '5m'
        max-file: '3'

volumes:
  postgres-data:
  redis-data:
  uploads-volume:
  logs-volume:
  postgres-backups:

networks:
  ecodeli-network:
    driver: bridge
