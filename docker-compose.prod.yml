version: '3.8'

# =============================================================================
# CONFIGURATION PRODUCTION
# Surcharge pour environnement de production avec haute disponibilitÃ©
# =============================================================================

services:
  # =============================================================================
  # WEB - CONFIGURATION PRODUCTION
  # =============================================================================
  web:
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - RATE_LIMIT_ENABLED=true
      - CORS_ORIGIN=${CORS_ORIGIN}
    healthcheck:
      interval: 15s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # =============================================================================
  # DESKTOP - CONFIGURATION PRODUCTION
  # =============================================================================
  desktop:
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    environment:
      - JAVA_OPTS=-Xmx3g -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Djavafx.platform=monocle
      - LOG_LEVEL=INFO
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # =============================================================================
  # POSTGRESQL - CONFIGURATION PRODUCTION
  # =============================================================================
  postgres:
    deploy:
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    environment:
      - POSTGRES_SHARED_BUFFERS=1GB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=3GB
      - POSTGRES_MAINTENANCE_WORK_MEM=256MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=64MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
    command: >
      postgres
      -c shared_buffers=1GB
      -c effective_cache_size=3GB
      -c maintenance_work_mem=256MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=64MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=32MB
      -c min_wal_size=2GB
      -c max_wal_size=4GB
      -c max_connections=200
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=all
      -c log_duration=on
      -c log_checkpoints=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_lock_waits=on
    healthcheck:
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "200m"
        max-file: "5"

  # =============================================================================
  # REDIS - CONFIGURATION PRODUCTION
  # =============================================================================
  redis:
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 800mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 300
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # =============================================================================
  # NGINX - CONFIGURATION PRODUCTION AVEC SSL
  # =============================================================================
  nginx:
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      - SSL_ENABLED=true
      - SSL_CERT_PATH=/etc/nginx/ssl/cert.pem
      - SSL_KEY_PATH=/etc/nginx/ssl/key.pem
    volumes:
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx/conf.d/production.conf:/etc/nginx/conf.d/default.conf:ro
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # =============================================================================
  # PROMETHEUS - CONFIGURATION PRODUCTION
  # =============================================================================
  prometheus:
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.max-block-duration=2h'
      - '--storage.tsdb.min-block-duration=2h'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # =============================================================================
  # GRAFANA - CONFIGURATION PRODUCTION
  # =============================================================================
  grafana:
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_LOG_LEVEL=info
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=mailhog:1025
      - GF_SMTP_FROM_ADDRESS=${NOTIFICATION_EMAIL}
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # =============================================================================
  # BACKUP - CONFIGURATION PRODUCTION
  # =============================================================================
  backup:
    deploy:
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - BACKUP_RETENTION_DAYS=90
      - BACKUP_COMPRESSION=gzip
      - BACKUP_ENCRYPTION_ENABLED=true
      - BACKUP_ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
      - BACKUP_REMOTE_STORAGE=${BACKUP_REMOTE_STORAGE}
      - BACKUP_S3_BUCKET=${BACKUP_S3_BUCKET}
      - BACKUP_S3_ACCESS_KEY=${BACKUP_S3_ACCESS_KEY}
      - BACKUP_S3_SECRET_KEY=${BACKUP_S3_SECRET_KEY}
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

# =============================================================================
# CONFIGURATION VOLUMES PRODUCTION
# =============================================================================
volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ecodeli/data/postgres
  
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ecodeli/data/redis
  
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ecodeli/data/prometheus
  
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ecodeli/data/grafana
  
  web-uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ecodeli/data/uploads
  
  desktop-reports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/ecodeli/data/reports